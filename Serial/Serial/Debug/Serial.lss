
Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002898  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  00002898  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000094  2000043c  00002cd4  0002043c  2**2
                  ALLOC
  3 .stack        00002000  200004d0  00002d68  0002043c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY
  6 .debug_info   00020c4b  00000000  00000000  000204bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028fe  00000000  00000000  00041108  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000016db  00000000  00000000  00043a06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004b8  00000000  00000000  000450e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003d8  00000000  00000000  00045599  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a52a  00000000  00000000  00045971  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009ee7  00000000  00000000  0005fe9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008828e  00000000  00000000  00069d82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001048  00000000  00000000  000f2010  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 24 00 20 f1 23 00 00 e9 24 00 00 e9 24 00 00     .$. .#...$...$..
	...
      2c:	e9 24 00 00 00 00 00 00 00 00 00 00 e9 24 00 00     .$...........$..
      3c:	e9 24 00 00 e9 24 00 00 e9 24 00 00 e9 24 00 00     .$...$...$...$..
      4c:	e9 24 00 00 e9 24 00 00 e9 24 00 00 e9 24 00 00     .$...$...$...$..
      5c:	e9 24 00 00 e9 24 00 00 85 17 00 00 9d 17 00 00     .$...$..........
      6c:	b5 17 00 00 cd 17 00 00 e5 17 00 00 fd 17 00 00     ................
      7c:	e9 24 00 00 e9 24 00 00 e9 24 00 00 e9 24 00 00     .$...$...$...$..
      8c:	e9 24 00 00 e9 24 00 00 00 00 00 00 00 00 00 00     .$...$..........
      9c:	e9 24 00 00 e9 24 00 00 e9 24 00 00 e9 24 00 00     .$...$...$...$..
      ac:	e9 24 00 00 00 00 00 00                             .$......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000043c 	.word	0x2000043c
      d4:	00000000 	.word	0x00000000
      d8:	00002898 	.word	0x00002898

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000440 	.word	0x20000440
     108:	00002898 	.word	0x00002898
     10c:	00002898 	.word	0x00002898
     110:	00000000 	.word	0x00000000

00000114 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     120:	4b06      	ldr	r3, [pc, #24]	; (13c <system_interrupt_enable+0x28>)
     122:	1dfa      	adds	r2, r7, #7
     124:	7812      	ldrb	r2, [r2, #0]
     126:	0011      	movs	r1, r2
     128:	221f      	movs	r2, #31
     12a:	400a      	ands	r2, r1
     12c:	2101      	movs	r1, #1
     12e:	4091      	lsls	r1, r2
     130:	000a      	movs	r2, r1
     132:	601a      	str	r2, [r3, #0]
}
     134:	46c0      	nop			; (mov r8, r8)
     136:	46bd      	mov	sp, r7
     138:	b002      	add	sp, #8
     13a:	bd80      	pop	{r7, pc}
     13c:	e000e100 	.word	0xe000e100

00000140 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     140:	b580      	push	{r7, lr}
     142:	b084      	sub	sp, #16
     144:	af00      	add	r7, sp, #0
     146:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     148:	687b      	ldr	r3, [r7, #4]
     14a:	681b      	ldr	r3, [r3, #0]
     14c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     14e:	68fb      	ldr	r3, [r7, #12]
     150:	69db      	ldr	r3, [r3, #28]
     152:	1e5a      	subs	r2, r3, #1
     154:	4193      	sbcs	r3, r2
     156:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     158:	0018      	movs	r0, r3
     15a:	46bd      	mov	sp, r7
     15c:	b004      	add	sp, #16
     15e:	bd80      	pop	{r7, pc}

00000160 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     160:	b580      	push	{r7, lr}
     162:	b082      	sub	sp, #8
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     168:	687b      	ldr	r3, [r7, #4]
     16a:	0018      	movs	r0, r3
     16c:	4b04      	ldr	r3, [pc, #16]	; (180 <_usart_wait_for_sync+0x20>)
     16e:	4798      	blx	r3
     170:	1e03      	subs	r3, r0, #0
     172:	d000      	beq.n	176 <_usart_wait_for_sync+0x16>
     174:	e7f8      	b.n	168 <_usart_wait_for_sync+0x8>
		/* Wait until the synchronization is complete */
	}
}
     176:	46c0      	nop			; (mov r8, r8)
     178:	46bd      	mov	sp, r7
     17a:	b002      	add	sp, #8
     17c:	bd80      	pop	{r7, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	00000141 	.word	0x00000141

00000184 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     184:	b580      	push	{r7, lr}
     186:	b082      	sub	sp, #8
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	2280      	movs	r2, #128	; 0x80
     190:	05d2      	lsls	r2, r2, #23
     192:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     194:	687b      	ldr	r3, [r7, #4]
     196:	2200      	movs	r2, #0
     198:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     19a:	687b      	ldr	r3, [r7, #4]
     19c:	22ff      	movs	r2, #255	; 0xff
     19e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     1a0:	687b      	ldr	r3, [r7, #4]
     1a2:	2200      	movs	r2, #0
     1a4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     1a6:	687b      	ldr	r3, [r7, #4]
     1a8:	2200      	movs	r2, #0
     1aa:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     1ac:	687b      	ldr	r3, [r7, #4]
     1ae:	2296      	movs	r2, #150	; 0x96
     1b0:	0192      	lsls	r2, r2, #6
     1b2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	2224      	movs	r2, #36	; 0x24
     1b8:	2101      	movs	r1, #1
     1ba:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	2225      	movs	r2, #37	; 0x25
     1c0:	2101      	movs	r1, #1
     1c2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     1c4:	687b      	ldr	r3, [r7, #4]
     1c6:	2226      	movs	r2, #38	; 0x26
     1c8:	2100      	movs	r1, #0
     1ca:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     1cc:	687b      	ldr	r3, [r7, #4]
     1ce:	2227      	movs	r2, #39	; 0x27
     1d0:	2100      	movs	r1, #0
     1d2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	2200      	movs	r2, #0
     1d8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     1da:	687b      	ldr	r3, [r7, #4]
     1dc:	2288      	movs	r2, #136	; 0x88
     1de:	0352      	lsls	r2, r2, #13
     1e0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     1e2:	687b      	ldr	r3, [r7, #4]
     1e4:	222c      	movs	r2, #44	; 0x2c
     1e6:	2100      	movs	r1, #0
     1e8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     1ea:	687b      	ldr	r3, [r7, #4]
     1ec:	222d      	movs	r2, #45	; 0x2d
     1ee:	2100      	movs	r1, #0
     1f0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     1f2:	687b      	ldr	r3, [r7, #4]
     1f4:	2200      	movs	r2, #0
     1f6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     1f8:	687b      	ldr	r3, [r7, #4]
     1fa:	2200      	movs	r2, #0
     1fc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     1fe:	687b      	ldr	r3, [r7, #4]
     200:	2200      	movs	r2, #0
     202:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     204:	687b      	ldr	r3, [r7, #4]
     206:	2200      	movs	r2, #0
     208:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     20a:	687b      	ldr	r3, [r7, #4]
     20c:	2200      	movs	r2, #0
     20e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     210:	687b      	ldr	r3, [r7, #4]
     212:	2200      	movs	r2, #0
     214:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     216:	687b      	ldr	r3, [r7, #4]
     218:	2200      	movs	r2, #0
     21a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	2200      	movs	r2, #0
     220:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     222:	687b      	ldr	r3, [r7, #4]
     224:	2200      	movs	r2, #0
     226:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     228:	687b      	ldr	r3, [r7, #4]
     22a:	2200      	movs	r2, #0
     22c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     22e:	687b      	ldr	r3, [r7, #4]
     230:	2213      	movs	r2, #19
     232:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     234:	687b      	ldr	r3, [r7, #4]
     236:	2200      	movs	r2, #0
     238:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	46bd      	mov	sp, r7
     23e:	b002      	add	sp, #8
     240:	bd80      	pop	{r7, pc}
	...

00000244 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     244:	b580      	push	{r7, lr}
     246:	b084      	sub	sp, #16
     248:	af00      	add	r7, sp, #0
     24a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     24c:	687b      	ldr	r3, [r7, #4]
     24e:	681b      	ldr	r3, [r3, #0]
     250:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     252:	687b      	ldr	r3, [r7, #4]
     254:	681b      	ldr	r3, [r3, #0]
     256:	0018      	movs	r0, r3
     258:	4b09      	ldr	r3, [pc, #36]	; (280 <usart_enable+0x3c>)
     25a:	4798      	blx	r3
     25c:	0003      	movs	r3, r0
     25e:	0018      	movs	r0, r3
     260:	4b08      	ldr	r3, [pc, #32]	; (284 <usart_enable+0x40>)
     262:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     264:	687b      	ldr	r3, [r7, #4]
     266:	0018      	movs	r0, r3
     268:	4b07      	ldr	r3, [pc, #28]	; (288 <usart_enable+0x44>)
     26a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     26c:	68fb      	ldr	r3, [r7, #12]
     26e:	681b      	ldr	r3, [r3, #0]
     270:	2202      	movs	r2, #2
     272:	431a      	orrs	r2, r3
     274:	68fb      	ldr	r3, [r7, #12]
     276:	601a      	str	r2, [r3, #0]
}
     278:	46c0      	nop			; (mov r8, r8)
     27a:	46bd      	mov	sp, r7
     27c:	b004      	add	sp, #16
     27e:	bd80      	pop	{r7, pc}
     280:	00001741 	.word	0x00001741
     284:	00000115 	.word	0x00000115
     288:	00000161 	.word	0x00000161

0000028c <_ZN6Serial10initializeEv>:
 */ 

#include "Serial.h"

void Serial::initialize()
{
     28c:	b580      	push	{r7, lr}
     28e:	b082      	sub	sp, #8
     290:	af00      	add	r7, sp, #0
     292:	6078      	str	r0, [r7, #4]
	usart_get_config_defaults(&usartConfig);
     294:	687b      	ldr	r3, [r7, #4]
     296:	3374      	adds	r3, #116	; 0x74
     298:	0018      	movs	r0, r3
     29a:	4b1b      	ldr	r3, [pc, #108]	; (308 <_ZN6Serial10initializeEv+0x7c>)
     29c:	4798      	blx	r3
	
	usartConfig.baudrate    = 115200;
     29e:	687b      	ldr	r3, [r7, #4]
     2a0:	2194      	movs	r1, #148	; 0x94
     2a2:	22e1      	movs	r2, #225	; 0xe1
     2a4:	0252      	lsls	r2, r2, #9
     2a6:	505a      	str	r2, [r3, r1]
	usartConfig.mux_setting = configUSART_MUX_SETTING;
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	2180      	movs	r1, #128	; 0x80
     2ac:	22c4      	movs	r2, #196	; 0xc4
     2ae:	0392      	lsls	r2, r2, #14
     2b0:	505a      	str	r2, [r3, r1]
	usartConfig.pinmux_pad0 = configUSART_PINMUX_PAD0;
     2b2:	687b      	ldr	r3, [r7, #4]
     2b4:	22a4      	movs	r2, #164	; 0xa4
     2b6:	4915      	ldr	r1, [pc, #84]	; (30c <_ZN6Serial10initializeEv+0x80>)
     2b8:	5099      	str	r1, [r3, r2]
	usartConfig.pinmux_pad1 = configUSART_PINMUX_PAD1;
     2ba:	687b      	ldr	r3, [r7, #4]
     2bc:	22a8      	movs	r2, #168	; 0xa8
     2be:	4914      	ldr	r1, [pc, #80]	; (310 <_ZN6Serial10initializeEv+0x84>)
     2c0:	5099      	str	r1, [r3, r2]
	usartConfig.pinmux_pad2 = configUSART_PINMUX_PAD2;
     2c2:	687b      	ldr	r3, [r7, #4]
     2c4:	21ac      	movs	r1, #172	; 0xac
     2c6:	2201      	movs	r2, #1
     2c8:	4252      	negs	r2, r2
     2ca:	505a      	str	r2, [r3, r1]
	usartConfig.pinmux_pad3 = configUSART_PINMUX_PAD3;
     2cc:	687b      	ldr	r3, [r7, #4]
     2ce:	21b0      	movs	r1, #176	; 0xb0
     2d0:	2201      	movs	r2, #1
     2d2:	4252      	negs	r2, r2
     2d4:	505a      	str	r2, [r3, r1]
	
	while (usart_init(&usartModule, SERCOM0, &usartConfig) != STATUS_OK) {}
     2d6:	687b      	ldr	r3, [r7, #4]
     2d8:	3340      	adds	r3, #64	; 0x40
     2da:	0018      	movs	r0, r3
     2dc:	687b      	ldr	r3, [r7, #4]
     2de:	3374      	adds	r3, #116	; 0x74
     2e0:	490c      	ldr	r1, [pc, #48]	; (314 <_ZN6Serial10initializeEv+0x88>)
     2e2:	001a      	movs	r2, r3
     2e4:	4b0c      	ldr	r3, [pc, #48]	; (318 <_ZN6Serial10initializeEv+0x8c>)
     2e6:	4798      	blx	r3
     2e8:	0003      	movs	r3, r0
     2ea:	1e5a      	subs	r2, r3, #1
     2ec:	4193      	sbcs	r3, r2
     2ee:	b2db      	uxtb	r3, r3
     2f0:	2b00      	cmp	r3, #0
     2f2:	d000      	beq.n	2f6 <_ZN6Serial10initializeEv+0x6a>
     2f4:	e7ef      	b.n	2d6 <_ZN6Serial10initializeEv+0x4a>
	usart_enable(&usartModule);
     2f6:	687b      	ldr	r3, [r7, #4]
     2f8:	3340      	adds	r3, #64	; 0x40
     2fa:	0018      	movs	r0, r3
     2fc:	4b07      	ldr	r3, [pc, #28]	; (31c <_ZN6Serial10initializeEv+0x90>)
     2fe:	4798      	blx	r3
	
}
     300:	46c0      	nop			; (mov r8, r8)
     302:	46bd      	mov	sp, r7
     304:	b002      	add	sp, #8
     306:	bd80      	pop	{r7, pc}
     308:	00000185 	.word	0x00000185
     30c:	00060003 	.word	0x00060003
     310:	00070003 	.word	0x00070003
     314:	42000800 	.word	0x42000800
     318:	00000e4d 	.word	0x00000e4d
     31c:	00000245 	.word	0x00000245

00000320 <_ZN6Serial11writeStringEPct>:
	uint16_t tx = static_cast<uint16_t>(txByte);
	while(usart_write_wait(&usartModule, tx) != STATUS_OK) {}
}

void Serial::writeString(char* txString, uint16_t size)
{
     320:	b580      	push	{r7, lr}
     322:	b086      	sub	sp, #24
     324:	af00      	add	r7, sp, #0
     326:	60f8      	str	r0, [r7, #12]
     328:	60b9      	str	r1, [r7, #8]
     32a:	1dbb      	adds	r3, r7, #6
     32c:	801a      	strh	r2, [r3, #0]
	uint8_t* tx = reinterpret_cast<uint8_t*>(txString);
     32e:	68bb      	ldr	r3, [r7, #8]
     330:	617b      	str	r3, [r7, #20]
	while (usart_write_buffer_wait(&usartModule, tx, size) != STATUS_OK) {}
     332:	68fb      	ldr	r3, [r7, #12]
     334:	3340      	adds	r3, #64	; 0x40
     336:	0018      	movs	r0, r3
     338:	1dbb      	adds	r3, r7, #6
     33a:	881a      	ldrh	r2, [r3, #0]
     33c:	697b      	ldr	r3, [r7, #20]
     33e:	0019      	movs	r1, r3
     340:	4b06      	ldr	r3, [pc, #24]	; (35c <_ZN6Serial11writeStringEPct+0x3c>)
     342:	4798      	blx	r3
     344:	0003      	movs	r3, r0
     346:	1e5a      	subs	r2, r3, #1
     348:	4193      	sbcs	r3, r2
     34a:	b2db      	uxtb	r3, r3
     34c:	2b00      	cmp	r3, #0
     34e:	d000      	beq.n	352 <_ZN6Serial11writeStringEPct+0x32>
     350:	e7ef      	b.n	332 <_ZN6Serial11writeStringEPct+0x12>
	for(uint8_t i = 0; txString[i] != '\0'; i++)
	{
		write(txString[i]);
	}
	*/
}
     352:	46c0      	nop			; (mov r8, r8)
     354:	46bd      	mov	sp, r7
     356:	b006      	add	sp, #24
     358:	bd80      	pop	{r7, pc}
     35a:	46c0      	nop			; (mov r8, r8)
     35c:	00001211 	.word	0x00001211

00000360 <_ZN6Serial4readEv>:

char Serial::read()
{
     360:	b580      	push	{r7, lr}
     362:	b084      	sub	sp, #16
     364:	af00      	add	r7, sp, #0
     366:	6078      	str	r0, [r7, #4]
	uint16_t rx;
	while(usart_read_wait(&usartModule, &rx) != STATUS_OK) {}
     368:	687b      	ldr	r3, [r7, #4]
     36a:	3340      	adds	r3, #64	; 0x40
     36c:	220e      	movs	r2, #14
     36e:	18ba      	adds	r2, r7, r2
     370:	0011      	movs	r1, r2
     372:	0018      	movs	r0, r3
     374:	4b08      	ldr	r3, [pc, #32]	; (398 <_ZN6Serial4readEv+0x38>)
     376:	4798      	blx	r3
     378:	0003      	movs	r3, r0
     37a:	1e5a      	subs	r2, r3, #1
     37c:	4193      	sbcs	r3, r2
     37e:	b2db      	uxtb	r3, r3
     380:	2b00      	cmp	r3, #0
     382:	d000      	beq.n	386 <_ZN6Serial4readEv+0x26>
     384:	e7f0      	b.n	368 <_ZN6Serial4readEv+0x8>
	return static_cast<char>(rx);
     386:	230e      	movs	r3, #14
     388:	18fb      	adds	r3, r7, r3
     38a:	881b      	ldrh	r3, [r3, #0]
     38c:	b2db      	uxtb	r3, r3
}
     38e:	0018      	movs	r0, r3
     390:	46bd      	mov	sp, r7
     392:	b004      	add	sp, #16
     394:	bd80      	pop	{r7, pc}
     396:	46c0      	nop			; (mov r8, r8)
     398:	00001125 	.word	0x00001125

0000039c <_ZN6Serial10readStringEv>:


char* Serial::readString()
{
     39c:	b590      	push	{r4, r7, lr}
     39e:	b085      	sub	sp, #20
     3a0:	af00      	add	r7, sp, #0
     3a2:	6078      	str	r0, [r7, #4]
	// TRY USING USART_READ_BUFFER_WAIT
	
	for (uint8_t j = 0; j < sizeof(rxBuffer); j++)
     3a4:	230f      	movs	r3, #15
     3a6:	18fb      	adds	r3, r7, r3
     3a8:	2200      	movs	r2, #0
     3aa:	701a      	strb	r2, [r3, #0]
     3ac:	230f      	movs	r3, #15
     3ae:	18fb      	adds	r3, r7, r3
     3b0:	781b      	ldrb	r3, [r3, #0]
     3b2:	2b3f      	cmp	r3, #63	; 0x3f
     3b4:	d80d      	bhi.n	3d2 <_ZN6Serial10readStringEv+0x36>
	{
		rxBuffer[j] = '\0';
     3b6:	230f      	movs	r3, #15
     3b8:	18fb      	adds	r3, r7, r3
     3ba:	781b      	ldrb	r3, [r3, #0]
     3bc:	687a      	ldr	r2, [r7, #4]
     3be:	2100      	movs	r1, #0
     3c0:	54d1      	strb	r1, [r2, r3]
	for (uint8_t j = 0; j < sizeof(rxBuffer); j++)
     3c2:	230f      	movs	r3, #15
     3c4:	18fb      	adds	r3, r7, r3
     3c6:	781a      	ldrb	r2, [r3, #0]
     3c8:	230f      	movs	r3, #15
     3ca:	18fb      	adds	r3, r7, r3
     3cc:	3201      	adds	r2, #1
     3ce:	701a      	strb	r2, [r3, #0]
     3d0:	e7ec      	b.n	3ac <_ZN6Serial10readStringEv+0x10>
	}
	
	char rxByte;	
	uint8_t i = 0;
     3d2:	230e      	movs	r3, #14
     3d4:	18fb      	adds	r3, r7, r3
     3d6:	2200      	movs	r2, #0
     3d8:	701a      	strb	r2, [r3, #0]
	
	do 
	{
		rxBuffer[i] = read();
     3da:	230e      	movs	r3, #14
     3dc:	18fb      	adds	r3, r7, r3
     3de:	781c      	ldrb	r4, [r3, #0]
     3e0:	687b      	ldr	r3, [r7, #4]
     3e2:	0018      	movs	r0, r3
     3e4:	4b13      	ldr	r3, [pc, #76]	; (434 <_ZN6Serial10readStringEv+0x98>)
     3e6:	4798      	blx	r3
     3e8:	0003      	movs	r3, r0
     3ea:	001a      	movs	r2, r3
     3ec:	687b      	ldr	r3, [r7, #4]
     3ee:	551a      	strb	r2, [r3, r4]
		rxByte = rxBuffer[i++];
     3f0:	230e      	movs	r3, #14
     3f2:	18fb      	adds	r3, r7, r3
     3f4:	781b      	ldrb	r3, [r3, #0]
     3f6:	220e      	movs	r2, #14
     3f8:	18ba      	adds	r2, r7, r2
     3fa:	1c59      	adds	r1, r3, #1
     3fc:	7011      	strb	r1, [r2, #0]
     3fe:	0019      	movs	r1, r3
     400:	230d      	movs	r3, #13
     402:	18fb      	adds	r3, r7, r3
     404:	687a      	ldr	r2, [r7, #4]
     406:	5c52      	ldrb	r2, [r2, r1]
     408:	701a      	strb	r2, [r3, #0]
	} while (rxByte != '\r' && rxByte != '\n' && rxByte != '\0');
     40a:	230d      	movs	r3, #13
     40c:	18fb      	adds	r3, r7, r3
     40e:	781b      	ldrb	r3, [r3, #0]
     410:	2b0d      	cmp	r3, #13
     412:	d00a      	beq.n	42a <_ZN6Serial10readStringEv+0x8e>
     414:	230d      	movs	r3, #13
     416:	18fb      	adds	r3, r7, r3
     418:	781b      	ldrb	r3, [r3, #0]
     41a:	2b0a      	cmp	r3, #10
     41c:	d005      	beq.n	42a <_ZN6Serial10readStringEv+0x8e>
     41e:	230d      	movs	r3, #13
     420:	18fb      	adds	r3, r7, r3
     422:	781b      	ldrb	r3, [r3, #0]
     424:	2b00      	cmp	r3, #0
     426:	d000      	beq.n	42a <_ZN6Serial10readStringEv+0x8e>
	do 
     428:	e7d7      	b.n	3da <_ZN6Serial10readStringEv+0x3e>
	
	return rxBuffer;
     42a:	687b      	ldr	r3, [r7, #4]
	
}
     42c:	0018      	movs	r0, r3
     42e:	46bd      	mov	sp, r7
     430:	b005      	add	sp, #20
     432:	bd90      	pop	{r4, r7, pc}
     434:	00000361 	.word	0x00000361

00000438 <main>:
#include <asf.h>
#include "lib/Serial.h"


int main(void)
{
     438:	b580      	push	{r7, lr}
     43a:	b0ae      	sub	sp, #184	; 0xb8
     43c:	af00      	add	r7, sp, #0
	system_init();
     43e:	4b12      	ldr	r3, [pc, #72]	; (488 <main+0x50>)
     440:	4798      	blx	r3
	delay_init();
     442:	4b12      	ldr	r3, [pc, #72]	; (48c <main+0x54>)
     444:	4798      	blx	r3
	 
    char* myString;
	Serial mySerial;
	mySerial.initialize();
     446:	003b      	movs	r3, r7
     448:	0018      	movs	r0, r3
     44a:	4b11      	ldr	r3, [pc, #68]	; (490 <main+0x58>)
     44c:	4798      	blx	r3
	
	
    while (true) {
		myString = mySerial.readString();
     44e:	003b      	movs	r3, r7
     450:	0018      	movs	r0, r3
     452:	4b10      	ldr	r3, [pc, #64]	; (494 <main+0x5c>)
     454:	4798      	blx	r3
     456:	0003      	movs	r3, r0
     458:	22b4      	movs	r2, #180	; 0xb4
     45a:	18ba      	adds	r2, r7, r2
     45c:	6013      	str	r3, [r2, #0]
		mySerial.writeString("Echo: ", 6);
     45e:	490e      	ldr	r1, [pc, #56]	; (498 <main+0x60>)
     460:	003b      	movs	r3, r7
     462:	2206      	movs	r2, #6
     464:	0018      	movs	r0, r3
     466:	4b0d      	ldr	r3, [pc, #52]	; (49c <main+0x64>)
     468:	4798      	blx	r3
		mySerial.writeString(myString, 20);
     46a:	23b4      	movs	r3, #180	; 0xb4
     46c:	18fb      	adds	r3, r7, r3
     46e:	6819      	ldr	r1, [r3, #0]
     470:	003b      	movs	r3, r7
     472:	2214      	movs	r2, #20
     474:	0018      	movs	r0, r3
     476:	4b09      	ldr	r3, [pc, #36]	; (49c <main+0x64>)
     478:	4798      	blx	r3
		mySerial.writeString("\n", 1);
     47a:	4909      	ldr	r1, [pc, #36]	; (4a0 <main+0x68>)
     47c:	003b      	movs	r3, r7
     47e:	2201      	movs	r2, #1
     480:	0018      	movs	r0, r3
     482:	4b06      	ldr	r3, [pc, #24]	; (49c <main+0x64>)
     484:	4798      	blx	r3
		myString = mySerial.readString();
     486:	e7e2      	b.n	44e <main+0x16>
     488:	000023bd 	.word	0x000023bd
     48c:	00001815 	.word	0x00001815
     490:	0000028d 	.word	0x0000028d
     494:	0000039d 	.word	0x0000039d
     498:	000027fc 	.word	0x000027fc
     49c:	00000321 	.word	0x00000321
     4a0:	00002804 	.word	0x00002804

000004a4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     4a4:	b580      	push	{r7, lr}
     4a6:	b082      	sub	sp, #8
     4a8:	af00      	add	r7, sp, #0
     4aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     4ac:	687b      	ldr	r3, [r7, #4]
     4ae:	2200      	movs	r2, #0
     4b0:	701a      	strb	r2, [r3, #0]
}
     4b2:	46c0      	nop			; (mov r8, r8)
     4b4:	46bd      	mov	sp, r7
     4b6:	b002      	add	sp, #8
     4b8:	bd80      	pop	{r7, pc}

000004ba <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     4ba:	b5f0      	push	{r4, r5, r6, r7, lr}
     4bc:	b08d      	sub	sp, #52	; 0x34
     4be:	af00      	add	r7, sp, #0
     4c0:	60b8      	str	r0, [r7, #8]
     4c2:	60f9      	str	r1, [r7, #12]
     4c4:	603a      	str	r2, [r7, #0]
     4c6:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     4c8:	2300      	movs	r3, #0
     4ca:	2400      	movs	r4, #0
     4cc:	623b      	str	r3, [r7, #32]
     4ce:	627c      	str	r4, [r7, #36]	; 0x24
     4d0:	2300      	movs	r3, #0
     4d2:	2400      	movs	r4, #0
     4d4:	61bb      	str	r3, [r7, #24]
     4d6:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
     4d8:	233f      	movs	r3, #63	; 0x3f
     4da:	62fb      	str	r3, [r7, #44]	; 0x2c
     4dc:	e053      	b.n	586 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
     4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     4e0:	3b20      	subs	r3, #32
     4e2:	2b00      	cmp	r3, #0
     4e4:	db04      	blt.n	4f0 <long_division+0x36>
     4e6:	2201      	movs	r2, #1
     4e8:	409a      	lsls	r2, r3
     4ea:	0013      	movs	r3, r2
     4ec:	617b      	str	r3, [r7, #20]
     4ee:	e00b      	b.n	508 <long_division+0x4e>
     4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     4f2:	2220      	movs	r2, #32
     4f4:	1ad3      	subs	r3, r2, r3
     4f6:	2201      	movs	r2, #1
     4f8:	40da      	lsrs	r2, r3
     4fa:	0013      	movs	r3, r2
     4fc:	2100      	movs	r1, #0
     4fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     500:	4091      	lsls	r1, r2
     502:	000a      	movs	r2, r1
     504:	4313      	orrs	r3, r2
     506:	617b      	str	r3, [r7, #20]
     508:	2201      	movs	r2, #1
     50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     50c:	409a      	lsls	r2, r3
     50e:	0013      	movs	r3, r2
     510:	613b      	str	r3, [r7, #16]

		r = r << 1;
     512:	69bb      	ldr	r3, [r7, #24]
     514:	69fc      	ldr	r4, [r7, #28]
     516:	18db      	adds	r3, r3, r3
     518:	4164      	adcs	r4, r4
     51a:	61bb      	str	r3, [r7, #24]
     51c:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
     51e:	68bb      	ldr	r3, [r7, #8]
     520:	693a      	ldr	r2, [r7, #16]
     522:	401a      	ands	r2, r3
     524:	0015      	movs	r5, r2
     526:	68fb      	ldr	r3, [r7, #12]
     528:	697a      	ldr	r2, [r7, #20]
     52a:	401a      	ands	r2, r3
     52c:	0016      	movs	r6, r2
     52e:	002b      	movs	r3, r5
     530:	4333      	orrs	r3, r6
     532:	d007      	beq.n	544 <long_division+0x8a>
			r |= 0x01;
     534:	69bb      	ldr	r3, [r7, #24]
     536:	2201      	movs	r2, #1
     538:	4313      	orrs	r3, r2
     53a:	61bb      	str	r3, [r7, #24]
     53c:	69fb      	ldr	r3, [r7, #28]
     53e:	2200      	movs	r2, #0
     540:	4313      	orrs	r3, r2
     542:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
     544:	687a      	ldr	r2, [r7, #4]
     546:	69fb      	ldr	r3, [r7, #28]
     548:	429a      	cmp	r2, r3
     54a:	d819      	bhi.n	580 <long_division+0xc6>
     54c:	687a      	ldr	r2, [r7, #4]
     54e:	69fb      	ldr	r3, [r7, #28]
     550:	429a      	cmp	r2, r3
     552:	d103      	bne.n	55c <long_division+0xa2>
     554:	683a      	ldr	r2, [r7, #0]
     556:	69bb      	ldr	r3, [r7, #24]
     558:	429a      	cmp	r2, r3
     55a:	d811      	bhi.n	580 <long_division+0xc6>
			r = r - d;
     55c:	69b9      	ldr	r1, [r7, #24]
     55e:	69fa      	ldr	r2, [r7, #28]
     560:	683b      	ldr	r3, [r7, #0]
     562:	687c      	ldr	r4, [r7, #4]
     564:	1ac9      	subs	r1, r1, r3
     566:	41a2      	sbcs	r2, r4
     568:	000b      	movs	r3, r1
     56a:	0014      	movs	r4, r2
     56c:	61bb      	str	r3, [r7, #24]
     56e:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
     570:	6a3a      	ldr	r2, [r7, #32]
     572:	693b      	ldr	r3, [r7, #16]
     574:	4313      	orrs	r3, r2
     576:	623b      	str	r3, [r7, #32]
     578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     57a:	697b      	ldr	r3, [r7, #20]
     57c:	4313      	orrs	r3, r2
     57e:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
     580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     582:	3b01      	subs	r3, #1
     584:	62fb      	str	r3, [r7, #44]	; 0x2c
     586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     588:	2b00      	cmp	r3, #0
     58a:	daa8      	bge.n	4de <long_division+0x24>
		}
	}

	return q;
     58c:	6a3b      	ldr	r3, [r7, #32]
     58e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
     590:	0018      	movs	r0, r3
     592:	0021      	movs	r1, r4
     594:	46bd      	mov	sp, r7
     596:	b00d      	add	sp, #52	; 0x34
     598:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000059a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     59a:	b580      	push	{r7, lr}
     59c:	b086      	sub	sp, #24
     59e:	af00      	add	r7, sp, #0
     5a0:	60f8      	str	r0, [r7, #12]
     5a2:	60b9      	str	r1, [r7, #8]
     5a4:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     5a6:	2316      	movs	r3, #22
     5a8:	18fb      	adds	r3, r7, r3
     5aa:	2200      	movs	r2, #0
     5ac:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     5ae:	68bb      	ldr	r3, [r7, #8]
     5b0:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     5b2:	68bb      	ldr	r3, [r7, #8]
     5b4:	085a      	lsrs	r2, r3, #1
     5b6:	68fb      	ldr	r3, [r7, #12]
     5b8:	429a      	cmp	r2, r3
     5ba:	d201      	bcs.n	5c0 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5bc:	2340      	movs	r3, #64	; 0x40
     5be:	e026      	b.n	60e <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     5c0:	68bb      	ldr	r3, [r7, #8]
     5c2:	085b      	lsrs	r3, r3, #1
     5c4:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     5c6:	e00a      	b.n	5de <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     5c8:	693a      	ldr	r2, [r7, #16]
     5ca:	68fb      	ldr	r3, [r7, #12]
     5cc:	1ad3      	subs	r3, r2, r3
     5ce:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     5d0:	2316      	movs	r3, #22
     5d2:	18fb      	adds	r3, r7, r3
     5d4:	881a      	ldrh	r2, [r3, #0]
     5d6:	2316      	movs	r3, #22
     5d8:	18fb      	adds	r3, r7, r3
     5da:	3201      	adds	r2, #1
     5dc:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
     5de:	693a      	ldr	r2, [r7, #16]
     5e0:	68fb      	ldr	r3, [r7, #12]
     5e2:	429a      	cmp	r2, r3
     5e4:	d2f0      	bcs.n	5c8 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
     5e6:	2316      	movs	r3, #22
     5e8:	18fb      	adds	r3, r7, r3
     5ea:	2216      	movs	r2, #22
     5ec:	18ba      	adds	r2, r7, r2
     5ee:	8812      	ldrh	r2, [r2, #0]
     5f0:	3a01      	subs	r2, #1
     5f2:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     5f4:	2316      	movs	r3, #22
     5f6:	18fb      	adds	r3, r7, r3
     5f8:	881b      	ldrh	r3, [r3, #0]
     5fa:	2bff      	cmp	r3, #255	; 0xff
     5fc:	d901      	bls.n	602 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5fe:	2340      	movs	r3, #64	; 0x40
     600:	e005      	b.n	60e <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     602:	687b      	ldr	r3, [r7, #4]
     604:	2216      	movs	r2, #22
     606:	18ba      	adds	r2, r7, r2
     608:	8812      	ldrh	r2, [r2, #0]
     60a:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     60c:	2300      	movs	r3, #0
	}
}
     60e:	0018      	movs	r0, r3
     610:	46bd      	mov	sp, r7
     612:	b006      	add	sp, #24
     614:	bd80      	pop	{r7, pc}
	...

00000618 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     618:	b5f0      	push	{r4, r5, r6, r7, lr}
     61a:	b0a1      	sub	sp, #132	; 0x84
     61c:	af00      	add	r7, sp, #0
     61e:	64f8      	str	r0, [r7, #76]	; 0x4c
     620:	64b9      	str	r1, [r7, #72]	; 0x48
     622:	647a      	str	r2, [r7, #68]	; 0x44
     624:	2243      	movs	r2, #67	; 0x43
     626:	18ba      	adds	r2, r7, r2
     628:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     62a:	2300      	movs	r3, #0
     62c:	2400      	movs	r4, #0
     62e:	673b      	str	r3, [r7, #112]	; 0x70
     630:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
     632:	2300      	movs	r3, #0
     634:	2400      	movs	r4, #0
     636:	66bb      	str	r3, [r7, #104]	; 0x68
     638:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
     63a:	2300      	movs	r3, #0
     63c:	2400      	movs	r4, #0
     63e:	67bb      	str	r3, [r7, #120]	; 0x78
     640:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     642:	2300      	movs	r3, #0
     644:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     646:	2358      	movs	r3, #88	; 0x58
     648:	2240      	movs	r2, #64	; 0x40
     64a:	4694      	mov	ip, r2
     64c:	44bc      	add	ip, r7
     64e:	4463      	add	r3, ip
     650:	781a      	ldrb	r2, [r3, #0]
     652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     654:	435a      	muls	r2, r3
     656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     658:	429a      	cmp	r2, r3
     65a:	d901      	bls.n	660 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     65c:	2340      	movs	r3, #64	; 0x40
     65e:	e0b3      	b.n	7c8 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     660:	2343      	movs	r3, #67	; 0x43
     662:	18fb      	adds	r3, r7, r3
     664:	781b      	ldrb	r3, [r3, #0]
     666:	2b00      	cmp	r3, #0
     668:	d13d      	bne.n	6e6 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     66a:	2358      	movs	r3, #88	; 0x58
     66c:	2240      	movs	r2, #64	; 0x40
     66e:	4694      	mov	ip, r2
     670:	44bc      	add	ip, r7
     672:	4463      	add	r3, ip
     674:	781b      	ldrb	r3, [r3, #0]
     676:	b2db      	uxtb	r3, r3
     678:	613b      	str	r3, [r7, #16]
     67a:	2300      	movs	r3, #0
     67c:	617b      	str	r3, [r7, #20]
     67e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     680:	60bb      	str	r3, [r7, #8]
     682:	2300      	movs	r3, #0
     684:	60fb      	str	r3, [r7, #12]
     686:	4c52      	ldr	r4, [pc, #328]	; (7d0 <_sercom_get_async_baud_val+0x1b8>)
     688:	68ba      	ldr	r2, [r7, #8]
     68a:	68fb      	ldr	r3, [r7, #12]
     68c:	6938      	ldr	r0, [r7, #16]
     68e:	6979      	ldr	r1, [r7, #20]
     690:	47a0      	blx	r4
     692:	0003      	movs	r3, r0
     694:	000c      	movs	r4, r1
     696:	001b      	movs	r3, r3
     698:	65fb      	str	r3, [r7, #92]	; 0x5c
     69a:	2300      	movs	r3, #0
     69c:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
     69e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     6a0:	603b      	str	r3, [r7, #0]
     6a2:	2300      	movs	r3, #0
     6a4:	607b      	str	r3, [r7, #4]
     6a6:	6db8      	ldr	r0, [r7, #88]	; 0x58
     6a8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
     6aa:	683a      	ldr	r2, [r7, #0]
     6ac:	687b      	ldr	r3, [r7, #4]
     6ae:	4c49      	ldr	r4, [pc, #292]	; (7d4 <_sercom_get_async_baud_val+0x1bc>)
     6b0:	47a0      	blx	r4
     6b2:	0003      	movs	r3, r0
     6b4:	000c      	movs	r4, r1
     6b6:	673b      	str	r3, [r7, #112]	; 0x70
     6b8:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
     6ba:	2100      	movs	r1, #0
     6bc:	2201      	movs	r2, #1
     6be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     6c0:	6f7c      	ldr	r4, [r7, #116]	; 0x74
     6c2:	1ac9      	subs	r1, r1, r3
     6c4:	41a2      	sbcs	r2, r4
     6c6:	000b      	movs	r3, r1
     6c8:	0014      	movs	r4, r2
     6ca:	66bb      	str	r3, [r7, #104]	; 0x68
     6cc:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
     6ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     6d0:	0c1b      	lsrs	r3, r3, #16
     6d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     6d4:	0416      	lsls	r6, r2, #16
     6d6:	431e      	orrs	r6, r3
     6d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     6da:	041d      	lsls	r5, r3, #16
     6dc:	0033      	movs	r3, r6
     6de:	67bb      	str	r3, [r7, #120]	; 0x78
     6e0:	2300      	movs	r3, #0
     6e2:	67fb      	str	r3, [r7, #124]	; 0x7c
     6e4:	e06a      	b.n	7bc <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     6e6:	2343      	movs	r3, #67	; 0x43
     6e8:	18fb      	adds	r3, r7, r3
     6ea:	781b      	ldrb	r3, [r3, #0]
     6ec:	2b01      	cmp	r3, #1
     6ee:	d165      	bne.n	7bc <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
     6f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     6f2:	633b      	str	r3, [r7, #48]	; 0x30
     6f4:	2300      	movs	r3, #0
     6f6:	637b      	str	r3, [r7, #52]	; 0x34
     6f8:	2358      	movs	r3, #88	; 0x58
     6fa:	2240      	movs	r2, #64	; 0x40
     6fc:	4694      	mov	ip, r2
     6fe:	44bc      	add	ip, r7
     700:	4463      	add	r3, ip
     702:	781b      	ldrb	r3, [r3, #0]
     704:	b2db      	uxtb	r3, r3
     706:	62bb      	str	r3, [r7, #40]	; 0x28
     708:	2300      	movs	r3, #0
     70a:	62fb      	str	r3, [r7, #44]	; 0x2c
     70c:	4c30      	ldr	r4, [pc, #192]	; (7d0 <_sercom_get_async_baud_val+0x1b8>)
     70e:	6aba      	ldr	r2, [r7, #40]	; 0x28
     710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     712:	6b38      	ldr	r0, [r7, #48]	; 0x30
     714:	6b79      	ldr	r1, [r7, #52]	; 0x34
     716:	47a0      	blx	r4
     718:	0003      	movs	r3, r0
     71a:	000c      	movs	r4, r1
     71c:	65bb      	str	r3, [r7, #88]	; 0x58
     71e:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
     720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     722:	623b      	str	r3, [r7, #32]
     724:	2300      	movs	r3, #0
     726:	627b      	str	r3, [r7, #36]	; 0x24
     728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     72a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     72c:	001a      	movs	r2, r3
     72e:	0023      	movs	r3, r4
     730:	6a38      	ldr	r0, [r7, #32]
     732:	6a79      	ldr	r1, [r7, #36]	; 0x24
     734:	4c27      	ldr	r4, [pc, #156]	; (7d4 <_sercom_get_async_baud_val+0x1bc>)
     736:	47a0      	blx	r4
     738:	0003      	movs	r3, r0
     73a:	000c      	movs	r4, r1
     73c:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
     73e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
     740:	2380      	movs	r3, #128	; 0x80
     742:	019b      	lsls	r3, r3, #6
     744:	429a      	cmp	r2, r3
     746:	d901      	bls.n	74c <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     748:	2340      	movs	r3, #64	; 0x40
     74a:	e03d      	b.n	7c8 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     74c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     74e:	61bb      	str	r3, [r7, #24]
     750:	2300      	movs	r3, #0
     752:	61fb      	str	r3, [r7, #28]
     754:	69b9      	ldr	r1, [r7, #24]
     756:	69fa      	ldr	r2, [r7, #28]
     758:	000b      	movs	r3, r1
     75a:	0f5b      	lsrs	r3, r3, #29
     75c:	0010      	movs	r0, r2
     75e:	00c0      	lsls	r0, r0, #3
     760:	63f8      	str	r0, [r7, #60]	; 0x3c
     762:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     764:	4318      	orrs	r0, r3
     766:	63f8      	str	r0, [r7, #60]	; 0x3c
     768:	000b      	movs	r3, r1
     76a:	00db      	lsls	r3, r3, #3
     76c:	63bb      	str	r3, [r7, #56]	; 0x38
     76e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     770:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     772:	001a      	movs	r2, r3
     774:	0023      	movs	r3, r4
     776:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     778:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
     77a:	4c16      	ldr	r4, [pc, #88]	; (7d4 <_sercom_get_async_baud_val+0x1bc>)
     77c:	47a0      	blx	r4
     77e:	0003      	movs	r3, r0
     780:	000c      	movs	r4, r1
     782:	65bb      	str	r3, [r7, #88]	; 0x58
     784:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
     786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     788:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     78a:	b2d9      	uxtb	r1, r3
     78c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     78e:	b2db      	uxtb	r3, r3
     790:	00db      	lsls	r3, r3, #3
     792:	b2da      	uxtb	r2, r3
     794:	2317      	movs	r3, #23
     796:	2040      	movs	r0, #64	; 0x40
     798:	4684      	mov	ip, r0
     79a:	44bc      	add	ip, r7
     79c:	4463      	add	r3, ip
     79e:	1a8a      	subs	r2, r1, r2
     7a0:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
     7a2:	2317      	movs	r3, #23
     7a4:	2240      	movs	r2, #64	; 0x40
     7a6:	4694      	mov	ip, r2
     7a8:	44bc      	add	ip, r7
     7aa:	4463      	add	r3, ip
     7ac:	781b      	ldrb	r3, [r3, #0]
     7ae:	035b      	lsls	r3, r3, #13
     7b0:	001a      	movs	r2, r3
     7b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     7b4:	4313      	orrs	r3, r2
     7b6:	67bb      	str	r3, [r7, #120]	; 0x78
     7b8:	2300      	movs	r3, #0
     7ba:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
     7bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     7be:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
     7c0:	b29a      	uxth	r2, r3
     7c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     7c4:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     7c6:	2300      	movs	r3, #0
}
     7c8:	0018      	movs	r0, r3
     7ca:	46bd      	mov	sp, r7
     7cc:	b021      	add	sp, #132	; 0x84
     7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7d0:	00002609 	.word	0x00002609
     7d4:	000004bb 	.word	0x000004bb

000007d8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     7d8:	b580      	push	{r7, lr}
     7da:	b084      	sub	sp, #16
     7dc:	af00      	add	r7, sp, #0
     7de:	0002      	movs	r2, r0
     7e0:	1dfb      	adds	r3, r7, #7
     7e2:	701a      	strb	r2, [r3, #0]
     7e4:	1dbb      	adds	r3, r7, #6
     7e6:	1c0a      	adds	r2, r1, #0
     7e8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     7ea:	4b1a      	ldr	r3, [pc, #104]	; (854 <sercom_set_gclk_generator+0x7c>)
     7ec:	781b      	ldrb	r3, [r3, #0]
     7ee:	2201      	movs	r2, #1
     7f0:	4053      	eors	r3, r2
     7f2:	b2db      	uxtb	r3, r3
     7f4:	2b00      	cmp	r3, #0
     7f6:	d103      	bne.n	800 <sercom_set_gclk_generator+0x28>
     7f8:	1dbb      	adds	r3, r7, #6
     7fa:	781b      	ldrb	r3, [r3, #0]
     7fc:	2b00      	cmp	r3, #0
     7fe:	d01b      	beq.n	838 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     800:	230c      	movs	r3, #12
     802:	18fb      	adds	r3, r7, r3
     804:	0018      	movs	r0, r3
     806:	4b14      	ldr	r3, [pc, #80]	; (858 <sercom_set_gclk_generator+0x80>)
     808:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     80a:	230c      	movs	r3, #12
     80c:	18fb      	adds	r3, r7, r3
     80e:	1dfa      	adds	r2, r7, #7
     810:	7812      	ldrb	r2, [r2, #0]
     812:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     814:	230c      	movs	r3, #12
     816:	18fb      	adds	r3, r7, r3
     818:	0019      	movs	r1, r3
     81a:	2013      	movs	r0, #19
     81c:	4b0f      	ldr	r3, [pc, #60]	; (85c <sercom_set_gclk_generator+0x84>)
     81e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     820:	2013      	movs	r0, #19
     822:	4b0f      	ldr	r3, [pc, #60]	; (860 <sercom_set_gclk_generator+0x88>)
     824:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     826:	4b0b      	ldr	r3, [pc, #44]	; (854 <sercom_set_gclk_generator+0x7c>)
     828:	1dfa      	adds	r2, r7, #7
     82a:	7812      	ldrb	r2, [r2, #0]
     82c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     82e:	4b09      	ldr	r3, [pc, #36]	; (854 <sercom_set_gclk_generator+0x7c>)
     830:	2201      	movs	r2, #1
     832:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     834:	2300      	movs	r3, #0
     836:	e008      	b.n	84a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     838:	4b06      	ldr	r3, [pc, #24]	; (854 <sercom_set_gclk_generator+0x7c>)
     83a:	785b      	ldrb	r3, [r3, #1]
     83c:	1dfa      	adds	r2, r7, #7
     83e:	7812      	ldrb	r2, [r2, #0]
     840:	429a      	cmp	r2, r3
     842:	d101      	bne.n	848 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     844:	2300      	movs	r3, #0
     846:	e000      	b.n	84a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     848:	231d      	movs	r3, #29
}
     84a:	0018      	movs	r0, r3
     84c:	46bd      	mov	sp, r7
     84e:	b004      	add	sp, #16
     850:	bd80      	pop	{r7, pc}
     852:	46c0      	nop			; (mov r8, r8)
     854:	20000458 	.word	0x20000458
     858:	000004a5 	.word	0x000004a5
     85c:	0000207d 	.word	0x0000207d
     860:	000020c1 	.word	0x000020c1

00000864 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     864:	b580      	push	{r7, lr}
     866:	b082      	sub	sp, #8
     868:	af00      	add	r7, sp, #0
     86a:	6078      	str	r0, [r7, #4]
     86c:	000a      	movs	r2, r1
     86e:	1cfb      	adds	r3, r7, #3
     870:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     872:	687b      	ldr	r3, [r7, #4]
     874:	4a4d      	ldr	r2, [pc, #308]	; (9ac <_sercom_get_default_pad+0x148>)
     876:	4293      	cmp	r3, r2
     878:	d03f      	beq.n	8fa <_sercom_get_default_pad+0x96>
     87a:	4a4c      	ldr	r2, [pc, #304]	; (9ac <_sercom_get_default_pad+0x148>)
     87c:	4293      	cmp	r3, r2
     87e:	d806      	bhi.n	88e <_sercom_get_default_pad+0x2a>
     880:	4a4b      	ldr	r2, [pc, #300]	; (9b0 <_sercom_get_default_pad+0x14c>)
     882:	4293      	cmp	r3, r2
     884:	d00f      	beq.n	8a6 <_sercom_get_default_pad+0x42>
     886:	4a4b      	ldr	r2, [pc, #300]	; (9b4 <_sercom_get_default_pad+0x150>)
     888:	4293      	cmp	r3, r2
     88a:	d021      	beq.n	8d0 <_sercom_get_default_pad+0x6c>
     88c:	e089      	b.n	9a2 <_sercom_get_default_pad+0x13e>
     88e:	4a4a      	ldr	r2, [pc, #296]	; (9b8 <_sercom_get_default_pad+0x154>)
     890:	4293      	cmp	r3, r2
     892:	d100      	bne.n	896 <_sercom_get_default_pad+0x32>
     894:	e05b      	b.n	94e <_sercom_get_default_pad+0xea>
     896:	4a49      	ldr	r2, [pc, #292]	; (9bc <_sercom_get_default_pad+0x158>)
     898:	4293      	cmp	r3, r2
     89a:	d100      	bne.n	89e <_sercom_get_default_pad+0x3a>
     89c:	e06c      	b.n	978 <_sercom_get_default_pad+0x114>
     89e:	4a48      	ldr	r2, [pc, #288]	; (9c0 <_sercom_get_default_pad+0x15c>)
     8a0:	4293      	cmp	r3, r2
     8a2:	d03f      	beq.n	924 <_sercom_get_default_pad+0xc0>
     8a4:	e07d      	b.n	9a2 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8a6:	1cfb      	adds	r3, r7, #3
     8a8:	781b      	ldrb	r3, [r3, #0]
     8aa:	2b01      	cmp	r3, #1
     8ac:	d00a      	beq.n	8c4 <_sercom_get_default_pad+0x60>
     8ae:	dc02      	bgt.n	8b6 <_sercom_get_default_pad+0x52>
     8b0:	2b00      	cmp	r3, #0
     8b2:	d005      	beq.n	8c0 <_sercom_get_default_pad+0x5c>
     8b4:	e075      	b.n	9a2 <_sercom_get_default_pad+0x13e>
     8b6:	2b02      	cmp	r3, #2
     8b8:	d006      	beq.n	8c8 <_sercom_get_default_pad+0x64>
     8ba:	2b03      	cmp	r3, #3
     8bc:	d006      	beq.n	8cc <_sercom_get_default_pad+0x68>
     8be:	e070      	b.n	9a2 <_sercom_get_default_pad+0x13e>
     8c0:	4b40      	ldr	r3, [pc, #256]	; (9c4 <_sercom_get_default_pad+0x160>)
     8c2:	e06f      	b.n	9a4 <_sercom_get_default_pad+0x140>
     8c4:	4b40      	ldr	r3, [pc, #256]	; (9c8 <_sercom_get_default_pad+0x164>)
     8c6:	e06d      	b.n	9a4 <_sercom_get_default_pad+0x140>
     8c8:	4b40      	ldr	r3, [pc, #256]	; (9cc <_sercom_get_default_pad+0x168>)
     8ca:	e06b      	b.n	9a4 <_sercom_get_default_pad+0x140>
     8cc:	4b40      	ldr	r3, [pc, #256]	; (9d0 <_sercom_get_default_pad+0x16c>)
     8ce:	e069      	b.n	9a4 <_sercom_get_default_pad+0x140>
     8d0:	1cfb      	adds	r3, r7, #3
     8d2:	781b      	ldrb	r3, [r3, #0]
     8d4:	2b01      	cmp	r3, #1
     8d6:	d00a      	beq.n	8ee <_sercom_get_default_pad+0x8a>
     8d8:	dc02      	bgt.n	8e0 <_sercom_get_default_pad+0x7c>
     8da:	2b00      	cmp	r3, #0
     8dc:	d005      	beq.n	8ea <_sercom_get_default_pad+0x86>
     8de:	e060      	b.n	9a2 <_sercom_get_default_pad+0x13e>
     8e0:	2b02      	cmp	r3, #2
     8e2:	d006      	beq.n	8f2 <_sercom_get_default_pad+0x8e>
     8e4:	2b03      	cmp	r3, #3
     8e6:	d006      	beq.n	8f6 <_sercom_get_default_pad+0x92>
     8e8:	e05b      	b.n	9a2 <_sercom_get_default_pad+0x13e>
     8ea:	2303      	movs	r3, #3
     8ec:	e05a      	b.n	9a4 <_sercom_get_default_pad+0x140>
     8ee:	4b39      	ldr	r3, [pc, #228]	; (9d4 <_sercom_get_default_pad+0x170>)
     8f0:	e058      	b.n	9a4 <_sercom_get_default_pad+0x140>
     8f2:	4b39      	ldr	r3, [pc, #228]	; (9d8 <_sercom_get_default_pad+0x174>)
     8f4:	e056      	b.n	9a4 <_sercom_get_default_pad+0x140>
     8f6:	4b39      	ldr	r3, [pc, #228]	; (9dc <_sercom_get_default_pad+0x178>)
     8f8:	e054      	b.n	9a4 <_sercom_get_default_pad+0x140>
     8fa:	1cfb      	adds	r3, r7, #3
     8fc:	781b      	ldrb	r3, [r3, #0]
     8fe:	2b01      	cmp	r3, #1
     900:	d00a      	beq.n	918 <_sercom_get_default_pad+0xb4>
     902:	dc02      	bgt.n	90a <_sercom_get_default_pad+0xa6>
     904:	2b00      	cmp	r3, #0
     906:	d005      	beq.n	914 <_sercom_get_default_pad+0xb0>
     908:	e04b      	b.n	9a2 <_sercom_get_default_pad+0x13e>
     90a:	2b02      	cmp	r3, #2
     90c:	d006      	beq.n	91c <_sercom_get_default_pad+0xb8>
     90e:	2b03      	cmp	r3, #3
     910:	d006      	beq.n	920 <_sercom_get_default_pad+0xbc>
     912:	e046      	b.n	9a2 <_sercom_get_default_pad+0x13e>
     914:	4b32      	ldr	r3, [pc, #200]	; (9e0 <_sercom_get_default_pad+0x17c>)
     916:	e045      	b.n	9a4 <_sercom_get_default_pad+0x140>
     918:	4b32      	ldr	r3, [pc, #200]	; (9e4 <_sercom_get_default_pad+0x180>)
     91a:	e043      	b.n	9a4 <_sercom_get_default_pad+0x140>
     91c:	4b32      	ldr	r3, [pc, #200]	; (9e8 <_sercom_get_default_pad+0x184>)
     91e:	e041      	b.n	9a4 <_sercom_get_default_pad+0x140>
     920:	4b32      	ldr	r3, [pc, #200]	; (9ec <_sercom_get_default_pad+0x188>)
     922:	e03f      	b.n	9a4 <_sercom_get_default_pad+0x140>
     924:	1cfb      	adds	r3, r7, #3
     926:	781b      	ldrb	r3, [r3, #0]
     928:	2b01      	cmp	r3, #1
     92a:	d00a      	beq.n	942 <_sercom_get_default_pad+0xde>
     92c:	dc02      	bgt.n	934 <_sercom_get_default_pad+0xd0>
     92e:	2b00      	cmp	r3, #0
     930:	d005      	beq.n	93e <_sercom_get_default_pad+0xda>
     932:	e036      	b.n	9a2 <_sercom_get_default_pad+0x13e>
     934:	2b02      	cmp	r3, #2
     936:	d006      	beq.n	946 <_sercom_get_default_pad+0xe2>
     938:	2b03      	cmp	r3, #3
     93a:	d006      	beq.n	94a <_sercom_get_default_pad+0xe6>
     93c:	e031      	b.n	9a2 <_sercom_get_default_pad+0x13e>
     93e:	4b2c      	ldr	r3, [pc, #176]	; (9f0 <_sercom_get_default_pad+0x18c>)
     940:	e030      	b.n	9a4 <_sercom_get_default_pad+0x140>
     942:	4b2c      	ldr	r3, [pc, #176]	; (9f4 <_sercom_get_default_pad+0x190>)
     944:	e02e      	b.n	9a4 <_sercom_get_default_pad+0x140>
     946:	4b2c      	ldr	r3, [pc, #176]	; (9f8 <_sercom_get_default_pad+0x194>)
     948:	e02c      	b.n	9a4 <_sercom_get_default_pad+0x140>
     94a:	4b2c      	ldr	r3, [pc, #176]	; (9fc <_sercom_get_default_pad+0x198>)
     94c:	e02a      	b.n	9a4 <_sercom_get_default_pad+0x140>
     94e:	1cfb      	adds	r3, r7, #3
     950:	781b      	ldrb	r3, [r3, #0]
     952:	2b01      	cmp	r3, #1
     954:	d00a      	beq.n	96c <_sercom_get_default_pad+0x108>
     956:	dc02      	bgt.n	95e <_sercom_get_default_pad+0xfa>
     958:	2b00      	cmp	r3, #0
     95a:	d005      	beq.n	968 <_sercom_get_default_pad+0x104>
     95c:	e021      	b.n	9a2 <_sercom_get_default_pad+0x13e>
     95e:	2b02      	cmp	r3, #2
     960:	d006      	beq.n	970 <_sercom_get_default_pad+0x10c>
     962:	2b03      	cmp	r3, #3
     964:	d006      	beq.n	974 <_sercom_get_default_pad+0x110>
     966:	e01c      	b.n	9a2 <_sercom_get_default_pad+0x13e>
     968:	4b25      	ldr	r3, [pc, #148]	; (a00 <_sercom_get_default_pad+0x19c>)
     96a:	e01b      	b.n	9a4 <_sercom_get_default_pad+0x140>
     96c:	4b25      	ldr	r3, [pc, #148]	; (a04 <_sercom_get_default_pad+0x1a0>)
     96e:	e019      	b.n	9a4 <_sercom_get_default_pad+0x140>
     970:	4b25      	ldr	r3, [pc, #148]	; (a08 <_sercom_get_default_pad+0x1a4>)
     972:	e017      	b.n	9a4 <_sercom_get_default_pad+0x140>
     974:	4b25      	ldr	r3, [pc, #148]	; (a0c <_sercom_get_default_pad+0x1a8>)
     976:	e015      	b.n	9a4 <_sercom_get_default_pad+0x140>
     978:	1cfb      	adds	r3, r7, #3
     97a:	781b      	ldrb	r3, [r3, #0]
     97c:	2b01      	cmp	r3, #1
     97e:	d00a      	beq.n	996 <_sercom_get_default_pad+0x132>
     980:	dc02      	bgt.n	988 <_sercom_get_default_pad+0x124>
     982:	2b00      	cmp	r3, #0
     984:	d005      	beq.n	992 <_sercom_get_default_pad+0x12e>
     986:	e00c      	b.n	9a2 <_sercom_get_default_pad+0x13e>
     988:	2b02      	cmp	r3, #2
     98a:	d006      	beq.n	99a <_sercom_get_default_pad+0x136>
     98c:	2b03      	cmp	r3, #3
     98e:	d006      	beq.n	99e <_sercom_get_default_pad+0x13a>
     990:	e007      	b.n	9a2 <_sercom_get_default_pad+0x13e>
     992:	4b1f      	ldr	r3, [pc, #124]	; (a10 <_sercom_get_default_pad+0x1ac>)
     994:	e006      	b.n	9a4 <_sercom_get_default_pad+0x140>
     996:	4b1f      	ldr	r3, [pc, #124]	; (a14 <_sercom_get_default_pad+0x1b0>)
     998:	e004      	b.n	9a4 <_sercom_get_default_pad+0x140>
     99a:	4b1f      	ldr	r3, [pc, #124]	; (a18 <_sercom_get_default_pad+0x1b4>)
     99c:	e002      	b.n	9a4 <_sercom_get_default_pad+0x140>
     99e:	4b1f      	ldr	r3, [pc, #124]	; (a1c <_sercom_get_default_pad+0x1b8>)
     9a0:	e000      	b.n	9a4 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     9a2:	2300      	movs	r3, #0
}
     9a4:	0018      	movs	r0, r3
     9a6:	46bd      	mov	sp, r7
     9a8:	b002      	add	sp, #8
     9aa:	bd80      	pop	{r7, pc}
     9ac:	42001000 	.word	0x42001000
     9b0:	42000800 	.word	0x42000800
     9b4:	42000c00 	.word	0x42000c00
     9b8:	42001800 	.word	0x42001800
     9bc:	42001c00 	.word	0x42001c00
     9c0:	42001400 	.word	0x42001400
     9c4:	00040003 	.word	0x00040003
     9c8:	00050003 	.word	0x00050003
     9cc:	00060003 	.word	0x00060003
     9d0:	00070003 	.word	0x00070003
     9d4:	00010003 	.word	0x00010003
     9d8:	001e0003 	.word	0x001e0003
     9dc:	001f0003 	.word	0x001f0003
     9e0:	00080003 	.word	0x00080003
     9e4:	00090003 	.word	0x00090003
     9e8:	000a0003 	.word	0x000a0003
     9ec:	000b0003 	.word	0x000b0003
     9f0:	00100003 	.word	0x00100003
     9f4:	00110003 	.word	0x00110003
     9f8:	00120003 	.word	0x00120003
     9fc:	00130003 	.word	0x00130003
     a00:	000c0003 	.word	0x000c0003
     a04:	000d0003 	.word	0x000d0003
     a08:	000e0003 	.word	0x000e0003
     a0c:	000f0003 	.word	0x000f0003
     a10:	00160003 	.word	0x00160003
     a14:	00170003 	.word	0x00170003
     a18:	00180003 	.word	0x00180003
     a1c:	00190003 	.word	0x00190003

00000a20 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a20:	b590      	push	{r4, r7, lr}
     a22:	b08b      	sub	sp, #44	; 0x2c
     a24:	af00      	add	r7, sp, #0
     a26:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a28:	230c      	movs	r3, #12
     a2a:	18fb      	adds	r3, r7, r3
     a2c:	4a0f      	ldr	r2, [pc, #60]	; (a6c <_sercom_get_sercom_inst_index+0x4c>)
     a2e:	ca13      	ldmia	r2!, {r0, r1, r4}
     a30:	c313      	stmia	r3!, {r0, r1, r4}
     a32:	ca13      	ldmia	r2!, {r0, r1, r4}
     a34:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a36:	2300      	movs	r3, #0
     a38:	627b      	str	r3, [r7, #36]	; 0x24
     a3a:	e00e      	b.n	a5a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a3c:	230c      	movs	r3, #12
     a3e:	18fb      	adds	r3, r7, r3
     a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a42:	0092      	lsls	r2, r2, #2
     a44:	58d3      	ldr	r3, [r2, r3]
     a46:	001a      	movs	r2, r3
     a48:	687b      	ldr	r3, [r7, #4]
     a4a:	429a      	cmp	r2, r3
     a4c:	d102      	bne.n	a54 <_sercom_get_sercom_inst_index+0x34>
			return i;
     a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a50:	b2db      	uxtb	r3, r3
     a52:	e006      	b.n	a62 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a56:	3301      	adds	r3, #1
     a58:	627b      	str	r3, [r7, #36]	; 0x24
     a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a5c:	2b05      	cmp	r3, #5
     a5e:	d9ed      	bls.n	a3c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     a60:	2300      	movs	r3, #0
}
     a62:	0018      	movs	r0, r3
     a64:	46bd      	mov	sp, r7
     a66:	b00b      	add	sp, #44	; 0x2c
     a68:	bd90      	pop	{r4, r7, pc}
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	00002808 	.word	0x00002808

00000a70 <system_gclk_chan_get_config_defaults>:
{
     a70:	b580      	push	{r7, lr}
     a72:	b082      	sub	sp, #8
     a74:	af00      	add	r7, sp, #0
     a76:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     a78:	687b      	ldr	r3, [r7, #4]
     a7a:	2200      	movs	r2, #0
     a7c:	701a      	strb	r2, [r3, #0]
}
     a7e:	46c0      	nop			; (mov r8, r8)
     a80:	46bd      	mov	sp, r7
     a82:	b002      	add	sp, #8
     a84:	bd80      	pop	{r7, pc}
	...

00000a88 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     a88:	b580      	push	{r7, lr}
     a8a:	b082      	sub	sp, #8
     a8c:	af00      	add	r7, sp, #0
     a8e:	0002      	movs	r2, r0
     a90:	6039      	str	r1, [r7, #0]
     a92:	1dfb      	adds	r3, r7, #7
     a94:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     a96:	1dfb      	adds	r3, r7, #7
     a98:	781b      	ldrb	r3, [r3, #0]
     a9a:	2b01      	cmp	r3, #1
     a9c:	d00a      	beq.n	ab4 <system_apb_clock_set_mask+0x2c>
     a9e:	2b02      	cmp	r3, #2
     aa0:	d00f      	beq.n	ac2 <system_apb_clock_set_mask+0x3a>
     aa2:	2b00      	cmp	r3, #0
     aa4:	d114      	bne.n	ad0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     aa6:	4b0e      	ldr	r3, [pc, #56]	; (ae0 <system_apb_clock_set_mask+0x58>)
     aa8:	4a0d      	ldr	r2, [pc, #52]	; (ae0 <system_apb_clock_set_mask+0x58>)
     aaa:	6991      	ldr	r1, [r2, #24]
     aac:	683a      	ldr	r2, [r7, #0]
     aae:	430a      	orrs	r2, r1
     ab0:	619a      	str	r2, [r3, #24]
			break;
     ab2:	e00f      	b.n	ad4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     ab4:	4b0a      	ldr	r3, [pc, #40]	; (ae0 <system_apb_clock_set_mask+0x58>)
     ab6:	4a0a      	ldr	r2, [pc, #40]	; (ae0 <system_apb_clock_set_mask+0x58>)
     ab8:	69d1      	ldr	r1, [r2, #28]
     aba:	683a      	ldr	r2, [r7, #0]
     abc:	430a      	orrs	r2, r1
     abe:	61da      	str	r2, [r3, #28]
			break;
     ac0:	e008      	b.n	ad4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     ac2:	4b07      	ldr	r3, [pc, #28]	; (ae0 <system_apb_clock_set_mask+0x58>)
     ac4:	4a06      	ldr	r2, [pc, #24]	; (ae0 <system_apb_clock_set_mask+0x58>)
     ac6:	6a11      	ldr	r1, [r2, #32]
     ac8:	683a      	ldr	r2, [r7, #0]
     aca:	430a      	orrs	r2, r1
     acc:	621a      	str	r2, [r3, #32]
			break;
     ace:	e001      	b.n	ad4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     ad0:	2317      	movs	r3, #23
     ad2:	e000      	b.n	ad6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     ad4:	2300      	movs	r3, #0
}
     ad6:	0018      	movs	r0, r3
     ad8:	46bd      	mov	sp, r7
     ada:	b002      	add	sp, #8
     adc:	bd80      	pop	{r7, pc}
     ade:	46c0      	nop			; (mov r8, r8)
     ae0:	40000400 	.word	0x40000400

00000ae4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     ae4:	b580      	push	{r7, lr}
     ae6:	b082      	sub	sp, #8
     ae8:	af00      	add	r7, sp, #0
     aea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     aec:	687b      	ldr	r3, [r7, #4]
     aee:	2280      	movs	r2, #128	; 0x80
     af0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     af2:	687b      	ldr	r3, [r7, #4]
     af4:	2200      	movs	r2, #0
     af6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     af8:	687b      	ldr	r3, [r7, #4]
     afa:	2201      	movs	r2, #1
     afc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     afe:	687b      	ldr	r3, [r7, #4]
     b00:	2200      	movs	r2, #0
     b02:	70da      	strb	r2, [r3, #3]
}
     b04:	46c0      	nop			; (mov r8, r8)
     b06:	46bd      	mov	sp, r7
     b08:	b002      	add	sp, #8
     b0a:	bd80      	pop	{r7, pc}

00000b0c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     b0c:	b580      	push	{r7, lr}
     b0e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     b10:	4b05      	ldr	r3, [pc, #20]	; (b28 <system_is_debugger_present+0x1c>)
     b12:	789b      	ldrb	r3, [r3, #2]
     b14:	b2db      	uxtb	r3, r3
     b16:	001a      	movs	r2, r3
     b18:	2302      	movs	r3, #2
     b1a:	4013      	ands	r3, r2
     b1c:	1e5a      	subs	r2, r3, #1
     b1e:	4193      	sbcs	r3, r2
     b20:	b2db      	uxtb	r3, r3
}
     b22:	0018      	movs	r0, r3
     b24:	46bd      	mov	sp, r7
     b26:	bd80      	pop	{r7, pc}
     b28:	41002000 	.word	0x41002000

00000b2c <usart_is_syncing>:
{
     b2c:	b580      	push	{r7, lr}
     b2e:	b084      	sub	sp, #16
     b30:	af00      	add	r7, sp, #0
     b32:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     b34:	687b      	ldr	r3, [r7, #4]
     b36:	681b      	ldr	r3, [r3, #0]
     b38:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
     b3a:	68fb      	ldr	r3, [r7, #12]
     b3c:	69db      	ldr	r3, [r3, #28]
     b3e:	1e5a      	subs	r2, r3, #1
     b40:	4193      	sbcs	r3, r2
     b42:	b2db      	uxtb	r3, r3
}
     b44:	0018      	movs	r0, r3
     b46:	46bd      	mov	sp, r7
     b48:	b004      	add	sp, #16
     b4a:	bd80      	pop	{r7, pc}

00000b4c <_usart_wait_for_sync>:
{
     b4c:	b580      	push	{r7, lr}
     b4e:	b082      	sub	sp, #8
     b50:	af00      	add	r7, sp, #0
     b52:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
     b54:	46c0      	nop			; (mov r8, r8)
     b56:	687b      	ldr	r3, [r7, #4]
     b58:	0018      	movs	r0, r3
     b5a:	4b04      	ldr	r3, [pc, #16]	; (b6c <_usart_wait_for_sync+0x20>)
     b5c:	4798      	blx	r3
     b5e:	1e03      	subs	r3, r0, #0
     b60:	d1f9      	bne.n	b56 <_usart_wait_for_sync+0xa>
}
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	46bd      	mov	sp, r7
     b66:	b002      	add	sp, #8
     b68:	bd80      	pop	{r7, pc}
     b6a:	46c0      	nop			; (mov r8, r8)
     b6c:	00000b2d 	.word	0x00000b2d

00000b70 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
     b70:	b5b0      	push	{r4, r5, r7, lr}
     b72:	b08c      	sub	sp, #48	; 0x30
     b74:	af02      	add	r7, sp, #8
     b76:	6078      	str	r0, [r7, #4]
     b78:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b7a:	687b      	ldr	r3, [r7, #4]
     b7c:	681b      	ldr	r3, [r3, #0]
     b7e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	681b      	ldr	r3, [r3, #0]
     b84:	0018      	movs	r0, r3
     b86:	4bab      	ldr	r3, [pc, #684]	; (e34 <_usart_set_config+0x2c4>)
     b88:	4798      	blx	r3
     b8a:	0003      	movs	r3, r0
     b8c:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b8e:	697b      	ldr	r3, [r7, #20]
     b90:	3314      	adds	r3, #20
     b92:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
     b94:	2300      	movs	r3, #0
     b96:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
     b98:	2300      	movs	r3, #0
     b9a:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     b9c:	230a      	movs	r3, #10
     b9e:	18fb      	adds	r3, r7, r3
     ba0:	2200      	movs	r2, #0
     ba2:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     ba4:	231f      	movs	r3, #31
     ba6:	18fb      	adds	r3, r7, r3
     ba8:	2200      	movs	r2, #0
     baa:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     bac:	231e      	movs	r3, #30
     bae:	18fb      	adds	r3, r7, r3
     bb0:	2210      	movs	r2, #16
     bb2:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     bb4:	683b      	ldr	r3, [r7, #0]
     bb6:	8a1b      	ldrh	r3, [r3, #16]
     bb8:	2280      	movs	r2, #128	; 0x80
     bba:	01d2      	lsls	r2, r2, #7
     bbc:	4293      	cmp	r3, r2
     bbe:	d01c      	beq.n	bfa <_usart_set_config+0x8a>
     bc0:	2280      	movs	r2, #128	; 0x80
     bc2:	01d2      	lsls	r2, r2, #7
     bc4:	4293      	cmp	r3, r2
     bc6:	dc06      	bgt.n	bd6 <_usart_set_config+0x66>
     bc8:	2b00      	cmp	r3, #0
     bca:	d00d      	beq.n	be8 <_usart_set_config+0x78>
     bcc:	2280      	movs	r2, #128	; 0x80
     bce:	0192      	lsls	r2, r2, #6
     bd0:	4293      	cmp	r3, r2
     bd2:	d024      	beq.n	c1e <_usart_set_config+0xae>
     bd4:	e035      	b.n	c42 <_usart_set_config+0xd2>
     bd6:	22c0      	movs	r2, #192	; 0xc0
     bd8:	01d2      	lsls	r2, r2, #7
     bda:	4293      	cmp	r3, r2
     bdc:	d028      	beq.n	c30 <_usart_set_config+0xc0>
     bde:	2280      	movs	r2, #128	; 0x80
     be0:	0212      	lsls	r2, r2, #8
     be2:	4293      	cmp	r3, r2
     be4:	d012      	beq.n	c0c <_usart_set_config+0x9c>
     be6:	e02c      	b.n	c42 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     be8:	231f      	movs	r3, #31
     bea:	18fb      	adds	r3, r7, r3
     bec:	2200      	movs	r2, #0
     bee:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     bf0:	231e      	movs	r3, #30
     bf2:	18fb      	adds	r3, r7, r3
     bf4:	2210      	movs	r2, #16
     bf6:	701a      	strb	r2, [r3, #0]
			break;
     bf8:	e023      	b.n	c42 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     bfa:	231f      	movs	r3, #31
     bfc:	18fb      	adds	r3, r7, r3
     bfe:	2200      	movs	r2, #0
     c00:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     c02:	231e      	movs	r3, #30
     c04:	18fb      	adds	r3, r7, r3
     c06:	2208      	movs	r2, #8
     c08:	701a      	strb	r2, [r3, #0]
			break;
     c0a:	e01a      	b.n	c42 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c0c:	231f      	movs	r3, #31
     c0e:	18fb      	adds	r3, r7, r3
     c10:	2200      	movs	r2, #0
     c12:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     c14:	231e      	movs	r3, #30
     c16:	18fb      	adds	r3, r7, r3
     c18:	2203      	movs	r2, #3
     c1a:	701a      	strb	r2, [r3, #0]
			break;
     c1c:	e011      	b.n	c42 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c1e:	231f      	movs	r3, #31
     c20:	18fb      	adds	r3, r7, r3
     c22:	2201      	movs	r2, #1
     c24:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     c26:	231e      	movs	r3, #30
     c28:	18fb      	adds	r3, r7, r3
     c2a:	2210      	movs	r2, #16
     c2c:	701a      	strb	r2, [r3, #0]
			break;
     c2e:	e008      	b.n	c42 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c30:	231f      	movs	r3, #31
     c32:	18fb      	adds	r3, r7, r3
     c34:	2201      	movs	r2, #1
     c36:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     c38:	231e      	movs	r3, #30
     c3a:	18fb      	adds	r3, r7, r3
     c3c:	2208      	movs	r2, #8
     c3e:	701a      	strb	r2, [r3, #0]
			break;
     c40:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     c42:	683b      	ldr	r3, [r7, #0]
     c44:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
     c46:	683b      	ldr	r3, [r7, #0]
     c48:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
     c4a:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     c4c:	683b      	ldr	r3, [r7, #0]
     c4e:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
     c50:	4313      	orrs	r3, r2
		config->sample_rate |
     c52:	683a      	ldr	r2, [r7, #0]
     c54:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
     c56:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     c58:	683a      	ldr	r2, [r7, #0]
     c5a:	7e12      	ldrb	r2, [r2, #24]
     c5c:	0212      	lsls	r2, r2, #8
		config->sample_rate |
     c5e:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     c60:	683a      	ldr	r2, [r7, #0]
     c62:	2126      	movs	r1, #38	; 0x26
     c64:	5c52      	ldrb	r2, [r2, r1]
     c66:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
     c68:	4313      	orrs	r3, r2
     c6a:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
     c6c:	231d      	movs	r3, #29
     c6e:	18fb      	adds	r3, r7, r3
     c70:	2200      	movs	r2, #0
     c72:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
     c74:	683b      	ldr	r3, [r7, #0]
     c76:	685b      	ldr	r3, [r3, #4]
     c78:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     c7a:	68fb      	ldr	r3, [r7, #12]
     c7c:	2b00      	cmp	r3, #0
     c7e:	d01e      	beq.n	cbe <_usart_set_config+0x14e>
     c80:	2280      	movs	r2, #128	; 0x80
     c82:	0552      	lsls	r2, r2, #21
     c84:	4293      	cmp	r3, r2
     c86:	d14f      	bne.n	d28 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     c88:	683b      	ldr	r3, [r7, #0]
     c8a:	2227      	movs	r2, #39	; 0x27
     c8c:	5c9b      	ldrb	r3, [r3, r2]
     c8e:	2201      	movs	r2, #1
     c90:	4053      	eors	r3, r2
     c92:	b2db      	uxtb	r3, r3
     c94:	2b00      	cmp	r3, #0
     c96:	d046      	beq.n	d26 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     c98:	683b      	ldr	r3, [r7, #0]
     c9a:	6a1d      	ldr	r5, [r3, #32]
     c9c:	693b      	ldr	r3, [r7, #16]
     c9e:	b2db      	uxtb	r3, r3
     ca0:	0018      	movs	r0, r3
     ca2:	4b65      	ldr	r3, [pc, #404]	; (e38 <_usart_set_config+0x2c8>)
     ca4:	4798      	blx	r3
     ca6:	0001      	movs	r1, r0
     ca8:	231d      	movs	r3, #29
     caa:	18fc      	adds	r4, r7, r3
     cac:	230a      	movs	r3, #10
     cae:	18fb      	adds	r3, r7, r3
     cb0:	001a      	movs	r2, r3
     cb2:	0028      	movs	r0, r5
     cb4:	4b61      	ldr	r3, [pc, #388]	; (e3c <_usart_set_config+0x2cc>)
     cb6:	4798      	blx	r3
     cb8:	0003      	movs	r3, r0
     cba:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
     cbc:	e033      	b.n	d26 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     cbe:	683b      	ldr	r3, [r7, #0]
     cc0:	2227      	movs	r2, #39	; 0x27
     cc2:	5c9b      	ldrb	r3, [r3, r2]
     cc4:	2b00      	cmp	r3, #0
     cc6:	d014      	beq.n	cf2 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     cc8:	683b      	ldr	r3, [r7, #0]
     cca:	6a18      	ldr	r0, [r3, #32]
     ccc:	683b      	ldr	r3, [r7, #0]
     cce:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
     cd0:	231d      	movs	r3, #29
     cd2:	18fc      	adds	r4, r7, r3
     cd4:	231f      	movs	r3, #31
     cd6:	18fb      	adds	r3, r7, r3
     cd8:	781d      	ldrb	r5, [r3, #0]
     cda:	230a      	movs	r3, #10
     cdc:	18fa      	adds	r2, r7, r3
     cde:	231e      	movs	r3, #30
     ce0:	18fb      	adds	r3, r7, r3
     ce2:	781b      	ldrb	r3, [r3, #0]
     ce4:	9300      	str	r3, [sp, #0]
     ce6:	002b      	movs	r3, r5
     ce8:	4d55      	ldr	r5, [pc, #340]	; (e40 <_usart_set_config+0x2d0>)
     cea:	47a8      	blx	r5
     cec:	0003      	movs	r3, r0
     cee:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
     cf0:	e01a      	b.n	d28 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
     cf2:	683b      	ldr	r3, [r7, #0]
     cf4:	6a1d      	ldr	r5, [r3, #32]
     cf6:	693b      	ldr	r3, [r7, #16]
     cf8:	b2db      	uxtb	r3, r3
     cfa:	0018      	movs	r0, r3
     cfc:	4b4e      	ldr	r3, [pc, #312]	; (e38 <_usart_set_config+0x2c8>)
     cfe:	4798      	blx	r3
				status_code =
     d00:	231d      	movs	r3, #29
     d02:	18fc      	adds	r4, r7, r3
     d04:	231f      	movs	r3, #31
     d06:	18fb      	adds	r3, r7, r3
     d08:	7819      	ldrb	r1, [r3, #0]
     d0a:	230a      	movs	r3, #10
     d0c:	18fa      	adds	r2, r7, r3
     d0e:	231e      	movs	r3, #30
     d10:	18fb      	adds	r3, r7, r3
     d12:	781b      	ldrb	r3, [r3, #0]
     d14:	9300      	str	r3, [sp, #0]
     d16:	000b      	movs	r3, r1
     d18:	0001      	movs	r1, r0
     d1a:	0028      	movs	r0, r5
     d1c:	4d48      	ldr	r5, [pc, #288]	; (e40 <_usart_set_config+0x2d0>)
     d1e:	47a8      	blx	r5
     d20:	0003      	movs	r3, r0
     d22:	7023      	strb	r3, [r4, #0]
			break;
     d24:	e000      	b.n	d28 <_usart_set_config+0x1b8>
			break;
     d26:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     d28:	231d      	movs	r3, #29
     d2a:	18fb      	adds	r3, r7, r3
     d2c:	781b      	ldrb	r3, [r3, #0]
     d2e:	2b00      	cmp	r3, #0
     d30:	d003      	beq.n	d3a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
     d32:	231d      	movs	r3, #29
     d34:	18fb      	adds	r3, r7, r3
     d36:	781b      	ldrb	r3, [r3, #0]
     d38:	e077      	b.n	e2a <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     d3a:	683b      	ldr	r3, [r7, #0]
     d3c:	7e5b      	ldrb	r3, [r3, #25]
     d3e:	2b00      	cmp	r3, #0
     d40:	d003      	beq.n	d4a <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     d42:	683b      	ldr	r3, [r7, #0]
     d44:	7e9a      	ldrb	r2, [r3, #26]
     d46:	69bb      	ldr	r3, [r7, #24]
     d48:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     d4a:	687b      	ldr	r3, [r7, #4]
     d4c:	0018      	movs	r0, r3
     d4e:	4b3d      	ldr	r3, [pc, #244]	; (e44 <_usart_set_config+0x2d4>)
     d50:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     d52:	230a      	movs	r3, #10
     d54:	18fb      	adds	r3, r7, r3
     d56:	881a      	ldrh	r2, [r3, #0]
     d58:	69bb      	ldr	r3, [r7, #24]
     d5a:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     d5e:	68fb      	ldr	r3, [r7, #12]
     d60:	4313      	orrs	r3, r2
     d62:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
     d64:	683b      	ldr	r3, [r7, #0]
     d66:	2227      	movs	r2, #39	; 0x27
     d68:	5c9b      	ldrb	r3, [r3, r2]
     d6a:	2201      	movs	r2, #1
     d6c:	4053      	eors	r3, r2
     d6e:	b2db      	uxtb	r3, r3
     d70:	2b00      	cmp	r3, #0
     d72:	d003      	beq.n	d7c <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d76:	2204      	movs	r2, #4
     d78:	4313      	orrs	r3, r2
     d7a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     d7c:	683b      	ldr	r3, [r7, #0]
     d7e:	7e5b      	ldrb	r3, [r3, #25]
     d80:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     d82:	683b      	ldr	r3, [r7, #0]
     d84:	7f1b      	ldrb	r3, [r3, #28]
     d86:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     d88:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     d8a:	683b      	ldr	r3, [r7, #0]
     d8c:	7f5b      	ldrb	r3, [r3, #29]
     d8e:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     d90:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     d92:	683b      	ldr	r3, [r7, #0]
     d94:	2124      	movs	r1, #36	; 0x24
     d96:	5c5b      	ldrb	r3, [r3, r1]
     d98:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     d9a:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     d9c:	683b      	ldr	r3, [r7, #0]
     d9e:	2125      	movs	r1, #37	; 0x25
     da0:	5c5b      	ldrb	r3, [r3, r1]
     da2:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     da4:	4313      	orrs	r3, r2
	ctrlb =  
     da6:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
     da8:	683b      	ldr	r3, [r7, #0]
     daa:	7a9b      	ldrb	r3, [r3, #10]
     dac:	001a      	movs	r2, r3
     dae:	6a3b      	ldr	r3, [r7, #32]
     db0:	4313      	orrs	r3, r2
     db2:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
     db4:	683b      	ldr	r3, [r7, #0]
     db6:	7adb      	ldrb	r3, [r3, #11]
     db8:	001a      	movs	r2, r3
     dba:	6a3b      	ldr	r3, [r7, #32]
     dbc:	4313      	orrs	r3, r2
     dbe:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     dc0:	683b      	ldr	r3, [r7, #0]
     dc2:	891b      	ldrh	r3, [r3, #8]
     dc4:	2bff      	cmp	r3, #255	; 0xff
     dc6:	d00b      	beq.n	de0 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     dca:	2280      	movs	r2, #128	; 0x80
     dcc:	0452      	lsls	r2, r2, #17
     dce:	4313      	orrs	r3, r2
     dd0:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
     dd2:	683b      	ldr	r3, [r7, #0]
     dd4:	891b      	ldrh	r3, [r3, #8]
     dd6:	001a      	movs	r2, r3
     dd8:	6a3b      	ldr	r3, [r7, #32]
     dda:	4313      	orrs	r3, r2
     ddc:	623b      	str	r3, [r7, #32]
     dde:	e008      	b.n	df2 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     de0:	683b      	ldr	r3, [r7, #0]
     de2:	7edb      	ldrb	r3, [r3, #27]
     de4:	2b00      	cmp	r3, #0
     de6:	d004      	beq.n	df2 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     dea:	2280      	movs	r2, #128	; 0x80
     dec:	04d2      	lsls	r2, r2, #19
     dee:	4313      	orrs	r3, r2
     df0:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     df2:	683b      	ldr	r3, [r7, #0]
     df4:	222c      	movs	r2, #44	; 0x2c
     df6:	5c9b      	ldrb	r3, [r3, r2]
     df8:	2b00      	cmp	r3, #0
     dfa:	d103      	bne.n	e04 <_usart_set_config+0x294>
     dfc:	4b12      	ldr	r3, [pc, #72]	; (e48 <_usart_set_config+0x2d8>)
     dfe:	4798      	blx	r3
     e00:	1e03      	subs	r3, r0, #0
     e02:	d003      	beq.n	e0c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e06:	2280      	movs	r2, #128	; 0x80
     e08:	4313      	orrs	r3, r2
     e0a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     e0c:	687b      	ldr	r3, [r7, #4]
     e0e:	0018      	movs	r0, r3
     e10:	4b0c      	ldr	r3, [pc, #48]	; (e44 <_usart_set_config+0x2d4>)
     e12:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     e14:	69bb      	ldr	r3, [r7, #24]
     e16:	6a3a      	ldr	r2, [r7, #32]
     e18:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     e1a:	687b      	ldr	r3, [r7, #4]
     e1c:	0018      	movs	r0, r3
     e1e:	4b09      	ldr	r3, [pc, #36]	; (e44 <_usart_set_config+0x2d4>)
     e20:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     e22:	69bb      	ldr	r3, [r7, #24]
     e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     e26:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
     e28:	2300      	movs	r3, #0
}
     e2a:	0018      	movs	r0, r3
     e2c:	46bd      	mov	sp, r7
     e2e:	b00a      	add	sp, #40	; 0x28
     e30:	bdb0      	pop	{r4, r5, r7, pc}
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	00000a21 	.word	0x00000a21
     e38:	000021a1 	.word	0x000021a1
     e3c:	0000059b 	.word	0x0000059b
     e40:	00000619 	.word	0x00000619
     e44:	00000b4d 	.word	0x00000b4d
     e48:	00000b0d 	.word	0x00000b0d

00000e4c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     e4c:	b590      	push	{r4, r7, lr}
     e4e:	b093      	sub	sp, #76	; 0x4c
     e50:	af00      	add	r7, sp, #0
     e52:	60f8      	str	r0, [r7, #12]
     e54:	60b9      	str	r1, [r7, #8]
     e56:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
     e58:	233b      	movs	r3, #59	; 0x3b
     e5a:	18fb      	adds	r3, r7, r3
     e5c:	2200      	movs	r2, #0
     e5e:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     e60:	68fb      	ldr	r3, [r7, #12]
     e62:	68ba      	ldr	r2, [r7, #8]
     e64:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     e66:	68fb      	ldr	r3, [r7, #12]
     e68:	681b      	ldr	r3, [r3, #0]
     e6a:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e6c:	68fb      	ldr	r3, [r7, #12]
     e6e:	681b      	ldr	r3, [r3, #0]
     e70:	0018      	movs	r0, r3
     e72:	4b86      	ldr	r3, [pc, #536]	; (108c <usart_init+0x240>)
     e74:	4798      	blx	r3
     e76:	0003      	movs	r3, r0
     e78:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e7c:	3302      	adds	r3, #2
     e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e82:	3314      	adds	r3, #20
     e84:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e88:	681b      	ldr	r3, [r3, #0]
     e8a:	2201      	movs	r2, #1
     e8c:	4013      	ands	r3, r2
     e8e:	d001      	beq.n	e94 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     e90:	2305      	movs	r3, #5
     e92:	e0f6      	b.n	1082 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e96:	681b      	ldr	r3, [r3, #0]
     e98:	2202      	movs	r2, #2
     e9a:	4013      	ands	r3, r2
     e9c:	d001      	beq.n	ea2 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     e9e:	231c      	movs	r3, #28
     ea0:	e0ef      	b.n	1082 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     ea2:	2201      	movs	r2, #1
     ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ea6:	409a      	lsls	r2, r3
     ea8:	0013      	movs	r3, r2
     eaa:	0019      	movs	r1, r3
     eac:	2002      	movs	r0, #2
     eae:	4b78      	ldr	r3, [pc, #480]	; (1090 <usart_init+0x244>)
     eb0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     eb2:	2324      	movs	r3, #36	; 0x24
     eb4:	18fb      	adds	r3, r7, r3
     eb6:	0018      	movs	r0, r3
     eb8:	4b76      	ldr	r3, [pc, #472]	; (1094 <usart_init+0x248>)
     eba:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
     ebc:	687b      	ldr	r3, [r7, #4]
     ebe:	222d      	movs	r2, #45	; 0x2d
     ec0:	5c9a      	ldrb	r2, [r3, r2]
     ec2:	2324      	movs	r3, #36	; 0x24
     ec4:	18fb      	adds	r3, r7, r3
     ec6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
     eca:	b2db      	uxtb	r3, r3
     ecc:	2224      	movs	r2, #36	; 0x24
     ece:	18ba      	adds	r2, r7, r2
     ed0:	0011      	movs	r1, r2
     ed2:	0018      	movs	r0, r3
     ed4:	4b70      	ldr	r3, [pc, #448]	; (1098 <usart_init+0x24c>)
     ed6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
     eda:	b2db      	uxtb	r3, r3
     edc:	0018      	movs	r0, r3
     ede:	4b6f      	ldr	r3, [pc, #444]	; (109c <usart_init+0x250>)
     ee0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     ee2:	687b      	ldr	r3, [r7, #4]
     ee4:	222d      	movs	r2, #45	; 0x2d
     ee6:	5c9b      	ldrb	r3, [r3, r2]
     ee8:	2100      	movs	r1, #0
     eea:	0018      	movs	r0, r3
     eec:	4b6c      	ldr	r3, [pc, #432]	; (10a0 <usart_init+0x254>)
     eee:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     ef0:	687b      	ldr	r3, [r7, #4]
     ef2:	7ada      	ldrb	r2, [r3, #11]
     ef4:	68fb      	ldr	r3, [r7, #12]
     ef6:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     ef8:	687b      	ldr	r3, [r7, #4]
     efa:	2224      	movs	r2, #36	; 0x24
     efc:	5c9a      	ldrb	r2, [r3, r2]
     efe:	68fb      	ldr	r3, [r7, #12]
     f00:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
     f02:	687b      	ldr	r3, [r7, #4]
     f04:	2225      	movs	r2, #37	; 0x25
     f06:	5c9a      	ldrb	r2, [r3, r2]
     f08:	68fb      	ldr	r3, [r7, #12]
     f0a:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     f0c:	687b      	ldr	r3, [r7, #4]
     f0e:	7eda      	ldrb	r2, [r3, #27]
     f10:	68fb      	ldr	r3, [r7, #12]
     f12:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     f14:	687b      	ldr	r3, [r7, #4]
     f16:	7f1a      	ldrb	r2, [r3, #28]
     f18:	68fb      	ldr	r3, [r7, #12]
     f1a:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
     f1c:	233b      	movs	r3, #59	; 0x3b
     f1e:	18fc      	adds	r4, r7, r3
     f20:	687a      	ldr	r2, [r7, #4]
     f22:	68fb      	ldr	r3, [r7, #12]
     f24:	0011      	movs	r1, r2
     f26:	0018      	movs	r0, r3
     f28:	4b5e      	ldr	r3, [pc, #376]	; (10a4 <usart_init+0x258>)
     f2a:	4798      	blx	r3
     f2c:	0003      	movs	r3, r0
     f2e:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
     f30:	233b      	movs	r3, #59	; 0x3b
     f32:	18fb      	adds	r3, r7, r3
     f34:	781b      	ldrb	r3, [r3, #0]
     f36:	2b00      	cmp	r3, #0
     f38:	d003      	beq.n	f42 <usart_init+0xf6>
		return status_code;
     f3a:	233b      	movs	r3, #59	; 0x3b
     f3c:	18fb      	adds	r3, r7, r3
     f3e:	781b      	ldrb	r3, [r3, #0]
     f40:	e09f      	b.n	1082 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     f42:	2320      	movs	r3, #32
     f44:	18fb      	adds	r3, r7, r3
     f46:	0018      	movs	r0, r3
     f48:	4b57      	ldr	r3, [pc, #348]	; (10a8 <usart_init+0x25c>)
     f4a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f4c:	2320      	movs	r3, #32
     f4e:	18fb      	adds	r3, r7, r3
     f50:	2200      	movs	r2, #0
     f52:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     f54:	2320      	movs	r3, #32
     f56:	18fb      	adds	r3, r7, r3
     f58:	2200      	movs	r2, #0
     f5a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     f5c:	687b      	ldr	r3, [r7, #4]
     f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
     f60:	2310      	movs	r3, #16
     f62:	18fb      	adds	r3, r7, r3
     f64:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     f66:	687b      	ldr	r3, [r7, #4]
     f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
     f6a:	2310      	movs	r3, #16
     f6c:	18fb      	adds	r3, r7, r3
     f6e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
     f70:	687b      	ldr	r3, [r7, #4]
     f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
     f74:	2310      	movs	r3, #16
     f76:	18fb      	adds	r3, r7, r3
     f78:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
     f7a:	687b      	ldr	r3, [r7, #4]
     f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
     f7e:	2310      	movs	r3, #16
     f80:	18fb      	adds	r3, r7, r3
     f82:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     f84:	2347      	movs	r3, #71	; 0x47
     f86:	18fb      	adds	r3, r7, r3
     f88:	2200      	movs	r2, #0
     f8a:	701a      	strb	r2, [r3, #0]
     f8c:	e02c      	b.n	fe8 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f8e:	2347      	movs	r3, #71	; 0x47
     f90:	18fb      	adds	r3, r7, r3
     f92:	781a      	ldrb	r2, [r3, #0]
     f94:	2310      	movs	r3, #16
     f96:	18fb      	adds	r3, r7, r3
     f98:	0092      	lsls	r2, r2, #2
     f9a:	58d3      	ldr	r3, [r2, r3]
     f9c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     fa0:	2b00      	cmp	r3, #0
     fa2:	d109      	bne.n	fb8 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     fa4:	2347      	movs	r3, #71	; 0x47
     fa6:	18fb      	adds	r3, r7, r3
     fa8:	781a      	ldrb	r2, [r3, #0]
     faa:	68bb      	ldr	r3, [r7, #8]
     fac:	0011      	movs	r1, r2
     fae:	0018      	movs	r0, r3
     fb0:	4b3e      	ldr	r3, [pc, #248]	; (10ac <usart_init+0x260>)
     fb2:	4798      	blx	r3
     fb4:	0003      	movs	r3, r0
     fb6:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
     fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     fba:	3301      	adds	r3, #1
     fbc:	d00d      	beq.n	fda <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     fc0:	b2da      	uxtb	r2, r3
     fc2:	2320      	movs	r3, #32
     fc4:	18fb      	adds	r3, r7, r3
     fc6:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     fca:	0c1b      	lsrs	r3, r3, #16
     fcc:	b2db      	uxtb	r3, r3
     fce:	2220      	movs	r2, #32
     fd0:	18ba      	adds	r2, r7, r2
     fd2:	0011      	movs	r1, r2
     fd4:	0018      	movs	r0, r3
     fd6:	4b36      	ldr	r3, [pc, #216]	; (10b0 <usart_init+0x264>)
     fd8:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
     fda:	2347      	movs	r3, #71	; 0x47
     fdc:	18fb      	adds	r3, r7, r3
     fde:	781a      	ldrb	r2, [r3, #0]
     fe0:	2347      	movs	r3, #71	; 0x47
     fe2:	18fb      	adds	r3, r7, r3
     fe4:	3201      	adds	r2, #1
     fe6:	701a      	strb	r2, [r3, #0]
     fe8:	2347      	movs	r3, #71	; 0x47
     fea:	18fb      	adds	r3, r7, r3
     fec:	781b      	ldrb	r3, [r3, #0]
     fee:	2b03      	cmp	r3, #3
     ff0:	d9cd      	bls.n	f8e <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     ff2:	2300      	movs	r3, #0
     ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
     ff6:	e00a      	b.n	100e <usart_init+0x1c2>
		module->callback[i]            = NULL;
     ff8:	68fa      	ldr	r2, [r7, #12]
     ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ffc:	3302      	adds	r3, #2
     ffe:	009b      	lsls	r3, r3, #2
    1000:	18d3      	adds	r3, r2, r3
    1002:	3304      	adds	r3, #4
    1004:	2200      	movs	r2, #0
    1006:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    100a:	3301      	adds	r3, #1
    100c:	63fb      	str	r3, [r7, #60]	; 0x3c
    100e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1010:	2b05      	cmp	r3, #5
    1012:	d9f1      	bls.n	ff8 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    1014:	68fb      	ldr	r3, [r7, #12]
    1016:	2200      	movs	r2, #0
    1018:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    101a:	68fb      	ldr	r3, [r7, #12]
    101c:	2200      	movs	r2, #0
    101e:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1020:	68fb      	ldr	r3, [r7, #12]
    1022:	2200      	movs	r2, #0
    1024:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1026:	68fb      	ldr	r3, [r7, #12]
    1028:	2200      	movs	r2, #0
    102a:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    102c:	68fb      	ldr	r3, [r7, #12]
    102e:	2230      	movs	r2, #48	; 0x30
    1030:	2100      	movs	r1, #0
    1032:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    1034:	68fb      	ldr	r3, [r7, #12]
    1036:	2231      	movs	r2, #49	; 0x31
    1038:	2100      	movs	r1, #0
    103a:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    103c:	68fb      	ldr	r3, [r7, #12]
    103e:	2232      	movs	r2, #50	; 0x32
    1040:	2100      	movs	r1, #0
    1042:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    1044:	68fb      	ldr	r3, [r7, #12]
    1046:	2233      	movs	r2, #51	; 0x33
    1048:	2100      	movs	r1, #0
    104a:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    104c:	68fb      	ldr	r3, [r7, #12]
    104e:	681b      	ldr	r3, [r3, #0]
    1050:	2227      	movs	r2, #39	; 0x27
    1052:	18bc      	adds	r4, r7, r2
    1054:	0018      	movs	r0, r3
    1056:	4b0d      	ldr	r3, [pc, #52]	; (108c <usart_init+0x240>)
    1058:	4798      	blx	r3
    105a:	0003      	movs	r3, r0
    105c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    105e:	4a15      	ldr	r2, [pc, #84]	; (10b4 <usart_init+0x268>)
    1060:	2327      	movs	r3, #39	; 0x27
    1062:	18fb      	adds	r3, r7, r3
    1064:	781b      	ldrb	r3, [r3, #0]
    1066:	0011      	movs	r1, r2
    1068:	0018      	movs	r0, r3
    106a:	4b13      	ldr	r3, [pc, #76]	; (10b8 <usart_init+0x26c>)
    106c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    106e:	2327      	movs	r3, #39	; 0x27
    1070:	18fb      	adds	r3, r7, r3
    1072:	781a      	ldrb	r2, [r3, #0]
    1074:	4b11      	ldr	r3, [pc, #68]	; (10bc <usart_init+0x270>)
    1076:	0092      	lsls	r2, r2, #2
    1078:	68f9      	ldr	r1, [r7, #12]
    107a:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    107c:	233b      	movs	r3, #59	; 0x3b
    107e:	18fb      	adds	r3, r7, r3
    1080:	781b      	ldrb	r3, [r3, #0]
}
    1082:	0018      	movs	r0, r3
    1084:	46bd      	mov	sp, r7
    1086:	b013      	add	sp, #76	; 0x4c
    1088:	bd90      	pop	{r4, r7, pc}
    108a:	46c0      	nop			; (mov r8, r8)
    108c:	00000a21 	.word	0x00000a21
    1090:	00000a89 	.word	0x00000a89
    1094:	00000a71 	.word	0x00000a71
    1098:	0000207d 	.word	0x0000207d
    109c:	000020c1 	.word	0x000020c1
    10a0:	000007d9 	.word	0x000007d9
    10a4:	00000b71 	.word	0x00000b71
    10a8:	00000ae5 	.word	0x00000ae5
    10ac:	00000865 	.word	0x00000865
    10b0:	00002369 	.word	0x00002369
    10b4:	00001381 	.word	0x00001381
    10b8:	000016d5 	.word	0x000016d5
    10bc:	20000494 	.word	0x20000494

000010c0 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    10c0:	b580      	push	{r7, lr}
    10c2:	b084      	sub	sp, #16
    10c4:	af00      	add	r7, sp, #0
    10c6:	6078      	str	r0, [r7, #4]
    10c8:	000a      	movs	r2, r1
    10ca:	1cbb      	adds	r3, r7, #2
    10cc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    10ce:	687b      	ldr	r3, [r7, #4]
    10d0:	681b      	ldr	r3, [r3, #0]
    10d2:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    10d4:	687b      	ldr	r3, [r7, #4]
    10d6:	79db      	ldrb	r3, [r3, #7]
    10d8:	2201      	movs	r2, #1
    10da:	4053      	eors	r3, r2
    10dc:	b2db      	uxtb	r3, r3
    10de:	2b00      	cmp	r3, #0
    10e0:	d001      	beq.n	10e6 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    10e2:	231c      	movs	r3, #28
    10e4:	e017      	b.n	1116 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    10e6:	687b      	ldr	r3, [r7, #4]
    10e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    10ea:	b29b      	uxth	r3, r3
    10ec:	2b00      	cmp	r3, #0
    10ee:	d001      	beq.n	10f4 <usart_write_wait+0x34>
		return STATUS_BUSY;
    10f0:	2305      	movs	r3, #5
    10f2:	e010      	b.n	1116 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    10f4:	687b      	ldr	r3, [r7, #4]
    10f6:	0018      	movs	r0, r3
    10f8:	4b09      	ldr	r3, [pc, #36]	; (1120 <usart_write_wait+0x60>)
    10fa:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    10fc:	68fb      	ldr	r3, [r7, #12]
    10fe:	1cba      	adds	r2, r7, #2
    1100:	8812      	ldrh	r2, [r2, #0]
    1102:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1104:	46c0      	nop			; (mov r8, r8)
    1106:	68fb      	ldr	r3, [r7, #12]
    1108:	7e1b      	ldrb	r3, [r3, #24]
    110a:	b2db      	uxtb	r3, r3
    110c:	001a      	movs	r2, r3
    110e:	2302      	movs	r3, #2
    1110:	4013      	ands	r3, r2
    1112:	d0f8      	beq.n	1106 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1114:	2300      	movs	r3, #0
}
    1116:	0018      	movs	r0, r3
    1118:	46bd      	mov	sp, r7
    111a:	b004      	add	sp, #16
    111c:	bd80      	pop	{r7, pc}
    111e:	46c0      	nop			; (mov r8, r8)
    1120:	00000b4d 	.word	0x00000b4d

00001124 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    1124:	b580      	push	{r7, lr}
    1126:	b084      	sub	sp, #16
    1128:	af00      	add	r7, sp, #0
    112a:	6078      	str	r0, [r7, #4]
    112c:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    112e:	687b      	ldr	r3, [r7, #4]
    1130:	681b      	ldr	r3, [r3, #0]
    1132:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1134:	687b      	ldr	r3, [r7, #4]
    1136:	799b      	ldrb	r3, [r3, #6]
    1138:	2201      	movs	r2, #1
    113a:	4053      	eors	r3, r2
    113c:	b2db      	uxtb	r3, r3
    113e:	2b00      	cmp	r3, #0
    1140:	d001      	beq.n	1146 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    1142:	231c      	movs	r3, #28
    1144:	e05e      	b.n	1204 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1146:	687b      	ldr	r3, [r7, #4]
    1148:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    114a:	b29b      	uxth	r3, r3
    114c:	2b00      	cmp	r3, #0
    114e:	d001      	beq.n	1154 <usart_read_wait+0x30>
		return STATUS_BUSY;
    1150:	2305      	movs	r3, #5
    1152:	e057      	b.n	1204 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1154:	68fb      	ldr	r3, [r7, #12]
    1156:	7e1b      	ldrb	r3, [r3, #24]
    1158:	b2db      	uxtb	r3, r3
    115a:	001a      	movs	r2, r3
    115c:	2304      	movs	r3, #4
    115e:	4013      	ands	r3, r2
    1160:	d101      	bne.n	1166 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    1162:	2305      	movs	r3, #5
    1164:	e04e      	b.n	1204 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1166:	687b      	ldr	r3, [r7, #4]
    1168:	0018      	movs	r0, r3
    116a:	4b28      	ldr	r3, [pc, #160]	; (120c <usart_read_wait+0xe8>)
    116c:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    116e:	68fb      	ldr	r3, [r7, #12]
    1170:	8b5b      	ldrh	r3, [r3, #26]
    1172:	b29b      	uxth	r3, r3
    1174:	b2da      	uxtb	r2, r3
    1176:	230b      	movs	r3, #11
    1178:	18fb      	adds	r3, r7, r3
    117a:	213f      	movs	r1, #63	; 0x3f
    117c:	400a      	ands	r2, r1
    117e:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1180:	230b      	movs	r3, #11
    1182:	18fb      	adds	r3, r7, r3
    1184:	781b      	ldrb	r3, [r3, #0]
    1186:	2b00      	cmp	r3, #0
    1188:	d036      	beq.n	11f8 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    118a:	230b      	movs	r3, #11
    118c:	18fb      	adds	r3, r7, r3
    118e:	781b      	ldrb	r3, [r3, #0]
    1190:	2202      	movs	r2, #2
    1192:	4013      	ands	r3, r2
    1194:	d004      	beq.n	11a0 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1196:	68fb      	ldr	r3, [r7, #12]
    1198:	2202      	movs	r2, #2
    119a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    119c:	231a      	movs	r3, #26
    119e:	e031      	b.n	1204 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    11a0:	230b      	movs	r3, #11
    11a2:	18fb      	adds	r3, r7, r3
    11a4:	781b      	ldrb	r3, [r3, #0]
    11a6:	2204      	movs	r2, #4
    11a8:	4013      	ands	r3, r2
    11aa:	d004      	beq.n	11b6 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    11ac:	68fb      	ldr	r3, [r7, #12]
    11ae:	2204      	movs	r2, #4
    11b0:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    11b2:	231e      	movs	r3, #30
    11b4:	e026      	b.n	1204 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    11b6:	230b      	movs	r3, #11
    11b8:	18fb      	adds	r3, r7, r3
    11ba:	781b      	ldrb	r3, [r3, #0]
    11bc:	2201      	movs	r2, #1
    11be:	4013      	ands	r3, r2
    11c0:	d004      	beq.n	11cc <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    11c2:	68fb      	ldr	r3, [r7, #12]
    11c4:	2201      	movs	r2, #1
    11c6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    11c8:	2313      	movs	r3, #19
    11ca:	e01b      	b.n	1204 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    11cc:	230b      	movs	r3, #11
    11ce:	18fb      	adds	r3, r7, r3
    11d0:	781b      	ldrb	r3, [r3, #0]
    11d2:	2210      	movs	r2, #16
    11d4:	4013      	ands	r3, r2
    11d6:	d004      	beq.n	11e2 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	2210      	movs	r2, #16
    11dc:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    11de:	2342      	movs	r3, #66	; 0x42
    11e0:	e010      	b.n	1204 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    11e2:	230b      	movs	r3, #11
    11e4:	18fb      	adds	r3, r7, r3
    11e6:	781b      	ldrb	r3, [r3, #0]
    11e8:	2220      	movs	r2, #32
    11ea:	4013      	ands	r3, r2
    11ec:	d004      	beq.n	11f8 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    11ee:	68fb      	ldr	r3, [r7, #12]
    11f0:	2220      	movs	r2, #32
    11f2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    11f4:	2341      	movs	r3, #65	; 0x41
    11f6:	e005      	b.n	1204 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    11fc:	b29a      	uxth	r2, r3
    11fe:	683b      	ldr	r3, [r7, #0]
    1200:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    1202:	2300      	movs	r3, #0
}
    1204:	0018      	movs	r0, r3
    1206:	46bd      	mov	sp, r7
    1208:	b004      	add	sp, #16
    120a:	bd80      	pop	{r7, pc}
    120c:	00000b4d 	.word	0x00000b4d

00001210 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1210:	b580      	push	{r7, lr}
    1212:	b08a      	sub	sp, #40	; 0x28
    1214:	af00      	add	r7, sp, #0
    1216:	60f8      	str	r0, [r7, #12]
    1218:	60b9      	str	r1, [r7, #8]
    121a:	1dbb      	adds	r3, r7, #6
    121c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    121e:	1dbb      	adds	r3, r7, #6
    1220:	881b      	ldrh	r3, [r3, #0]
    1222:	2b00      	cmp	r3, #0
    1224:	d101      	bne.n	122a <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    1226:	2317      	movs	r3, #23
    1228:	e07e      	b.n	1328 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    122a:	68fb      	ldr	r3, [r7, #12]
    122c:	79db      	ldrb	r3, [r3, #7]
    122e:	2201      	movs	r2, #1
    1230:	4053      	eors	r3, r2
    1232:	b2db      	uxtb	r3, r3
    1234:	2b00      	cmp	r3, #0
    1236:	d001      	beq.n	123c <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    1238:	231c      	movs	r3, #28
    123a:	e075      	b.n	1328 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    123c:	68fb      	ldr	r3, [r7, #12]
    123e:	681b      	ldr	r3, [r3, #0]
    1240:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1242:	68fb      	ldr	r3, [r7, #12]
    1244:	0018      	movs	r0, r3
    1246:	4b3a      	ldr	r3, [pc, #232]	; (1330 <usart_write_buffer_wait+0x120>)
    1248:	4798      	blx	r3

	uint16_t tx_pos = 0;
    124a:	2326      	movs	r3, #38	; 0x26
    124c:	18fb      	adds	r3, r7, r3
    124e:	2200      	movs	r2, #0
    1250:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
    1252:	e048      	b.n	12e6 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1254:	2300      	movs	r3, #0
    1256:	623b      	str	r3, [r7, #32]
    1258:	e00f      	b.n	127a <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    125a:	697b      	ldr	r3, [r7, #20]
    125c:	7e1b      	ldrb	r3, [r3, #24]
    125e:	b2db      	uxtb	r3, r3
    1260:	001a      	movs	r2, r3
    1262:	2301      	movs	r3, #1
    1264:	4013      	ands	r3, r2
    1266:	d10d      	bne.n	1284 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
    1268:	6a3b      	ldr	r3, [r7, #32]
    126a:	4a32      	ldr	r2, [pc, #200]	; (1334 <usart_write_buffer_wait+0x124>)
    126c:	4293      	cmp	r3, r2
    126e:	d101      	bne.n	1274 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
    1270:	2312      	movs	r3, #18
    1272:	e059      	b.n	1328 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1274:	6a3b      	ldr	r3, [r7, #32]
    1276:	3301      	adds	r3, #1
    1278:	623b      	str	r3, [r7, #32]
    127a:	6a3b      	ldr	r3, [r7, #32]
    127c:	4a2d      	ldr	r2, [pc, #180]	; (1334 <usart_write_buffer_wait+0x124>)
    127e:	4293      	cmp	r3, r2
    1280:	d9eb      	bls.n	125a <usart_write_buffer_wait+0x4a>
    1282:	e000      	b.n	1286 <usart_write_buffer_wait+0x76>
				break;
    1284:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1286:	2326      	movs	r3, #38	; 0x26
    1288:	18fb      	adds	r3, r7, r3
    128a:	881b      	ldrh	r3, [r3, #0]
    128c:	2226      	movs	r2, #38	; 0x26
    128e:	18ba      	adds	r2, r7, r2
    1290:	1c59      	adds	r1, r3, #1
    1292:	8011      	strh	r1, [r2, #0]
    1294:	001a      	movs	r2, r3
    1296:	68bb      	ldr	r3, [r7, #8]
    1298:	189b      	adds	r3, r3, r2
    129a:	781a      	ldrb	r2, [r3, #0]
    129c:	231e      	movs	r3, #30
    129e:	18fb      	adds	r3, r7, r3
    12a0:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    12a2:	68fb      	ldr	r3, [r7, #12]
    12a4:	795b      	ldrb	r3, [r3, #5]
    12a6:	2b01      	cmp	r3, #1
    12a8:	d115      	bne.n	12d6 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    12aa:	2326      	movs	r3, #38	; 0x26
    12ac:	18fb      	adds	r3, r7, r3
    12ae:	881b      	ldrh	r3, [r3, #0]
    12b0:	2226      	movs	r2, #38	; 0x26
    12b2:	18ba      	adds	r2, r7, r2
    12b4:	1c59      	adds	r1, r3, #1
    12b6:	8011      	strh	r1, [r2, #0]
    12b8:	001a      	movs	r2, r3
    12ba:	68bb      	ldr	r3, [r7, #8]
    12bc:	189b      	adds	r3, r3, r2
    12be:	781b      	ldrb	r3, [r3, #0]
    12c0:	021b      	lsls	r3, r3, #8
    12c2:	b21a      	sxth	r2, r3
    12c4:	231e      	movs	r3, #30
    12c6:	18fb      	adds	r3, r7, r3
    12c8:	2100      	movs	r1, #0
    12ca:	5e5b      	ldrsh	r3, [r3, r1]
    12cc:	4313      	orrs	r3, r2
    12ce:	b21a      	sxth	r2, r3
    12d0:	231e      	movs	r3, #30
    12d2:	18fb      	adds	r3, r7, r3
    12d4:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    12d6:	231e      	movs	r3, #30
    12d8:	18fb      	adds	r3, r7, r3
    12da:	881a      	ldrh	r2, [r3, #0]
    12dc:	68fb      	ldr	r3, [r7, #12]
    12de:	0011      	movs	r1, r2
    12e0:	0018      	movs	r0, r3
    12e2:	4b15      	ldr	r3, [pc, #84]	; (1338 <usart_write_buffer_wait+0x128>)
    12e4:	4798      	blx	r3
	while (length--) {
    12e6:	1dbb      	adds	r3, r7, #6
    12e8:	881b      	ldrh	r3, [r3, #0]
    12ea:	1dba      	adds	r2, r7, #6
    12ec:	1e59      	subs	r1, r3, #1
    12ee:	8011      	strh	r1, [r2, #0]
    12f0:	2b00      	cmp	r3, #0
    12f2:	d1af      	bne.n	1254 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    12f4:	2300      	movs	r3, #0
    12f6:	61bb      	str	r3, [r7, #24]
    12f8:	e00f      	b.n	131a <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    12fa:	697b      	ldr	r3, [r7, #20]
    12fc:	7e1b      	ldrb	r3, [r3, #24]
    12fe:	b2db      	uxtb	r3, r3
    1300:	001a      	movs	r2, r3
    1302:	2302      	movs	r3, #2
    1304:	4013      	ands	r3, r2
    1306:	d10d      	bne.n	1324 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
    1308:	69bb      	ldr	r3, [r7, #24]
    130a:	4a0a      	ldr	r2, [pc, #40]	; (1334 <usart_write_buffer_wait+0x124>)
    130c:	4293      	cmp	r3, r2
    130e:	d101      	bne.n	1314 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
    1310:	2312      	movs	r3, #18
    1312:	e009      	b.n	1328 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1314:	69bb      	ldr	r3, [r7, #24]
    1316:	3301      	adds	r3, #1
    1318:	61bb      	str	r3, [r7, #24]
    131a:	69bb      	ldr	r3, [r7, #24]
    131c:	4a05      	ldr	r2, [pc, #20]	; (1334 <usart_write_buffer_wait+0x124>)
    131e:	4293      	cmp	r3, r2
    1320:	d9eb      	bls.n	12fa <usart_write_buffer_wait+0xea>
    1322:	e000      	b.n	1326 <usart_write_buffer_wait+0x116>
			break;
    1324:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
    1326:	2300      	movs	r3, #0
}
    1328:	0018      	movs	r0, r3
    132a:	46bd      	mov	sp, r7
    132c:	b00a      	add	sp, #40	; 0x28
    132e:	bd80      	pop	{r7, pc}
    1330:	00000b4d 	.word	0x00000b4d
    1334:	0000ffff 	.word	0x0000ffff
    1338:	000010c1 	.word	0x000010c1

0000133c <usart_is_syncing>:
{
    133c:	b580      	push	{r7, lr}
    133e:	b084      	sub	sp, #16
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	681b      	ldr	r3, [r3, #0]
    1348:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    134a:	68fb      	ldr	r3, [r7, #12]
    134c:	69db      	ldr	r3, [r3, #28]
    134e:	1e5a      	subs	r2, r3, #1
    1350:	4193      	sbcs	r3, r2
    1352:	b2db      	uxtb	r3, r3
}
    1354:	0018      	movs	r0, r3
    1356:	46bd      	mov	sp, r7
    1358:	b004      	add	sp, #16
    135a:	bd80      	pop	{r7, pc}

0000135c <_usart_wait_for_sync>:
{
    135c:	b580      	push	{r7, lr}
    135e:	b082      	sub	sp, #8
    1360:	af00      	add	r7, sp, #0
    1362:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    1364:	46c0      	nop			; (mov r8, r8)
    1366:	687b      	ldr	r3, [r7, #4]
    1368:	0018      	movs	r0, r3
    136a:	4b04      	ldr	r3, [pc, #16]	; (137c <_usart_wait_for_sync+0x20>)
    136c:	4798      	blx	r3
    136e:	1e03      	subs	r3, r0, #0
    1370:	d1f9      	bne.n	1366 <_usart_wait_for_sync+0xa>
}
    1372:	46c0      	nop			; (mov r8, r8)
    1374:	46bd      	mov	sp, r7
    1376:	b002      	add	sp, #8
    1378:	bd80      	pop	{r7, pc}
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	0000133d 	.word	0x0000133d

00001380 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1380:	b580      	push	{r7, lr}
    1382:	b088      	sub	sp, #32
    1384:	af00      	add	r7, sp, #0
    1386:	0002      	movs	r2, r0
    1388:	1dfb      	adds	r3, r7, #7
    138a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    138c:	1dfb      	adds	r3, r7, #7
    138e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    1390:	4ba3      	ldr	r3, [pc, #652]	; (1620 <_usart_interrupt_handler+0x2a0>)
    1392:	0092      	lsls	r2, r2, #2
    1394:	58d3      	ldr	r3, [r2, r3]
    1396:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1398:	69bb      	ldr	r3, [r7, #24]
    139a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    139c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    139e:	69bb      	ldr	r3, [r7, #24]
    13a0:	0018      	movs	r0, r3
    13a2:	4ba0      	ldr	r3, [pc, #640]	; (1624 <_usart_interrupt_handler+0x2a4>)
    13a4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    13a6:	697b      	ldr	r3, [r7, #20]
    13a8:	7e1b      	ldrb	r3, [r3, #24]
    13aa:	b2da      	uxtb	r2, r3
    13ac:	2312      	movs	r3, #18
    13ae:	18fb      	adds	r3, r7, r3
    13b0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    13b2:	697b      	ldr	r3, [r7, #20]
    13b4:	7d9b      	ldrb	r3, [r3, #22]
    13b6:	b2db      	uxtb	r3, r3
    13b8:	b29a      	uxth	r2, r3
    13ba:	2312      	movs	r3, #18
    13bc:	18fb      	adds	r3, r7, r3
    13be:	2112      	movs	r1, #18
    13c0:	1879      	adds	r1, r7, r1
    13c2:	8809      	ldrh	r1, [r1, #0]
    13c4:	400a      	ands	r2, r1
    13c6:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    13c8:	69bb      	ldr	r3, [r7, #24]
    13ca:	2230      	movs	r2, #48	; 0x30
    13cc:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    13ce:	69ba      	ldr	r2, [r7, #24]
    13d0:	2131      	movs	r1, #49	; 0x31
    13d2:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    13d4:	4013      	ands	r3, r2
    13d6:	b2da      	uxtb	r2, r3
    13d8:	2310      	movs	r3, #16
    13da:	18fb      	adds	r3, r7, r3
    13dc:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    13de:	2312      	movs	r3, #18
    13e0:	18fb      	adds	r3, r7, r3
    13e2:	881b      	ldrh	r3, [r3, #0]
    13e4:	2201      	movs	r2, #1
    13e6:	4013      	ands	r3, r2
    13e8:	d044      	beq.n	1474 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    13ea:	69bb      	ldr	r3, [r7, #24]
    13ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    13ee:	b29b      	uxth	r3, r3
    13f0:	2b00      	cmp	r3, #0
    13f2:	d03c      	beq.n	146e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    13f4:	69bb      	ldr	r3, [r7, #24]
    13f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    13f8:	781b      	ldrb	r3, [r3, #0]
    13fa:	b2da      	uxtb	r2, r3
    13fc:	231c      	movs	r3, #28
    13fe:	18fb      	adds	r3, r7, r3
    1400:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1402:	69bb      	ldr	r3, [r7, #24]
    1404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1406:	1c5a      	adds	r2, r3, #1
    1408:	69bb      	ldr	r3, [r7, #24]
    140a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    140c:	69bb      	ldr	r3, [r7, #24]
    140e:	795b      	ldrb	r3, [r3, #5]
    1410:	2b01      	cmp	r3, #1
    1412:	d113      	bne.n	143c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1414:	69bb      	ldr	r3, [r7, #24]
    1416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1418:	781b      	ldrb	r3, [r3, #0]
    141a:	b2db      	uxtb	r3, r3
    141c:	021b      	lsls	r3, r3, #8
    141e:	b21a      	sxth	r2, r3
    1420:	231c      	movs	r3, #28
    1422:	18fb      	adds	r3, r7, r3
    1424:	2100      	movs	r1, #0
    1426:	5e5b      	ldrsh	r3, [r3, r1]
    1428:	4313      	orrs	r3, r2
    142a:	b21a      	sxth	r2, r3
    142c:	231c      	movs	r3, #28
    142e:	18fb      	adds	r3, r7, r3
    1430:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1432:	69bb      	ldr	r3, [r7, #24]
    1434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1436:	1c5a      	adds	r2, r3, #1
    1438:	69bb      	ldr	r3, [r7, #24]
    143a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    143c:	231c      	movs	r3, #28
    143e:	18fb      	adds	r3, r7, r3
    1440:	881b      	ldrh	r3, [r3, #0]
    1442:	05db      	lsls	r3, r3, #23
    1444:	0ddb      	lsrs	r3, r3, #23
    1446:	b29a      	uxth	r2, r3
    1448:	697b      	ldr	r3, [r7, #20]
    144a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    144c:	69bb      	ldr	r3, [r7, #24]
    144e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1450:	b29b      	uxth	r3, r3
    1452:	3b01      	subs	r3, #1
    1454:	b29b      	uxth	r3, r3
    1456:	69ba      	ldr	r2, [r7, #24]
    1458:	1c19      	adds	r1, r3, #0
    145a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    145c:	2b00      	cmp	r3, #0
    145e:	d109      	bne.n	1474 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1460:	697b      	ldr	r3, [r7, #20]
    1462:	2201      	movs	r2, #1
    1464:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1466:	697b      	ldr	r3, [r7, #20]
    1468:	2202      	movs	r2, #2
    146a:	759a      	strb	r2, [r3, #22]
    146c:	e002      	b.n	1474 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    146e:	697b      	ldr	r3, [r7, #20]
    1470:	2201      	movs	r2, #1
    1472:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1474:	2312      	movs	r3, #18
    1476:	18fb      	adds	r3, r7, r3
    1478:	881b      	ldrh	r3, [r3, #0]
    147a:	2202      	movs	r2, #2
    147c:	4013      	ands	r3, r2
    147e:	d011      	beq.n	14a4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1480:	697b      	ldr	r3, [r7, #20]
    1482:	2202      	movs	r2, #2
    1484:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    1486:	69bb      	ldr	r3, [r7, #24]
    1488:	2233      	movs	r2, #51	; 0x33
    148a:	2100      	movs	r1, #0
    148c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    148e:	2310      	movs	r3, #16
    1490:	18fb      	adds	r3, r7, r3
    1492:	881b      	ldrh	r3, [r3, #0]
    1494:	2201      	movs	r2, #1
    1496:	4013      	ands	r3, r2
    1498:	d004      	beq.n	14a4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    149a:	69bb      	ldr	r3, [r7, #24]
    149c:	68db      	ldr	r3, [r3, #12]
    149e:	69ba      	ldr	r2, [r7, #24]
    14a0:	0010      	movs	r0, r2
    14a2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    14a4:	2312      	movs	r3, #18
    14a6:	18fb      	adds	r3, r7, r3
    14a8:	881b      	ldrh	r3, [r3, #0]
    14aa:	2204      	movs	r2, #4
    14ac:	4013      	ands	r3, r2
    14ae:	d100      	bne.n	14b2 <_usart_interrupt_handler+0x132>
    14b0:	e0bd      	b.n	162e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    14b2:	69bb      	ldr	r3, [r7, #24]
    14b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    14b6:	b29b      	uxth	r3, r3
    14b8:	2b00      	cmp	r3, #0
    14ba:	d100      	bne.n	14be <_usart_interrupt_handler+0x13e>
    14bc:	e0b4      	b.n	1628 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    14be:	697b      	ldr	r3, [r7, #20]
    14c0:	8b5b      	ldrh	r3, [r3, #26]
    14c2:	b29b      	uxth	r3, r3
    14c4:	b2da      	uxtb	r2, r3
    14c6:	231f      	movs	r3, #31
    14c8:	18fb      	adds	r3, r7, r3
    14ca:	213f      	movs	r1, #63	; 0x3f
    14cc:	400a      	ands	r2, r1
    14ce:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    14d0:	231f      	movs	r3, #31
    14d2:	18fb      	adds	r3, r7, r3
    14d4:	781b      	ldrb	r3, [r3, #0]
    14d6:	2208      	movs	r2, #8
    14d8:	4013      	ands	r3, r2
    14da:	d007      	beq.n	14ec <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    14dc:	231f      	movs	r3, #31
    14de:	18fb      	adds	r3, r7, r3
    14e0:	221f      	movs	r2, #31
    14e2:	18ba      	adds	r2, r7, r2
    14e4:	7812      	ldrb	r2, [r2, #0]
    14e6:	2108      	movs	r1, #8
    14e8:	438a      	bics	r2, r1
    14ea:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    14ec:	231f      	movs	r3, #31
    14ee:	18fb      	adds	r3, r7, r3
    14f0:	781b      	ldrb	r3, [r3, #0]
    14f2:	2b00      	cmp	r3, #0
    14f4:	d050      	beq.n	1598 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    14f6:	231f      	movs	r3, #31
    14f8:	18fb      	adds	r3, r7, r3
    14fa:	781b      	ldrb	r3, [r3, #0]
    14fc:	2202      	movs	r2, #2
    14fe:	4013      	ands	r3, r2
    1500:	d007      	beq.n	1512 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1502:	69bb      	ldr	r3, [r7, #24]
    1504:	2232      	movs	r2, #50	; 0x32
    1506:	211a      	movs	r1, #26
    1508:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    150a:	697b      	ldr	r3, [r7, #20]
    150c:	2202      	movs	r2, #2
    150e:	835a      	strh	r2, [r3, #26]
    1510:	e036      	b.n	1580 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1512:	231f      	movs	r3, #31
    1514:	18fb      	adds	r3, r7, r3
    1516:	781b      	ldrb	r3, [r3, #0]
    1518:	2204      	movs	r2, #4
    151a:	4013      	ands	r3, r2
    151c:	d007      	beq.n	152e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    151e:	69bb      	ldr	r3, [r7, #24]
    1520:	2232      	movs	r2, #50	; 0x32
    1522:	211e      	movs	r1, #30
    1524:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1526:	697b      	ldr	r3, [r7, #20]
    1528:	2204      	movs	r2, #4
    152a:	835a      	strh	r2, [r3, #26]
    152c:	e028      	b.n	1580 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    152e:	231f      	movs	r3, #31
    1530:	18fb      	adds	r3, r7, r3
    1532:	781b      	ldrb	r3, [r3, #0]
    1534:	2201      	movs	r2, #1
    1536:	4013      	ands	r3, r2
    1538:	d007      	beq.n	154a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    153a:	69bb      	ldr	r3, [r7, #24]
    153c:	2232      	movs	r2, #50	; 0x32
    153e:	2113      	movs	r1, #19
    1540:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1542:	697b      	ldr	r3, [r7, #20]
    1544:	2201      	movs	r2, #1
    1546:	835a      	strh	r2, [r3, #26]
    1548:	e01a      	b.n	1580 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    154a:	231f      	movs	r3, #31
    154c:	18fb      	adds	r3, r7, r3
    154e:	781b      	ldrb	r3, [r3, #0]
    1550:	2210      	movs	r2, #16
    1552:	4013      	ands	r3, r2
    1554:	d007      	beq.n	1566 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1556:	69bb      	ldr	r3, [r7, #24]
    1558:	2232      	movs	r2, #50	; 0x32
    155a:	2142      	movs	r1, #66	; 0x42
    155c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    155e:	697b      	ldr	r3, [r7, #20]
    1560:	2210      	movs	r2, #16
    1562:	835a      	strh	r2, [r3, #26]
    1564:	e00c      	b.n	1580 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1566:	231f      	movs	r3, #31
    1568:	18fb      	adds	r3, r7, r3
    156a:	781b      	ldrb	r3, [r3, #0]
    156c:	2220      	movs	r2, #32
    156e:	4013      	ands	r3, r2
    1570:	d006      	beq.n	1580 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1572:	69bb      	ldr	r3, [r7, #24]
    1574:	2232      	movs	r2, #50	; 0x32
    1576:	2141      	movs	r1, #65	; 0x41
    1578:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    157a:	697b      	ldr	r3, [r7, #20]
    157c:	2220      	movs	r2, #32
    157e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    1580:	2310      	movs	r3, #16
    1582:	18fb      	adds	r3, r7, r3
    1584:	881b      	ldrh	r3, [r3, #0]
    1586:	2204      	movs	r2, #4
    1588:	4013      	ands	r3, r2
				if (callback_status
    158a:	d050      	beq.n	162e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    158c:	69bb      	ldr	r3, [r7, #24]
    158e:	695b      	ldr	r3, [r3, #20]
    1590:	69ba      	ldr	r2, [r7, #24]
    1592:	0010      	movs	r0, r2
    1594:	4798      	blx	r3
    1596:	e04a      	b.n	162e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1598:	697b      	ldr	r3, [r7, #20]
    159a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    159c:	b29a      	uxth	r2, r3
    159e:	230e      	movs	r3, #14
    15a0:	18fb      	adds	r3, r7, r3
    15a2:	05d2      	lsls	r2, r2, #23
    15a4:	0dd2      	lsrs	r2, r2, #23
    15a6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    15a8:	69bb      	ldr	r3, [r7, #24]
    15aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    15ac:	220e      	movs	r2, #14
    15ae:	18ba      	adds	r2, r7, r2
    15b0:	8812      	ldrh	r2, [r2, #0]
    15b2:	b2d2      	uxtb	r2, r2
    15b4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    15b6:	69bb      	ldr	r3, [r7, #24]
    15b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    15ba:	1c5a      	adds	r2, r3, #1
    15bc:	69bb      	ldr	r3, [r7, #24]
    15be:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    15c0:	69bb      	ldr	r3, [r7, #24]
    15c2:	795b      	ldrb	r3, [r3, #5]
    15c4:	2b01      	cmp	r3, #1
    15c6:	d10d      	bne.n	15e4 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    15c8:	69bb      	ldr	r3, [r7, #24]
    15ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    15cc:	220e      	movs	r2, #14
    15ce:	18ba      	adds	r2, r7, r2
    15d0:	8812      	ldrh	r2, [r2, #0]
    15d2:	0a12      	lsrs	r2, r2, #8
    15d4:	b292      	uxth	r2, r2
    15d6:	b2d2      	uxtb	r2, r2
    15d8:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    15da:	69bb      	ldr	r3, [r7, #24]
    15dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    15de:	1c5a      	adds	r2, r3, #1
    15e0:	69bb      	ldr	r3, [r7, #24]
    15e2:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    15e4:	69bb      	ldr	r3, [r7, #24]
    15e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    15e8:	b29b      	uxth	r3, r3
    15ea:	3b01      	subs	r3, #1
    15ec:	b29b      	uxth	r3, r3
    15ee:	69ba      	ldr	r2, [r7, #24]
    15f0:	1c19      	adds	r1, r3, #0
    15f2:	8591      	strh	r1, [r2, #44]	; 0x2c
    15f4:	2b00      	cmp	r3, #0
    15f6:	d11a      	bne.n	162e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    15f8:	697b      	ldr	r3, [r7, #20]
    15fa:	2204      	movs	r2, #4
    15fc:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    15fe:	69bb      	ldr	r3, [r7, #24]
    1600:	2232      	movs	r2, #50	; 0x32
    1602:	2100      	movs	r1, #0
    1604:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    1606:	2310      	movs	r3, #16
    1608:	18fb      	adds	r3, r7, r3
    160a:	881b      	ldrh	r3, [r3, #0]
    160c:	2202      	movs	r2, #2
    160e:	4013      	ands	r3, r2
					if (callback_status
    1610:	d00d      	beq.n	162e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1612:	69bb      	ldr	r3, [r7, #24]
    1614:	691b      	ldr	r3, [r3, #16]
    1616:	69ba      	ldr	r2, [r7, #24]
    1618:	0010      	movs	r0, r2
    161a:	4798      	blx	r3
    161c:	e007      	b.n	162e <_usart_interrupt_handler+0x2ae>
    161e:	46c0      	nop			; (mov r8, r8)
    1620:	20000494 	.word	0x20000494
    1624:	0000135d 	.word	0x0000135d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1628:	697b      	ldr	r3, [r7, #20]
    162a:	2204      	movs	r2, #4
    162c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    162e:	2312      	movs	r3, #18
    1630:	18fb      	adds	r3, r7, r3
    1632:	881b      	ldrh	r3, [r3, #0]
    1634:	2210      	movs	r2, #16
    1636:	4013      	ands	r3, r2
    1638:	d010      	beq.n	165c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    163a:	697b      	ldr	r3, [r7, #20]
    163c:	2210      	movs	r2, #16
    163e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1640:	697b      	ldr	r3, [r7, #20]
    1642:	2210      	movs	r2, #16
    1644:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1646:	2310      	movs	r3, #16
    1648:	18fb      	adds	r3, r7, r3
    164a:	881b      	ldrh	r3, [r3, #0]
    164c:	2210      	movs	r2, #16
    164e:	4013      	ands	r3, r2
    1650:	d004      	beq.n	165c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1652:	69bb      	ldr	r3, [r7, #24]
    1654:	69db      	ldr	r3, [r3, #28]
    1656:	69ba      	ldr	r2, [r7, #24]
    1658:	0010      	movs	r0, r2
    165a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    165c:	2312      	movs	r3, #18
    165e:	18fb      	adds	r3, r7, r3
    1660:	881b      	ldrh	r3, [r3, #0]
    1662:	2220      	movs	r2, #32
    1664:	4013      	ands	r3, r2
    1666:	d010      	beq.n	168a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1668:	697b      	ldr	r3, [r7, #20]
    166a:	2220      	movs	r2, #32
    166c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    166e:	697b      	ldr	r3, [r7, #20]
    1670:	2220      	movs	r2, #32
    1672:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1674:	2310      	movs	r3, #16
    1676:	18fb      	adds	r3, r7, r3
    1678:	881b      	ldrh	r3, [r3, #0]
    167a:	2208      	movs	r2, #8
    167c:	4013      	ands	r3, r2
    167e:	d004      	beq.n	168a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1680:	69bb      	ldr	r3, [r7, #24]
    1682:	699b      	ldr	r3, [r3, #24]
    1684:	69ba      	ldr	r2, [r7, #24]
    1686:	0010      	movs	r0, r2
    1688:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    168a:	2312      	movs	r3, #18
    168c:	18fb      	adds	r3, r7, r3
    168e:	881b      	ldrh	r3, [r3, #0]
    1690:	2208      	movs	r2, #8
    1692:	4013      	ands	r3, r2
    1694:	d010      	beq.n	16b8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1696:	697b      	ldr	r3, [r7, #20]
    1698:	2208      	movs	r2, #8
    169a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    169c:	697b      	ldr	r3, [r7, #20]
    169e:	2208      	movs	r2, #8
    16a0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    16a2:	2310      	movs	r3, #16
    16a4:	18fb      	adds	r3, r7, r3
    16a6:	881b      	ldrh	r3, [r3, #0]
    16a8:	2220      	movs	r2, #32
    16aa:	4013      	ands	r3, r2
    16ac:	d004      	beq.n	16b8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    16ae:	69bb      	ldr	r3, [r7, #24]
    16b0:	6a1b      	ldr	r3, [r3, #32]
    16b2:	69ba      	ldr	r2, [r7, #24]
    16b4:	0010      	movs	r0, r2
    16b6:	4798      	blx	r3
		}
	}
#endif
}
    16b8:	46c0      	nop			; (mov r8, r8)
    16ba:	46bd      	mov	sp, r7
    16bc:	b008      	add	sp, #32
    16be:	bd80      	pop	{r7, pc}

000016c0 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    16c0:	b580      	push	{r7, lr}
    16c2:	b082      	sub	sp, #8
    16c4:	af00      	add	r7, sp, #0
    16c6:	0002      	movs	r2, r0
    16c8:	1dfb      	adds	r3, r7, #7
    16ca:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    16cc:	46c0      	nop			; (mov r8, r8)
    16ce:	46bd      	mov	sp, r7
    16d0:	b002      	add	sp, #8
    16d2:	bd80      	pop	{r7, pc}

000016d4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    16d4:	b580      	push	{r7, lr}
    16d6:	b084      	sub	sp, #16
    16d8:	af00      	add	r7, sp, #0
    16da:	0002      	movs	r2, r0
    16dc:	6039      	str	r1, [r7, #0]
    16de:	1dfb      	adds	r3, r7, #7
    16e0:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    16e2:	4b13      	ldr	r3, [pc, #76]	; (1730 <_sercom_set_handler+0x5c>)
    16e4:	781b      	ldrb	r3, [r3, #0]
    16e6:	2201      	movs	r2, #1
    16e8:	4053      	eors	r3, r2
    16ea:	b2db      	uxtb	r3, r3
    16ec:	2b00      	cmp	r3, #0
    16ee:	d015      	beq.n	171c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    16f0:	2300      	movs	r3, #0
    16f2:	60fb      	str	r3, [r7, #12]
    16f4:	e00c      	b.n	1710 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    16f6:	4b0f      	ldr	r3, [pc, #60]	; (1734 <_sercom_set_handler+0x60>)
    16f8:	68fa      	ldr	r2, [r7, #12]
    16fa:	0092      	lsls	r2, r2, #2
    16fc:	490e      	ldr	r1, [pc, #56]	; (1738 <_sercom_set_handler+0x64>)
    16fe:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    1700:	4b0e      	ldr	r3, [pc, #56]	; (173c <_sercom_set_handler+0x68>)
    1702:	68fa      	ldr	r2, [r7, #12]
    1704:	0092      	lsls	r2, r2, #2
    1706:	2100      	movs	r1, #0
    1708:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    170a:	68fb      	ldr	r3, [r7, #12]
    170c:	3301      	adds	r3, #1
    170e:	60fb      	str	r3, [r7, #12]
    1710:	68fb      	ldr	r3, [r7, #12]
    1712:	2b05      	cmp	r3, #5
    1714:	d9ef      	bls.n	16f6 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    1716:	4b06      	ldr	r3, [pc, #24]	; (1730 <_sercom_set_handler+0x5c>)
    1718:	2201      	movs	r2, #1
    171a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    171c:	1dfb      	adds	r3, r7, #7
    171e:	781a      	ldrb	r2, [r3, #0]
    1720:	4b04      	ldr	r3, [pc, #16]	; (1734 <_sercom_set_handler+0x60>)
    1722:	0092      	lsls	r2, r2, #2
    1724:	6839      	ldr	r1, [r7, #0]
    1726:	50d1      	str	r1, [r2, r3]
}
    1728:	46c0      	nop			; (mov r8, r8)
    172a:	46bd      	mov	sp, r7
    172c:	b004      	add	sp, #16
    172e:	bd80      	pop	{r7, pc}
    1730:	2000045a 	.word	0x2000045a
    1734:	2000045c 	.word	0x2000045c
    1738:	000016c1 	.word	0x000016c1
    173c:	20000494 	.word	0x20000494

00001740 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1740:	b590      	push	{r4, r7, lr}
    1742:	b085      	sub	sp, #20
    1744:	af00      	add	r7, sp, #0
    1746:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1748:	2308      	movs	r3, #8
    174a:	18fb      	adds	r3, r7, r3
    174c:	4a0b      	ldr	r2, [pc, #44]	; (177c <_sercom_get_interrupt_vector+0x3c>)
    174e:	6811      	ldr	r1, [r2, #0]
    1750:	6019      	str	r1, [r3, #0]
    1752:	8892      	ldrh	r2, [r2, #4]
    1754:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1756:	230f      	movs	r3, #15
    1758:	18fc      	adds	r4, r7, r3
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	0018      	movs	r0, r3
    175e:	4b08      	ldr	r3, [pc, #32]	; (1780 <_sercom_get_interrupt_vector+0x40>)
    1760:	4798      	blx	r3
    1762:	0003      	movs	r3, r0
    1764:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1766:	230f      	movs	r3, #15
    1768:	18fb      	adds	r3, r7, r3
    176a:	781b      	ldrb	r3, [r3, #0]
    176c:	2208      	movs	r2, #8
    176e:	18ba      	adds	r2, r7, r2
    1770:	5cd3      	ldrb	r3, [r2, r3]
    1772:	b25b      	sxtb	r3, r3
}
    1774:	0018      	movs	r0, r3
    1776:	46bd      	mov	sp, r7
    1778:	b005      	add	sp, #20
    177a:	bd90      	pop	{r4, r7, pc}
    177c:	00002820 	.word	0x00002820
    1780:	00000a21 	.word	0x00000a21

00001784 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1784:	b580      	push	{r7, lr}
    1786:	af00      	add	r7, sp, #0
    1788:	4b03      	ldr	r3, [pc, #12]	; (1798 <SERCOM0_Handler+0x14>)
    178a:	681b      	ldr	r3, [r3, #0]
    178c:	2000      	movs	r0, #0
    178e:	4798      	blx	r3
    1790:	46c0      	nop			; (mov r8, r8)
    1792:	46bd      	mov	sp, r7
    1794:	bd80      	pop	{r7, pc}
    1796:	46c0      	nop			; (mov r8, r8)
    1798:	2000045c 	.word	0x2000045c

0000179c <SERCOM1_Handler>:
    179c:	b580      	push	{r7, lr}
    179e:	af00      	add	r7, sp, #0
    17a0:	4b03      	ldr	r3, [pc, #12]	; (17b0 <SERCOM1_Handler+0x14>)
    17a2:	685b      	ldr	r3, [r3, #4]
    17a4:	2001      	movs	r0, #1
    17a6:	4798      	blx	r3
    17a8:	46c0      	nop			; (mov r8, r8)
    17aa:	46bd      	mov	sp, r7
    17ac:	bd80      	pop	{r7, pc}
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	2000045c 	.word	0x2000045c

000017b4 <SERCOM2_Handler>:
    17b4:	b580      	push	{r7, lr}
    17b6:	af00      	add	r7, sp, #0
    17b8:	4b03      	ldr	r3, [pc, #12]	; (17c8 <SERCOM2_Handler+0x14>)
    17ba:	689b      	ldr	r3, [r3, #8]
    17bc:	2002      	movs	r0, #2
    17be:	4798      	blx	r3
    17c0:	46c0      	nop			; (mov r8, r8)
    17c2:	46bd      	mov	sp, r7
    17c4:	bd80      	pop	{r7, pc}
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	2000045c 	.word	0x2000045c

000017cc <SERCOM3_Handler>:
    17cc:	b580      	push	{r7, lr}
    17ce:	af00      	add	r7, sp, #0
    17d0:	4b03      	ldr	r3, [pc, #12]	; (17e0 <SERCOM3_Handler+0x14>)
    17d2:	68db      	ldr	r3, [r3, #12]
    17d4:	2003      	movs	r0, #3
    17d6:	4798      	blx	r3
    17d8:	46c0      	nop			; (mov r8, r8)
    17da:	46bd      	mov	sp, r7
    17dc:	bd80      	pop	{r7, pc}
    17de:	46c0      	nop			; (mov r8, r8)
    17e0:	2000045c 	.word	0x2000045c

000017e4 <SERCOM4_Handler>:
    17e4:	b580      	push	{r7, lr}
    17e6:	af00      	add	r7, sp, #0
    17e8:	4b03      	ldr	r3, [pc, #12]	; (17f8 <SERCOM4_Handler+0x14>)
    17ea:	691b      	ldr	r3, [r3, #16]
    17ec:	2004      	movs	r0, #4
    17ee:	4798      	blx	r3
    17f0:	46c0      	nop			; (mov r8, r8)
    17f2:	46bd      	mov	sp, r7
    17f4:	bd80      	pop	{r7, pc}
    17f6:	46c0      	nop			; (mov r8, r8)
    17f8:	2000045c 	.word	0x2000045c

000017fc <SERCOM5_Handler>:
    17fc:	b580      	push	{r7, lr}
    17fe:	af00      	add	r7, sp, #0
    1800:	4b03      	ldr	r3, [pc, #12]	; (1810 <SERCOM5_Handler+0x14>)
    1802:	695b      	ldr	r3, [r3, #20]
    1804:	2005      	movs	r0, #5
    1806:	4798      	blx	r3
    1808:	46c0      	nop			; (mov r8, r8)
    180a:	46bd      	mov	sp, r7
    180c:	bd80      	pop	{r7, pc}
    180e:	46c0      	nop			; (mov r8, r8)
    1810:	2000045c 	.word	0x2000045c

00001814 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1814:	b580      	push	{r7, lr}
    1816:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1818:	2000      	movs	r0, #0
    181a:	4b0f      	ldr	r3, [pc, #60]	; (1858 <delay_init+0x44>)
    181c:	4798      	blx	r3
    181e:	0002      	movs	r2, r0
    1820:	4b0e      	ldr	r3, [pc, #56]	; (185c <delay_init+0x48>)
    1822:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    1824:	4b0d      	ldr	r3, [pc, #52]	; (185c <delay_init+0x48>)
    1826:	6818      	ldr	r0, [r3, #0]
    1828:	4b0d      	ldr	r3, [pc, #52]	; (1860 <delay_init+0x4c>)
    182a:	22fa      	movs	r2, #250	; 0xfa
    182c:	0091      	lsls	r1, r2, #2
    182e:	4798      	blx	r3
    1830:	0003      	movs	r3, r0
    1832:	001a      	movs	r2, r3
    1834:	4b09      	ldr	r3, [pc, #36]	; (185c <delay_init+0x48>)
    1836:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1838:	4b08      	ldr	r3, [pc, #32]	; (185c <delay_init+0x48>)
    183a:	6818      	ldr	r0, [r3, #0]
    183c:	4b08      	ldr	r3, [pc, #32]	; (1860 <delay_init+0x4c>)
    183e:	22fa      	movs	r2, #250	; 0xfa
    1840:	0091      	lsls	r1, r2, #2
    1842:	4798      	blx	r3
    1844:	0003      	movs	r3, r0
    1846:	001a      	movs	r2, r3
    1848:	4b06      	ldr	r3, [pc, #24]	; (1864 <delay_init+0x50>)
    184a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    184c:	4b06      	ldr	r3, [pc, #24]	; (1868 <delay_init+0x54>)
    184e:	2205      	movs	r2, #5
    1850:	601a      	str	r2, [r3, #0]
}
    1852:	46c0      	nop			; (mov r8, r8)
    1854:	46bd      	mov	sp, r7
    1856:	bd80      	pop	{r7, pc}
    1858:	00001fa5 	.word	0x00001fa5
    185c:	20000000 	.word	0x20000000
    1860:	000024f1 	.word	0x000024f1
    1864:	20000004 	.word	0x20000004
    1868:	e000e010 	.word	0xe000e010

0000186c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    186c:	b580      	push	{r7, lr}
    186e:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1870:	46c0      	nop			; (mov r8, r8)
    1872:	46bd      	mov	sp, r7
    1874:	bd80      	pop	{r7, pc}
	...

00001878 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    1878:	b580      	push	{r7, lr}
    187a:	b082      	sub	sp, #8
    187c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    187e:	4b10      	ldr	r3, [pc, #64]	; (18c0 <cpu_irq_enter_critical+0x48>)
    1880:	681b      	ldr	r3, [r3, #0]
    1882:	2b00      	cmp	r3, #0
    1884:	d112      	bne.n	18ac <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1886:	f3ef 8310 	mrs	r3, PRIMASK
    188a:	607b      	str	r3, [r7, #4]
  return(result);
    188c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    188e:	2b00      	cmp	r3, #0
    1890:	d109      	bne.n	18a6 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    1892:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1894:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1898:	4b0a      	ldr	r3, [pc, #40]	; (18c4 <cpu_irq_enter_critical+0x4c>)
    189a:	2200      	movs	r2, #0
    189c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    189e:	4b0a      	ldr	r3, [pc, #40]	; (18c8 <cpu_irq_enter_critical+0x50>)
    18a0:	2201      	movs	r2, #1
    18a2:	701a      	strb	r2, [r3, #0]
    18a4:	e002      	b.n	18ac <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    18a6:	4b08      	ldr	r3, [pc, #32]	; (18c8 <cpu_irq_enter_critical+0x50>)
    18a8:	2200      	movs	r2, #0
    18aa:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    18ac:	4b04      	ldr	r3, [pc, #16]	; (18c0 <cpu_irq_enter_critical+0x48>)
    18ae:	681b      	ldr	r3, [r3, #0]
    18b0:	1c5a      	adds	r2, r3, #1
    18b2:	4b03      	ldr	r3, [pc, #12]	; (18c0 <cpu_irq_enter_critical+0x48>)
    18b4:	601a      	str	r2, [r3, #0]
}
    18b6:	46c0      	nop			; (mov r8, r8)
    18b8:	46bd      	mov	sp, r7
    18ba:	b002      	add	sp, #8
    18bc:	bd80      	pop	{r7, pc}
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	20000474 	.word	0x20000474
    18c4:	20000008 	.word	0x20000008
    18c8:	20000478 	.word	0x20000478

000018cc <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    18cc:	b580      	push	{r7, lr}
    18ce:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    18d0:	4b0b      	ldr	r3, [pc, #44]	; (1900 <cpu_irq_leave_critical+0x34>)
    18d2:	681b      	ldr	r3, [r3, #0]
    18d4:	1e5a      	subs	r2, r3, #1
    18d6:	4b0a      	ldr	r3, [pc, #40]	; (1900 <cpu_irq_leave_critical+0x34>)
    18d8:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    18da:	4b09      	ldr	r3, [pc, #36]	; (1900 <cpu_irq_leave_critical+0x34>)
    18dc:	681b      	ldr	r3, [r3, #0]
    18de:	2b00      	cmp	r3, #0
    18e0:	d10a      	bne.n	18f8 <cpu_irq_leave_critical+0x2c>
    18e2:	4b08      	ldr	r3, [pc, #32]	; (1904 <cpu_irq_leave_critical+0x38>)
    18e4:	781b      	ldrb	r3, [r3, #0]
    18e6:	b2db      	uxtb	r3, r3
    18e8:	2b00      	cmp	r3, #0
    18ea:	d005      	beq.n	18f8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    18ec:	4b06      	ldr	r3, [pc, #24]	; (1908 <cpu_irq_leave_critical+0x3c>)
    18ee:	2201      	movs	r2, #1
    18f0:	701a      	strb	r2, [r3, #0]
    18f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    18f6:	b662      	cpsie	i
	}
}
    18f8:	46c0      	nop			; (mov r8, r8)
    18fa:	46bd      	mov	sp, r7
    18fc:	bd80      	pop	{r7, pc}
    18fe:	46c0      	nop			; (mov r8, r8)
    1900:	20000474 	.word	0x20000474
    1904:	20000478 	.word	0x20000478
    1908:	20000008 	.word	0x20000008

0000190c <system_gclk_gen_get_config_defaults>:
{
    190c:	b580      	push	{r7, lr}
    190e:	b082      	sub	sp, #8
    1910:	af00      	add	r7, sp, #0
    1912:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    1914:	687b      	ldr	r3, [r7, #4]
    1916:	2201      	movs	r2, #1
    1918:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    191a:	687b      	ldr	r3, [r7, #4]
    191c:	2200      	movs	r2, #0
    191e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1920:	687b      	ldr	r3, [r7, #4]
    1922:	2206      	movs	r2, #6
    1924:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    1926:	687b      	ldr	r3, [r7, #4]
    1928:	2200      	movs	r2, #0
    192a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    192c:	687b      	ldr	r3, [r7, #4]
    192e:	2200      	movs	r2, #0
    1930:	725a      	strb	r2, [r3, #9]
}
    1932:	46c0      	nop			; (mov r8, r8)
    1934:	46bd      	mov	sp, r7
    1936:	b002      	add	sp, #8
    1938:	bd80      	pop	{r7, pc}

0000193a <system_clock_source_osc8m_get_config_defaults>:
{
    193a:	b580      	push	{r7, lr}
    193c:	b082      	sub	sp, #8
    193e:	af00      	add	r7, sp, #0
    1940:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    1942:	687b      	ldr	r3, [r7, #4]
    1944:	2203      	movs	r2, #3
    1946:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    1948:	687b      	ldr	r3, [r7, #4]
    194a:	2200      	movs	r2, #0
    194c:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    194e:	687b      	ldr	r3, [r7, #4]
    1950:	2201      	movs	r2, #1
    1952:	709a      	strb	r2, [r3, #2]
}
    1954:	46c0      	nop			; (mov r8, r8)
    1956:	46bd      	mov	sp, r7
    1958:	b002      	add	sp, #8
    195a:	bd80      	pop	{r7, pc}

0000195c <system_cpu_clock_set_divider>:
{
    195c:	b580      	push	{r7, lr}
    195e:	b082      	sub	sp, #8
    1960:	af00      	add	r7, sp, #0
    1962:	0002      	movs	r2, r0
    1964:	1dfb      	adds	r3, r7, #7
    1966:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    1968:	4a03      	ldr	r2, [pc, #12]	; (1978 <system_cpu_clock_set_divider+0x1c>)
    196a:	1dfb      	adds	r3, r7, #7
    196c:	781b      	ldrb	r3, [r3, #0]
    196e:	7213      	strb	r3, [r2, #8]
}
    1970:	46c0      	nop			; (mov r8, r8)
    1972:	46bd      	mov	sp, r7
    1974:	b002      	add	sp, #8
    1976:	bd80      	pop	{r7, pc}
    1978:	40000400 	.word	0x40000400

0000197c <system_apb_clock_set_divider>:
{
    197c:	b580      	push	{r7, lr}
    197e:	b082      	sub	sp, #8
    1980:	af00      	add	r7, sp, #0
    1982:	0002      	movs	r2, r0
    1984:	1dfb      	adds	r3, r7, #7
    1986:	701a      	strb	r2, [r3, #0]
    1988:	1dbb      	adds	r3, r7, #6
    198a:	1c0a      	adds	r2, r1, #0
    198c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    198e:	1dfb      	adds	r3, r7, #7
    1990:	781b      	ldrb	r3, [r3, #0]
    1992:	2b01      	cmp	r3, #1
    1994:	d008      	beq.n	19a8 <system_apb_clock_set_divider+0x2c>
    1996:	2b02      	cmp	r3, #2
    1998:	d00b      	beq.n	19b2 <system_apb_clock_set_divider+0x36>
    199a:	2b00      	cmp	r3, #0
    199c:	d10e      	bne.n	19bc <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    199e:	4a0b      	ldr	r2, [pc, #44]	; (19cc <system_apb_clock_set_divider+0x50>)
    19a0:	1dbb      	adds	r3, r7, #6
    19a2:	781b      	ldrb	r3, [r3, #0]
    19a4:	7253      	strb	r3, [r2, #9]
			break;
    19a6:	e00b      	b.n	19c0 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    19a8:	4a08      	ldr	r2, [pc, #32]	; (19cc <system_apb_clock_set_divider+0x50>)
    19aa:	1dbb      	adds	r3, r7, #6
    19ac:	781b      	ldrb	r3, [r3, #0]
    19ae:	7293      	strb	r3, [r2, #10]
			break;
    19b0:	e006      	b.n	19c0 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    19b2:	4a06      	ldr	r2, [pc, #24]	; (19cc <system_apb_clock_set_divider+0x50>)
    19b4:	1dbb      	adds	r3, r7, #6
    19b6:	781b      	ldrb	r3, [r3, #0]
    19b8:	72d3      	strb	r3, [r2, #11]
			break;
    19ba:	e001      	b.n	19c0 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    19bc:	2317      	movs	r3, #23
    19be:	e000      	b.n	19c2 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    19c0:	2300      	movs	r3, #0
}
    19c2:	0018      	movs	r0, r3
    19c4:	46bd      	mov	sp, r7
    19c6:	b002      	add	sp, #8
    19c8:	bd80      	pop	{r7, pc}
    19ca:	46c0      	nop			; (mov r8, r8)
    19cc:	40000400 	.word	0x40000400

000019d0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    19d0:	b580      	push	{r7, lr}
    19d2:	b082      	sub	sp, #8
    19d4:	af00      	add	r7, sp, #0
    19d6:	0002      	movs	r2, r0
    19d8:	1dfb      	adds	r3, r7, #7
    19da:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    19dc:	4a08      	ldr	r2, [pc, #32]	; (1a00 <system_flash_set_waitstates+0x30>)
    19de:	1dfb      	adds	r3, r7, #7
    19e0:	781b      	ldrb	r3, [r3, #0]
    19e2:	210f      	movs	r1, #15
    19e4:	400b      	ands	r3, r1
    19e6:	b2d9      	uxtb	r1, r3
    19e8:	6853      	ldr	r3, [r2, #4]
    19ea:	200f      	movs	r0, #15
    19ec:	4001      	ands	r1, r0
    19ee:	0049      	lsls	r1, r1, #1
    19f0:	201e      	movs	r0, #30
    19f2:	4383      	bics	r3, r0
    19f4:	430b      	orrs	r3, r1
    19f6:	6053      	str	r3, [r2, #4]
}
    19f8:	46c0      	nop			; (mov r8, r8)
    19fa:	46bd      	mov	sp, r7
    19fc:	b002      	add	sp, #8
    19fe:	bd80      	pop	{r7, pc}
    1a00:	41004000 	.word	0x41004000

00001a04 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    1a04:	b580      	push	{r7, lr}
    1a06:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1a08:	46c0      	nop			; (mov r8, r8)
    1a0a:	4b04      	ldr	r3, [pc, #16]	; (1a1c <_system_dfll_wait_for_sync+0x18>)
    1a0c:	68db      	ldr	r3, [r3, #12]
    1a0e:	2210      	movs	r2, #16
    1a10:	4013      	ands	r3, r2
    1a12:	d0fa      	beq.n	1a0a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    1a14:	46c0      	nop			; (mov r8, r8)
    1a16:	46bd      	mov	sp, r7
    1a18:	bd80      	pop	{r7, pc}
    1a1a:	46c0      	nop			; (mov r8, r8)
    1a1c:	40000800 	.word	0x40000800

00001a20 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    1a20:	b580      	push	{r7, lr}
    1a22:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1a24:	4b0c      	ldr	r3, [pc, #48]	; (1a58 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1a26:	2202      	movs	r2, #2
    1a28:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1a2a:	4b0c      	ldr	r3, [pc, #48]	; (1a5c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1a2c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1a2e:	4a0a      	ldr	r2, [pc, #40]	; (1a58 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1a30:	4b0b      	ldr	r3, [pc, #44]	; (1a60 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1a32:	689b      	ldr	r3, [r3, #8]
    1a34:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1a36:	4a08      	ldr	r2, [pc, #32]	; (1a58 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1a38:	4b09      	ldr	r3, [pc, #36]	; (1a60 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1a3a:	685b      	ldr	r3, [r3, #4]
    1a3c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1a3e:	4b06      	ldr	r3, [pc, #24]	; (1a58 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1a40:	2200      	movs	r2, #0
    1a42:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1a44:	4b05      	ldr	r3, [pc, #20]	; (1a5c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1a46:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1a48:	4a03      	ldr	r2, [pc, #12]	; (1a58 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1a4a:	4b05      	ldr	r3, [pc, #20]	; (1a60 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1a4c:	681b      	ldr	r3, [r3, #0]
    1a4e:	b29b      	uxth	r3, r3
    1a50:	8493      	strh	r3, [r2, #36]	; 0x24
}
    1a52:	46c0      	nop			; (mov r8, r8)
    1a54:	46bd      	mov	sp, r7
    1a56:	bd80      	pop	{r7, pc}
    1a58:	40000800 	.word	0x40000800
    1a5c:	00001a05 	.word	0x00001a05
    1a60:	2000047c 	.word	0x2000047c

00001a64 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1a64:	b580      	push	{r7, lr}
    1a66:	b082      	sub	sp, #8
    1a68:	af00      	add	r7, sp, #0
    1a6a:	0002      	movs	r2, r0
    1a6c:	1dfb      	adds	r3, r7, #7
    1a6e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1a70:	1dfb      	adds	r3, r7, #7
    1a72:	781b      	ldrb	r3, [r3, #0]
    1a74:	2b08      	cmp	r3, #8
    1a76:	d840      	bhi.n	1afa <system_clock_source_get_hz+0x96>
    1a78:	009a      	lsls	r2, r3, #2
    1a7a:	4b22      	ldr	r3, [pc, #136]	; (1b04 <system_clock_source_get_hz+0xa0>)
    1a7c:	18d3      	adds	r3, r2, r3
    1a7e:	681b      	ldr	r3, [r3, #0]
    1a80:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1a82:	4b21      	ldr	r3, [pc, #132]	; (1b08 <system_clock_source_get_hz+0xa4>)
    1a84:	691b      	ldr	r3, [r3, #16]
    1a86:	e039      	b.n	1afc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1a88:	4b20      	ldr	r3, [pc, #128]	; (1b0c <system_clock_source_get_hz+0xa8>)
    1a8a:	6a1b      	ldr	r3, [r3, #32]
    1a8c:	059b      	lsls	r3, r3, #22
    1a8e:	0f9b      	lsrs	r3, r3, #30
    1a90:	b2db      	uxtb	r3, r3
    1a92:	001a      	movs	r2, r3
    1a94:	4b1e      	ldr	r3, [pc, #120]	; (1b10 <system_clock_source_get_hz+0xac>)
    1a96:	40d3      	lsrs	r3, r2
    1a98:	e030      	b.n	1afc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1a9a:	2380      	movs	r3, #128	; 0x80
    1a9c:	021b      	lsls	r3, r3, #8
    1a9e:	e02d      	b.n	1afc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    1aa0:	2380      	movs	r3, #128	; 0x80
    1aa2:	021b      	lsls	r3, r3, #8
    1aa4:	e02a      	b.n	1afc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1aa6:	4b18      	ldr	r3, [pc, #96]	; (1b08 <system_clock_source_get_hz+0xa4>)
    1aa8:	695b      	ldr	r3, [r3, #20]
    1aaa:	e027      	b.n	1afc <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1aac:	4b16      	ldr	r3, [pc, #88]	; (1b08 <system_clock_source_get_hz+0xa4>)
    1aae:	681b      	ldr	r3, [r3, #0]
    1ab0:	2202      	movs	r2, #2
    1ab2:	4013      	ands	r3, r2
    1ab4:	d101      	bne.n	1aba <system_clock_source_get_hz+0x56>
			return 0;
    1ab6:	2300      	movs	r3, #0
    1ab8:	e020      	b.n	1afc <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    1aba:	4b16      	ldr	r3, [pc, #88]	; (1b14 <system_clock_source_get_hz+0xb0>)
    1abc:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1abe:	4b12      	ldr	r3, [pc, #72]	; (1b08 <system_clock_source_get_hz+0xa4>)
    1ac0:	681b      	ldr	r3, [r3, #0]
    1ac2:	2204      	movs	r2, #4
    1ac4:	4013      	ands	r3, r2
    1ac6:	d009      	beq.n	1adc <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1ac8:	2000      	movs	r0, #0
    1aca:	4b13      	ldr	r3, [pc, #76]	; (1b18 <system_clock_source_get_hz+0xb4>)
    1acc:	4798      	blx	r3
    1ace:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    1ad0:	4b0d      	ldr	r3, [pc, #52]	; (1b08 <system_clock_source_get_hz+0xa4>)
    1ad2:	689b      	ldr	r3, [r3, #8]
    1ad4:	041b      	lsls	r3, r3, #16
    1ad6:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1ad8:	4353      	muls	r3, r2
    1ada:	e00f      	b.n	1afc <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    1adc:	4b0f      	ldr	r3, [pc, #60]	; (1b1c <system_clock_source_get_hz+0xb8>)
    1ade:	e00d      	b.n	1afc <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1ae0:	4a0a      	ldr	r2, [pc, #40]	; (1b0c <system_clock_source_get_hz+0xa8>)
    1ae2:	2350      	movs	r3, #80	; 0x50
    1ae4:	5cd3      	ldrb	r3, [r2, r3]
    1ae6:	b2db      	uxtb	r3, r3
    1ae8:	001a      	movs	r2, r3
    1aea:	2304      	movs	r3, #4
    1aec:	4013      	ands	r3, r2
    1aee:	d101      	bne.n	1af4 <system_clock_source_get_hz+0x90>
			return 0;
    1af0:	2300      	movs	r3, #0
    1af2:	e003      	b.n	1afc <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    1af4:	4b04      	ldr	r3, [pc, #16]	; (1b08 <system_clock_source_get_hz+0xa4>)
    1af6:	68db      	ldr	r3, [r3, #12]
    1af8:	e000      	b.n	1afc <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    1afa:	2300      	movs	r3, #0
	}
}
    1afc:	0018      	movs	r0, r3
    1afe:	46bd      	mov	sp, r7
    1b00:	b002      	add	sp, #8
    1b02:	bd80      	pop	{r7, pc}
    1b04:	00002828 	.word	0x00002828
    1b08:	2000047c 	.word	0x2000047c
    1b0c:	40000800 	.word	0x40000800
    1b10:	007a1200 	.word	0x007a1200
    1b14:	00001a05 	.word	0x00001a05
    1b18:	000021a1 	.word	0x000021a1
    1b1c:	02dc6c00 	.word	0x02dc6c00

00001b20 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1b20:	b580      	push	{r7, lr}
    1b22:	b084      	sub	sp, #16
    1b24:	af00      	add	r7, sp, #0
    1b26:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1b28:	4b1a      	ldr	r3, [pc, #104]	; (1b94 <system_clock_source_osc8m_set_config+0x74>)
    1b2a:	6a1b      	ldr	r3, [r3, #32]
    1b2c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1b2e:	687b      	ldr	r3, [r7, #4]
    1b30:	781b      	ldrb	r3, [r3, #0]
    1b32:	1c1a      	adds	r2, r3, #0
    1b34:	2303      	movs	r3, #3
    1b36:	4013      	ands	r3, r2
    1b38:	b2da      	uxtb	r2, r3
    1b3a:	230d      	movs	r3, #13
    1b3c:	18fb      	adds	r3, r7, r3
    1b3e:	2103      	movs	r1, #3
    1b40:	400a      	ands	r2, r1
    1b42:	0010      	movs	r0, r2
    1b44:	781a      	ldrb	r2, [r3, #0]
    1b46:	2103      	movs	r1, #3
    1b48:	438a      	bics	r2, r1
    1b4a:	1c11      	adds	r1, r2, #0
    1b4c:	1c02      	adds	r2, r0, #0
    1b4e:	430a      	orrs	r2, r1
    1b50:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	789a      	ldrb	r2, [r3, #2]
    1b56:	230c      	movs	r3, #12
    1b58:	18fb      	adds	r3, r7, r3
    1b5a:	01d0      	lsls	r0, r2, #7
    1b5c:	781a      	ldrb	r2, [r3, #0]
    1b5e:	217f      	movs	r1, #127	; 0x7f
    1b60:	400a      	ands	r2, r1
    1b62:	1c11      	adds	r1, r2, #0
    1b64:	1c02      	adds	r2, r0, #0
    1b66:	430a      	orrs	r2, r1
    1b68:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1b6a:	687b      	ldr	r3, [r7, #4]
    1b6c:	785a      	ldrb	r2, [r3, #1]
    1b6e:	230c      	movs	r3, #12
    1b70:	18fb      	adds	r3, r7, r3
    1b72:	2101      	movs	r1, #1
    1b74:	400a      	ands	r2, r1
    1b76:	0190      	lsls	r0, r2, #6
    1b78:	781a      	ldrb	r2, [r3, #0]
    1b7a:	2140      	movs	r1, #64	; 0x40
    1b7c:	438a      	bics	r2, r1
    1b7e:	1c11      	adds	r1, r2, #0
    1b80:	1c02      	adds	r2, r0, #0
    1b82:	430a      	orrs	r2, r1
    1b84:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    1b86:	4b03      	ldr	r3, [pc, #12]	; (1b94 <system_clock_source_osc8m_set_config+0x74>)
    1b88:	68fa      	ldr	r2, [r7, #12]
    1b8a:	621a      	str	r2, [r3, #32]
}
    1b8c:	46c0      	nop			; (mov r8, r8)
    1b8e:	46bd      	mov	sp, r7
    1b90:	b004      	add	sp, #16
    1b92:	bd80      	pop	{r7, pc}
    1b94:	40000800 	.word	0x40000800

00001b98 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1b98:	b580      	push	{r7, lr}
    1b9a:	b082      	sub	sp, #8
    1b9c:	af00      	add	r7, sp, #0
    1b9e:	0002      	movs	r2, r0
    1ba0:	1dfb      	adds	r3, r7, #7
    1ba2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1ba4:	1dfb      	adds	r3, r7, #7
    1ba6:	781b      	ldrb	r3, [r3, #0]
    1ba8:	2b08      	cmp	r3, #8
    1baa:	d83b      	bhi.n	1c24 <system_clock_source_enable+0x8c>
    1bac:	009a      	lsls	r2, r3, #2
    1bae:	4b21      	ldr	r3, [pc, #132]	; (1c34 <system_clock_source_enable+0x9c>)
    1bb0:	18d3      	adds	r3, r2, r3
    1bb2:	681b      	ldr	r3, [r3, #0]
    1bb4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1bb6:	4b20      	ldr	r3, [pc, #128]	; (1c38 <system_clock_source_enable+0xa0>)
    1bb8:	4a1f      	ldr	r2, [pc, #124]	; (1c38 <system_clock_source_enable+0xa0>)
    1bba:	6a12      	ldr	r2, [r2, #32]
    1bbc:	2102      	movs	r1, #2
    1bbe:	430a      	orrs	r2, r1
    1bc0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1bc2:	2300      	movs	r3, #0
    1bc4:	e031      	b.n	1c2a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1bc6:	4b1c      	ldr	r3, [pc, #112]	; (1c38 <system_clock_source_enable+0xa0>)
    1bc8:	4a1b      	ldr	r2, [pc, #108]	; (1c38 <system_clock_source_enable+0xa0>)
    1bca:	6992      	ldr	r2, [r2, #24]
    1bcc:	2102      	movs	r1, #2
    1bce:	430a      	orrs	r2, r1
    1bd0:	619a      	str	r2, [r3, #24]
		break;
    1bd2:	e029      	b.n	1c28 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1bd4:	4a18      	ldr	r2, [pc, #96]	; (1c38 <system_clock_source_enable+0xa0>)
    1bd6:	4b18      	ldr	r3, [pc, #96]	; (1c38 <system_clock_source_enable+0xa0>)
    1bd8:	8a1b      	ldrh	r3, [r3, #16]
    1bda:	b29b      	uxth	r3, r3
    1bdc:	2102      	movs	r1, #2
    1bde:	430b      	orrs	r3, r1
    1be0:	b29b      	uxth	r3, r3
    1be2:	8213      	strh	r3, [r2, #16]
		break;
    1be4:	e020      	b.n	1c28 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1be6:	4a14      	ldr	r2, [pc, #80]	; (1c38 <system_clock_source_enable+0xa0>)
    1be8:	4b13      	ldr	r3, [pc, #76]	; (1c38 <system_clock_source_enable+0xa0>)
    1bea:	8a9b      	ldrh	r3, [r3, #20]
    1bec:	b29b      	uxth	r3, r3
    1bee:	2102      	movs	r1, #2
    1bf0:	430b      	orrs	r3, r1
    1bf2:	b29b      	uxth	r3, r3
    1bf4:	8293      	strh	r3, [r2, #20]
		break;
    1bf6:	e017      	b.n	1c28 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1bf8:	4b10      	ldr	r3, [pc, #64]	; (1c3c <system_clock_source_enable+0xa4>)
    1bfa:	681b      	ldr	r3, [r3, #0]
    1bfc:	2202      	movs	r2, #2
    1bfe:	431a      	orrs	r2, r3
    1c00:	4b0e      	ldr	r3, [pc, #56]	; (1c3c <system_clock_source_enable+0xa4>)
    1c02:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    1c04:	4b0e      	ldr	r3, [pc, #56]	; (1c40 <system_clock_source_enable+0xa8>)
    1c06:	4798      	blx	r3
		break;
    1c08:	e00e      	b.n	1c28 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1c0a:	4a0b      	ldr	r2, [pc, #44]	; (1c38 <system_clock_source_enable+0xa0>)
    1c0c:	490a      	ldr	r1, [pc, #40]	; (1c38 <system_clock_source_enable+0xa0>)
    1c0e:	2344      	movs	r3, #68	; 0x44
    1c10:	5ccb      	ldrb	r3, [r1, r3]
    1c12:	b2db      	uxtb	r3, r3
    1c14:	2102      	movs	r1, #2
    1c16:	430b      	orrs	r3, r1
    1c18:	b2d9      	uxtb	r1, r3
    1c1a:	2344      	movs	r3, #68	; 0x44
    1c1c:	54d1      	strb	r1, [r2, r3]
		break;
    1c1e:	e003      	b.n	1c28 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1c20:	2300      	movs	r3, #0
    1c22:	e002      	b.n	1c2a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1c24:	2317      	movs	r3, #23
    1c26:	e000      	b.n	1c2a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    1c28:	2300      	movs	r3, #0
}
    1c2a:	0018      	movs	r0, r3
    1c2c:	46bd      	mov	sp, r7
    1c2e:	b002      	add	sp, #8
    1c30:	bd80      	pop	{r7, pc}
    1c32:	46c0      	nop			; (mov r8, r8)
    1c34:	0000284c 	.word	0x0000284c
    1c38:	40000800 	.word	0x40000800
    1c3c:	2000047c 	.word	0x2000047c
    1c40:	00001a21 	.word	0x00001a21

00001c44 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1c44:	b580      	push	{r7, lr}
    1c46:	b082      	sub	sp, #8
    1c48:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1c4a:	003b      	movs	r3, r7
    1c4c:	2201      	movs	r2, #1
    1c4e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1c50:	2300      	movs	r3, #0
    1c52:	607b      	str	r3, [r7, #4]
    1c54:	e009      	b.n	1c6a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1c56:	687b      	ldr	r3, [r7, #4]
    1c58:	b2db      	uxtb	r3, r3
    1c5a:	003a      	movs	r2, r7
    1c5c:	0011      	movs	r1, r2
    1c5e:	0018      	movs	r0, r3
    1c60:	4b05      	ldr	r3, [pc, #20]	; (1c78 <_switch_peripheral_gclk+0x34>)
    1c62:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	3301      	adds	r3, #1
    1c68:	607b      	str	r3, [r7, #4]
    1c6a:	687b      	ldr	r3, [r7, #4]
    1c6c:	2b24      	cmp	r3, #36	; 0x24
    1c6e:	d9f2      	bls.n	1c56 <_switch_peripheral_gclk+0x12>
	}
}
    1c70:	46c0      	nop			; (mov r8, r8)
    1c72:	46bd      	mov	sp, r7
    1c74:	b002      	add	sp, #8
    1c76:	bd80      	pop	{r7, pc}
    1c78:	0000207d 	.word	0x0000207d

00001c7c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1c7c:	b580      	push	{r7, lr}
    1c7e:	b0a0      	sub	sp, #128	; 0x80
    1c80:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1c82:	4b27      	ldr	r3, [pc, #156]	; (1d20 <system_clock_init+0xa4>)
    1c84:	22c2      	movs	r2, #194	; 0xc2
    1c86:	00d2      	lsls	r2, r2, #3
    1c88:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    1c8a:	2000      	movs	r0, #0
    1c8c:	4b25      	ldr	r3, [pc, #148]	; (1d24 <system_clock_init+0xa8>)
    1c8e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    1c90:	4b25      	ldr	r3, [pc, #148]	; (1d28 <system_clock_init+0xac>)
    1c92:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    1c94:	237c      	movs	r3, #124	; 0x7c
    1c96:	18fb      	adds	r3, r7, r3
    1c98:	0018      	movs	r0, r3
    1c9a:	4b24      	ldr	r3, [pc, #144]	; (1d2c <system_clock_init+0xb0>)
    1c9c:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1c9e:	237c      	movs	r3, #124	; 0x7c
    1ca0:	18fb      	adds	r3, r7, r3
    1ca2:	2200      	movs	r2, #0
    1ca4:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1ca6:	237c      	movs	r3, #124	; 0x7c
    1ca8:	18fb      	adds	r3, r7, r3
    1caa:	2201      	movs	r2, #1
    1cac:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1cae:	237c      	movs	r3, #124	; 0x7c
    1cb0:	18fb      	adds	r3, r7, r3
    1cb2:	2200      	movs	r2, #0
    1cb4:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1cb6:	237c      	movs	r3, #124	; 0x7c
    1cb8:	18fb      	adds	r3, r7, r3
    1cba:	0018      	movs	r0, r3
    1cbc:	4b1c      	ldr	r3, [pc, #112]	; (1d30 <system_clock_init+0xb4>)
    1cbe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1cc0:	2006      	movs	r0, #6
    1cc2:	4b1c      	ldr	r3, [pc, #112]	; (1d34 <system_clock_init+0xb8>)
    1cc4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1cc6:	4b1c      	ldr	r3, [pc, #112]	; (1d38 <system_clock_init+0xbc>)
    1cc8:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    1cca:	2000      	movs	r0, #0
    1ccc:	4b1b      	ldr	r3, [pc, #108]	; (1d3c <system_clock_init+0xc0>)
    1cce:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    1cd0:	2100      	movs	r1, #0
    1cd2:	2000      	movs	r0, #0
    1cd4:	4b1a      	ldr	r3, [pc, #104]	; (1d40 <system_clock_init+0xc4>)
    1cd6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    1cd8:	2100      	movs	r1, #0
    1cda:	2001      	movs	r0, #1
    1cdc:	4b18      	ldr	r3, [pc, #96]	; (1d40 <system_clock_init+0xc4>)
    1cde:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    1ce0:	2100      	movs	r1, #0
    1ce2:	2002      	movs	r0, #2
    1ce4:	4b16      	ldr	r3, [pc, #88]	; (1d40 <system_clock_init+0xc4>)
    1ce6:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1ce8:	1d3b      	adds	r3, r7, #4
    1cea:	0018      	movs	r0, r3
    1cec:	4b15      	ldr	r3, [pc, #84]	; (1d44 <system_clock_init+0xc8>)
    1cee:	4798      	blx	r3
    1cf0:	1d3b      	adds	r3, r7, #4
    1cf2:	2206      	movs	r2, #6
    1cf4:	701a      	strb	r2, [r3, #0]
    1cf6:	1d3b      	adds	r3, r7, #4
    1cf8:	2201      	movs	r2, #1
    1cfa:	605a      	str	r2, [r3, #4]
    1cfc:	1d3b      	adds	r3, r7, #4
    1cfe:	2200      	movs	r2, #0
    1d00:	721a      	strb	r2, [r3, #8]
    1d02:	1d3b      	adds	r3, r7, #4
    1d04:	2200      	movs	r2, #0
    1d06:	725a      	strb	r2, [r3, #9]
    1d08:	1d3b      	adds	r3, r7, #4
    1d0a:	0019      	movs	r1, r3
    1d0c:	2000      	movs	r0, #0
    1d0e:	4b0e      	ldr	r3, [pc, #56]	; (1d48 <system_clock_init+0xcc>)
    1d10:	4798      	blx	r3
    1d12:	2000      	movs	r0, #0
    1d14:	4b0d      	ldr	r3, [pc, #52]	; (1d4c <system_clock_init+0xd0>)
    1d16:	4798      	blx	r3
#endif
}
    1d18:	46c0      	nop			; (mov r8, r8)
    1d1a:	46bd      	mov	sp, r7
    1d1c:	b020      	add	sp, #128	; 0x80
    1d1e:	bd80      	pop	{r7, pc}
    1d20:	40000800 	.word	0x40000800
    1d24:	000019d1 	.word	0x000019d1
    1d28:	00001c45 	.word	0x00001c45
    1d2c:	0000193b 	.word	0x0000193b
    1d30:	00001b21 	.word	0x00001b21
    1d34:	00001b99 	.word	0x00001b99
    1d38:	00001df5 	.word	0x00001df5
    1d3c:	0000195d 	.word	0x0000195d
    1d40:	0000197d 	.word	0x0000197d
    1d44:	0000190d 	.word	0x0000190d
    1d48:	00001e25 	.word	0x00001e25
    1d4c:	00001f49 	.word	0x00001f49

00001d50 <system_apb_clock_set_mask>:
{
    1d50:	b580      	push	{r7, lr}
    1d52:	b082      	sub	sp, #8
    1d54:	af00      	add	r7, sp, #0
    1d56:	0002      	movs	r2, r0
    1d58:	6039      	str	r1, [r7, #0]
    1d5a:	1dfb      	adds	r3, r7, #7
    1d5c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1d5e:	1dfb      	adds	r3, r7, #7
    1d60:	781b      	ldrb	r3, [r3, #0]
    1d62:	2b01      	cmp	r3, #1
    1d64:	d00a      	beq.n	1d7c <system_apb_clock_set_mask+0x2c>
    1d66:	2b02      	cmp	r3, #2
    1d68:	d00f      	beq.n	1d8a <system_apb_clock_set_mask+0x3a>
    1d6a:	2b00      	cmp	r3, #0
    1d6c:	d114      	bne.n	1d98 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1d6e:	4b0e      	ldr	r3, [pc, #56]	; (1da8 <system_apb_clock_set_mask+0x58>)
    1d70:	4a0d      	ldr	r2, [pc, #52]	; (1da8 <system_apb_clock_set_mask+0x58>)
    1d72:	6991      	ldr	r1, [r2, #24]
    1d74:	683a      	ldr	r2, [r7, #0]
    1d76:	430a      	orrs	r2, r1
    1d78:	619a      	str	r2, [r3, #24]
			break;
    1d7a:	e00f      	b.n	1d9c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1d7c:	4b0a      	ldr	r3, [pc, #40]	; (1da8 <system_apb_clock_set_mask+0x58>)
    1d7e:	4a0a      	ldr	r2, [pc, #40]	; (1da8 <system_apb_clock_set_mask+0x58>)
    1d80:	69d1      	ldr	r1, [r2, #28]
    1d82:	683a      	ldr	r2, [r7, #0]
    1d84:	430a      	orrs	r2, r1
    1d86:	61da      	str	r2, [r3, #28]
			break;
    1d88:	e008      	b.n	1d9c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    1d8a:	4b07      	ldr	r3, [pc, #28]	; (1da8 <system_apb_clock_set_mask+0x58>)
    1d8c:	4a06      	ldr	r2, [pc, #24]	; (1da8 <system_apb_clock_set_mask+0x58>)
    1d8e:	6a11      	ldr	r1, [r2, #32]
    1d90:	683a      	ldr	r2, [r7, #0]
    1d92:	430a      	orrs	r2, r1
    1d94:	621a      	str	r2, [r3, #32]
			break;
    1d96:	e001      	b.n	1d9c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1d98:	2317      	movs	r3, #23
    1d9a:	e000      	b.n	1d9e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1d9c:	2300      	movs	r3, #0
}
    1d9e:	0018      	movs	r0, r3
    1da0:	46bd      	mov	sp, r7
    1da2:	b002      	add	sp, #8
    1da4:	bd80      	pop	{r7, pc}
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	40000400 	.word	0x40000400

00001dac <system_interrupt_enter_critical_section>:
{
    1dac:	b580      	push	{r7, lr}
    1dae:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    1db0:	4b02      	ldr	r3, [pc, #8]	; (1dbc <system_interrupt_enter_critical_section+0x10>)
    1db2:	4798      	blx	r3
}
    1db4:	46c0      	nop			; (mov r8, r8)
    1db6:	46bd      	mov	sp, r7
    1db8:	bd80      	pop	{r7, pc}
    1dba:	46c0      	nop			; (mov r8, r8)
    1dbc:	00001879 	.word	0x00001879

00001dc0 <system_interrupt_leave_critical_section>:
{
    1dc0:	b580      	push	{r7, lr}
    1dc2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    1dc4:	4b02      	ldr	r3, [pc, #8]	; (1dd0 <system_interrupt_leave_critical_section+0x10>)
    1dc6:	4798      	blx	r3
}
    1dc8:	46c0      	nop			; (mov r8, r8)
    1dca:	46bd      	mov	sp, r7
    1dcc:	bd80      	pop	{r7, pc}
    1dce:	46c0      	nop			; (mov r8, r8)
    1dd0:	000018cd 	.word	0x000018cd

00001dd4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    1dd4:	b580      	push	{r7, lr}
    1dd6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1dd8:	4b05      	ldr	r3, [pc, #20]	; (1df0 <system_gclk_is_syncing+0x1c>)
    1dda:	785b      	ldrb	r3, [r3, #1]
    1ddc:	b2db      	uxtb	r3, r3
    1dde:	b25b      	sxtb	r3, r3
    1de0:	2b00      	cmp	r3, #0
    1de2:	da01      	bge.n	1de8 <system_gclk_is_syncing+0x14>
		return true;
    1de4:	2301      	movs	r3, #1
    1de6:	e000      	b.n	1dea <system_gclk_is_syncing+0x16>
	}

	return false;
    1de8:	2300      	movs	r3, #0
}
    1dea:	0018      	movs	r0, r3
    1dec:	46bd      	mov	sp, r7
    1dee:	bd80      	pop	{r7, pc}
    1df0:	40000c00 	.word	0x40000c00

00001df4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    1df4:	b580      	push	{r7, lr}
    1df6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    1df8:	2108      	movs	r1, #8
    1dfa:	2000      	movs	r0, #0
    1dfc:	4b07      	ldr	r3, [pc, #28]	; (1e1c <system_gclk_init+0x28>)
    1dfe:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1e00:	4b07      	ldr	r3, [pc, #28]	; (1e20 <system_gclk_init+0x2c>)
    1e02:	2201      	movs	r2, #1
    1e04:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1e06:	46c0      	nop			; (mov r8, r8)
    1e08:	4b05      	ldr	r3, [pc, #20]	; (1e20 <system_gclk_init+0x2c>)
    1e0a:	781b      	ldrb	r3, [r3, #0]
    1e0c:	b2db      	uxtb	r3, r3
    1e0e:	001a      	movs	r2, r3
    1e10:	2301      	movs	r3, #1
    1e12:	4013      	ands	r3, r2
    1e14:	d1f8      	bne.n	1e08 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    1e16:	46c0      	nop			; (mov r8, r8)
    1e18:	46bd      	mov	sp, r7
    1e1a:	bd80      	pop	{r7, pc}
    1e1c:	00001d51 	.word	0x00001d51
    1e20:	40000c00 	.word	0x40000c00

00001e24 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1e24:	b580      	push	{r7, lr}
    1e26:	b086      	sub	sp, #24
    1e28:	af00      	add	r7, sp, #0
    1e2a:	0002      	movs	r2, r0
    1e2c:	6039      	str	r1, [r7, #0]
    1e2e:	1dfb      	adds	r3, r7, #7
    1e30:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1e32:	1dfb      	adds	r3, r7, #7
    1e34:	781b      	ldrb	r3, [r3, #0]
    1e36:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    1e38:	1dfb      	adds	r3, r7, #7
    1e3a:	781b      	ldrb	r3, [r3, #0]
    1e3c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1e3e:	683b      	ldr	r3, [r7, #0]
    1e40:	781b      	ldrb	r3, [r3, #0]
    1e42:	021b      	lsls	r3, r3, #8
    1e44:	001a      	movs	r2, r3
    1e46:	697b      	ldr	r3, [r7, #20]
    1e48:	4313      	orrs	r3, r2
    1e4a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1e4c:	683b      	ldr	r3, [r7, #0]
    1e4e:	785b      	ldrb	r3, [r3, #1]
    1e50:	2b00      	cmp	r3, #0
    1e52:	d004      	beq.n	1e5e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1e54:	697b      	ldr	r3, [r7, #20]
    1e56:	2280      	movs	r2, #128	; 0x80
    1e58:	02d2      	lsls	r2, r2, #11
    1e5a:	4313      	orrs	r3, r2
    1e5c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1e5e:	683b      	ldr	r3, [r7, #0]
    1e60:	7a5b      	ldrb	r3, [r3, #9]
    1e62:	2b00      	cmp	r3, #0
    1e64:	d004      	beq.n	1e70 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1e66:	697b      	ldr	r3, [r7, #20]
    1e68:	2280      	movs	r2, #128	; 0x80
    1e6a:	0312      	lsls	r2, r2, #12
    1e6c:	4313      	orrs	r3, r2
    1e6e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1e70:	683b      	ldr	r3, [r7, #0]
    1e72:	685b      	ldr	r3, [r3, #4]
    1e74:	2b01      	cmp	r3, #1
    1e76:	d92c      	bls.n	1ed2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1e78:	683b      	ldr	r3, [r7, #0]
    1e7a:	685a      	ldr	r2, [r3, #4]
    1e7c:	683b      	ldr	r3, [r7, #0]
    1e7e:	685b      	ldr	r3, [r3, #4]
    1e80:	3b01      	subs	r3, #1
    1e82:	4013      	ands	r3, r2
    1e84:	d11a      	bne.n	1ebc <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    1e86:	2300      	movs	r3, #0
    1e88:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1e8a:	2302      	movs	r3, #2
    1e8c:	60bb      	str	r3, [r7, #8]
    1e8e:	e005      	b.n	1e9c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    1e90:	68fb      	ldr	r3, [r7, #12]
    1e92:	3301      	adds	r3, #1
    1e94:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    1e96:	68bb      	ldr	r3, [r7, #8]
    1e98:	005b      	lsls	r3, r3, #1
    1e9a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    1e9c:	683b      	ldr	r3, [r7, #0]
    1e9e:	685a      	ldr	r2, [r3, #4]
    1ea0:	68bb      	ldr	r3, [r7, #8]
    1ea2:	429a      	cmp	r2, r3
    1ea4:	d8f4      	bhi.n	1e90 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1ea6:	68fb      	ldr	r3, [r7, #12]
    1ea8:	021b      	lsls	r3, r3, #8
    1eaa:	693a      	ldr	r2, [r7, #16]
    1eac:	4313      	orrs	r3, r2
    1eae:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1eb0:	697b      	ldr	r3, [r7, #20]
    1eb2:	2280      	movs	r2, #128	; 0x80
    1eb4:	0352      	lsls	r2, r2, #13
    1eb6:	4313      	orrs	r3, r2
    1eb8:	617b      	str	r3, [r7, #20]
    1eba:	e00a      	b.n	1ed2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1ebc:	683b      	ldr	r3, [r7, #0]
    1ebe:	685b      	ldr	r3, [r3, #4]
    1ec0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    1ec2:	693a      	ldr	r2, [r7, #16]
    1ec4:	4313      	orrs	r3, r2
    1ec6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1ec8:	697b      	ldr	r3, [r7, #20]
    1eca:	2280      	movs	r2, #128	; 0x80
    1ecc:	0292      	lsls	r2, r2, #10
    1ece:	4313      	orrs	r3, r2
    1ed0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1ed2:	683b      	ldr	r3, [r7, #0]
    1ed4:	7a1b      	ldrb	r3, [r3, #8]
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	d004      	beq.n	1ee4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1eda:	697b      	ldr	r3, [r7, #20]
    1edc:	2280      	movs	r2, #128	; 0x80
    1ede:	0392      	lsls	r2, r2, #14
    1ee0:	4313      	orrs	r3, r2
    1ee2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    1ee4:	46c0      	nop			; (mov r8, r8)
    1ee6:	4b13      	ldr	r3, [pc, #76]	; (1f34 <system_gclk_gen_set_config+0x110>)
    1ee8:	4798      	blx	r3
    1eea:	1e03      	subs	r3, r0, #0
    1eec:	d1fb      	bne.n	1ee6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1eee:	4b12      	ldr	r3, [pc, #72]	; (1f38 <system_gclk_gen_set_config+0x114>)
    1ef0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ef2:	4a12      	ldr	r2, [pc, #72]	; (1f3c <system_gclk_gen_set_config+0x118>)
    1ef4:	1dfb      	adds	r3, r7, #7
    1ef6:	781b      	ldrb	r3, [r3, #0]
    1ef8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1efa:	46c0      	nop			; (mov r8, r8)
    1efc:	4b0d      	ldr	r3, [pc, #52]	; (1f34 <system_gclk_gen_set_config+0x110>)
    1efe:	4798      	blx	r3
    1f00:	1e03      	subs	r3, r0, #0
    1f02:	d1fb      	bne.n	1efc <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1f04:	4b0e      	ldr	r3, [pc, #56]	; (1f40 <system_gclk_gen_set_config+0x11c>)
    1f06:	693a      	ldr	r2, [r7, #16]
    1f08:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    1f0a:	46c0      	nop			; (mov r8, r8)
    1f0c:	4b09      	ldr	r3, [pc, #36]	; (1f34 <system_gclk_gen_set_config+0x110>)
    1f0e:	4798      	blx	r3
    1f10:	1e03      	subs	r3, r0, #0
    1f12:	d1fb      	bne.n	1f0c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1f14:	4b0a      	ldr	r3, [pc, #40]	; (1f40 <system_gclk_gen_set_config+0x11c>)
    1f16:	4a0a      	ldr	r2, [pc, #40]	; (1f40 <system_gclk_gen_set_config+0x11c>)
    1f18:	6851      	ldr	r1, [r2, #4]
    1f1a:	2280      	movs	r2, #128	; 0x80
    1f1c:	0252      	lsls	r2, r2, #9
    1f1e:	4011      	ands	r1, r2
    1f20:	697a      	ldr	r2, [r7, #20]
    1f22:	430a      	orrs	r2, r1
    1f24:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1f26:	4b07      	ldr	r3, [pc, #28]	; (1f44 <system_gclk_gen_set_config+0x120>)
    1f28:	4798      	blx	r3
}
    1f2a:	46c0      	nop			; (mov r8, r8)
    1f2c:	46bd      	mov	sp, r7
    1f2e:	b006      	add	sp, #24
    1f30:	bd80      	pop	{r7, pc}
    1f32:	46c0      	nop			; (mov r8, r8)
    1f34:	00001dd5 	.word	0x00001dd5
    1f38:	00001dad 	.word	0x00001dad
    1f3c:	40000c08 	.word	0x40000c08
    1f40:	40000c00 	.word	0x40000c00
    1f44:	00001dc1 	.word	0x00001dc1

00001f48 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1f48:	b580      	push	{r7, lr}
    1f4a:	b082      	sub	sp, #8
    1f4c:	af00      	add	r7, sp, #0
    1f4e:	0002      	movs	r2, r0
    1f50:	1dfb      	adds	r3, r7, #7
    1f52:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    1f54:	46c0      	nop			; (mov r8, r8)
    1f56:	4b0e      	ldr	r3, [pc, #56]	; (1f90 <system_gclk_gen_enable+0x48>)
    1f58:	4798      	blx	r3
    1f5a:	1e03      	subs	r3, r0, #0
    1f5c:	d1fb      	bne.n	1f56 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1f5e:	4b0d      	ldr	r3, [pc, #52]	; (1f94 <system_gclk_gen_enable+0x4c>)
    1f60:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1f62:	4a0d      	ldr	r2, [pc, #52]	; (1f98 <system_gclk_gen_enable+0x50>)
    1f64:	1dfb      	adds	r3, r7, #7
    1f66:	781b      	ldrb	r3, [r3, #0]
    1f68:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	4b08      	ldr	r3, [pc, #32]	; (1f90 <system_gclk_gen_enable+0x48>)
    1f6e:	4798      	blx	r3
    1f70:	1e03      	subs	r3, r0, #0
    1f72:	d1fb      	bne.n	1f6c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1f74:	4b09      	ldr	r3, [pc, #36]	; (1f9c <system_gclk_gen_enable+0x54>)
    1f76:	4a09      	ldr	r2, [pc, #36]	; (1f9c <system_gclk_gen_enable+0x54>)
    1f78:	6852      	ldr	r2, [r2, #4]
    1f7a:	2180      	movs	r1, #128	; 0x80
    1f7c:	0249      	lsls	r1, r1, #9
    1f7e:	430a      	orrs	r2, r1
    1f80:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1f82:	4b07      	ldr	r3, [pc, #28]	; (1fa0 <system_gclk_gen_enable+0x58>)
    1f84:	4798      	blx	r3
}
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	46bd      	mov	sp, r7
    1f8a:	b002      	add	sp, #8
    1f8c:	bd80      	pop	{r7, pc}
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	00001dd5 	.word	0x00001dd5
    1f94:	00001dad 	.word	0x00001dad
    1f98:	40000c04 	.word	0x40000c04
    1f9c:	40000c00 	.word	0x40000c00
    1fa0:	00001dc1 	.word	0x00001dc1

00001fa4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1fa4:	b580      	push	{r7, lr}
    1fa6:	b086      	sub	sp, #24
    1fa8:	af00      	add	r7, sp, #0
    1faa:	0002      	movs	r2, r0
    1fac:	1dfb      	adds	r3, r7, #7
    1fae:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    1fb0:	46c0      	nop			; (mov r8, r8)
    1fb2:	4b2a      	ldr	r3, [pc, #168]	; (205c <STACK_SIZE+0x5c>)
    1fb4:	4798      	blx	r3
    1fb6:	1e03      	subs	r3, r0, #0
    1fb8:	d1fb      	bne.n	1fb2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1fba:	4b29      	ldr	r3, [pc, #164]	; (2060 <STACK_SIZE+0x60>)
    1fbc:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1fbe:	4a29      	ldr	r2, [pc, #164]	; (2064 <STACK_SIZE+0x64>)
    1fc0:	1dfb      	adds	r3, r7, #7
    1fc2:	781b      	ldrb	r3, [r3, #0]
    1fc4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1fc6:	46c0      	nop			; (mov r8, r8)
    1fc8:	4b24      	ldr	r3, [pc, #144]	; (205c <STACK_SIZE+0x5c>)
    1fca:	4798      	blx	r3
    1fcc:	1e03      	subs	r3, r0, #0
    1fce:	d1fb      	bne.n	1fc8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1fd0:	4b25      	ldr	r3, [pc, #148]	; (2068 <STACK_SIZE+0x68>)
    1fd2:	685b      	ldr	r3, [r3, #4]
    1fd4:	04db      	lsls	r3, r3, #19
    1fd6:	0edb      	lsrs	r3, r3, #27
    1fd8:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1fda:	0018      	movs	r0, r3
    1fdc:	4b23      	ldr	r3, [pc, #140]	; (206c <STACK_SIZE+0x6c>)
    1fde:	4798      	blx	r3
    1fe0:	0003      	movs	r3, r0
    1fe2:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1fe4:	4a1f      	ldr	r2, [pc, #124]	; (2064 <STACK_SIZE+0x64>)
    1fe6:	1dfb      	adds	r3, r7, #7
    1fe8:	781b      	ldrb	r3, [r3, #0]
    1fea:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1fec:	4b1e      	ldr	r3, [pc, #120]	; (2068 <STACK_SIZE+0x68>)
    1fee:	685b      	ldr	r3, [r3, #4]
    1ff0:	02db      	lsls	r3, r3, #11
    1ff2:	0fdb      	lsrs	r3, r3, #31
    1ff4:	b2da      	uxtb	r2, r3
    1ff6:	2313      	movs	r3, #19
    1ff8:	18fb      	adds	r3, r7, r3
    1ffa:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ffc:	4a1c      	ldr	r2, [pc, #112]	; (2070 <STACK_SIZE+0x70>)
    1ffe:	1dfb      	adds	r3, r7, #7
    2000:	781b      	ldrb	r3, [r3, #0]
    2002:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2004:	46c0      	nop			; (mov r8, r8)
    2006:	4b15      	ldr	r3, [pc, #84]	; (205c <STACK_SIZE+0x5c>)
    2008:	4798      	blx	r3
    200a:	1e03      	subs	r3, r0, #0
    200c:	d1fb      	bne.n	2006 <STACK_SIZE+0x6>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    200e:	4b16      	ldr	r3, [pc, #88]	; (2068 <STACK_SIZE+0x68>)
    2010:	689b      	ldr	r3, [r3, #8]
    2012:	021b      	lsls	r3, r3, #8
    2014:	0c1b      	lsrs	r3, r3, #16
    2016:	b29b      	uxth	r3, r3
    2018:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    201a:	4b16      	ldr	r3, [pc, #88]	; (2074 <STACK_SIZE+0x74>)
    201c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    201e:	2313      	movs	r3, #19
    2020:	18fb      	adds	r3, r7, r3
    2022:	781b      	ldrb	r3, [r3, #0]
    2024:	2b00      	cmp	r3, #0
    2026:	d109      	bne.n	203c <STACK_SIZE+0x3c>
    2028:	68fb      	ldr	r3, [r7, #12]
    202a:	2b01      	cmp	r3, #1
    202c:	d906      	bls.n	203c <STACK_SIZE+0x3c>
		gen_input_hz /= divider;
    202e:	4b12      	ldr	r3, [pc, #72]	; (2078 <STACK_SIZE+0x78>)
    2030:	68f9      	ldr	r1, [r7, #12]
    2032:	6978      	ldr	r0, [r7, #20]
    2034:	4798      	blx	r3
    2036:	0003      	movs	r3, r0
    2038:	617b      	str	r3, [r7, #20]
    203a:	e00a      	b.n	2052 <STACK_SIZE+0x52>
	} else if (divsel) {
    203c:	2313      	movs	r3, #19
    203e:	18fb      	adds	r3, r7, r3
    2040:	781b      	ldrb	r3, [r3, #0]
    2042:	2b00      	cmp	r3, #0
    2044:	d005      	beq.n	2052 <STACK_SIZE+0x52>
		gen_input_hz >>= (divider+1);
    2046:	68fb      	ldr	r3, [r7, #12]
    2048:	3301      	adds	r3, #1
    204a:	697a      	ldr	r2, [r7, #20]
    204c:	40da      	lsrs	r2, r3
    204e:	0013      	movs	r3, r2
    2050:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    2052:	697b      	ldr	r3, [r7, #20]
}
    2054:	0018      	movs	r0, r3
    2056:	46bd      	mov	sp, r7
    2058:	b006      	add	sp, #24
    205a:	bd80      	pop	{r7, pc}
    205c:	00001dd5 	.word	0x00001dd5
    2060:	00001dad 	.word	0x00001dad
    2064:	40000c04 	.word	0x40000c04
    2068:	40000c00 	.word	0x40000c00
    206c:	00001a65 	.word	0x00001a65
    2070:	40000c08 	.word	0x40000c08
    2074:	00001dc1 	.word	0x00001dc1
    2078:	000024f1 	.word	0x000024f1

0000207c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    207c:	b580      	push	{r7, lr}
    207e:	b084      	sub	sp, #16
    2080:	af00      	add	r7, sp, #0
    2082:	0002      	movs	r2, r0
    2084:	6039      	str	r1, [r7, #0]
    2086:	1dfb      	adds	r3, r7, #7
    2088:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    208a:	1dfb      	adds	r3, r7, #7
    208c:	781b      	ldrb	r3, [r3, #0]
    208e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2090:	683b      	ldr	r3, [r7, #0]
    2092:	781b      	ldrb	r3, [r3, #0]
    2094:	021b      	lsls	r3, r3, #8
    2096:	001a      	movs	r2, r3
    2098:	68fb      	ldr	r3, [r7, #12]
    209a:	4313      	orrs	r3, r2
    209c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    209e:	1dfb      	adds	r3, r7, #7
    20a0:	781b      	ldrb	r3, [r3, #0]
    20a2:	0018      	movs	r0, r3
    20a4:	4b04      	ldr	r3, [pc, #16]	; (20b8 <system_gclk_chan_set_config+0x3c>)
    20a6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    20a8:	4b04      	ldr	r3, [pc, #16]	; (20bc <system_gclk_chan_set_config+0x40>)
    20aa:	68fa      	ldr	r2, [r7, #12]
    20ac:	b292      	uxth	r2, r2
    20ae:	805a      	strh	r2, [r3, #2]
}
    20b0:	46c0      	nop			; (mov r8, r8)
    20b2:	46bd      	mov	sp, r7
    20b4:	b004      	add	sp, #16
    20b6:	bd80      	pop	{r7, pc}
    20b8:	00002109 	.word	0x00002109
    20bc:	40000c00 	.word	0x40000c00

000020c0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    20c0:	b580      	push	{r7, lr}
    20c2:	b082      	sub	sp, #8
    20c4:	af00      	add	r7, sp, #0
    20c6:	0002      	movs	r2, r0
    20c8:	1dfb      	adds	r3, r7, #7
    20ca:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    20cc:	4b0a      	ldr	r3, [pc, #40]	; (20f8 <system_gclk_chan_enable+0x38>)
    20ce:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    20d0:	4a0a      	ldr	r2, [pc, #40]	; (20fc <system_gclk_chan_enable+0x3c>)
    20d2:	1dfb      	adds	r3, r7, #7
    20d4:	781b      	ldrb	r3, [r3, #0]
    20d6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    20d8:	4909      	ldr	r1, [pc, #36]	; (2100 <system_gclk_chan_enable+0x40>)
    20da:	4b09      	ldr	r3, [pc, #36]	; (2100 <system_gclk_chan_enable+0x40>)
    20dc:	885b      	ldrh	r3, [r3, #2]
    20de:	b29b      	uxth	r3, r3
    20e0:	2280      	movs	r2, #128	; 0x80
    20e2:	01d2      	lsls	r2, r2, #7
    20e4:	4313      	orrs	r3, r2
    20e6:	b29b      	uxth	r3, r3
    20e8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    20ea:	4b06      	ldr	r3, [pc, #24]	; (2104 <system_gclk_chan_enable+0x44>)
    20ec:	4798      	blx	r3
}
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	46bd      	mov	sp, r7
    20f2:	b002      	add	sp, #8
    20f4:	bd80      	pop	{r7, pc}
    20f6:	46c0      	nop			; (mov r8, r8)
    20f8:	00001dad 	.word	0x00001dad
    20fc:	40000c02 	.word	0x40000c02
    2100:	40000c00 	.word	0x40000c00
    2104:	00001dc1 	.word	0x00001dc1

00002108 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2108:	b580      	push	{r7, lr}
    210a:	b084      	sub	sp, #16
    210c:	af00      	add	r7, sp, #0
    210e:	0002      	movs	r2, r0
    2110:	1dfb      	adds	r3, r7, #7
    2112:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2114:	4b1c      	ldr	r3, [pc, #112]	; (2188 <system_gclk_chan_disable+0x80>)
    2116:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2118:	4a1c      	ldr	r2, [pc, #112]	; (218c <system_gclk_chan_disable+0x84>)
    211a:	1dfb      	adds	r3, r7, #7
    211c:	781b      	ldrb	r3, [r3, #0]
    211e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2120:	4b1b      	ldr	r3, [pc, #108]	; (2190 <system_gclk_chan_disable+0x88>)
    2122:	885b      	ldrh	r3, [r3, #2]
    2124:	051b      	lsls	r3, r3, #20
    2126:	0f1b      	lsrs	r3, r3, #28
    2128:	b2db      	uxtb	r3, r3
    212a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    212c:	4a18      	ldr	r2, [pc, #96]	; (2190 <system_gclk_chan_disable+0x88>)
    212e:	8853      	ldrh	r3, [r2, #2]
    2130:	4918      	ldr	r1, [pc, #96]	; (2194 <system_gclk_chan_disable+0x8c>)
    2132:	400b      	ands	r3, r1
    2134:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2136:	4a16      	ldr	r2, [pc, #88]	; (2190 <system_gclk_chan_disable+0x88>)
    2138:	4b15      	ldr	r3, [pc, #84]	; (2190 <system_gclk_chan_disable+0x88>)
    213a:	885b      	ldrh	r3, [r3, #2]
    213c:	b29b      	uxth	r3, r3
    213e:	4916      	ldr	r1, [pc, #88]	; (2198 <system_gclk_chan_disable+0x90>)
    2140:	400b      	ands	r3, r1
    2142:	b29b      	uxth	r3, r3
    2144:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2146:	46c0      	nop			; (mov r8, r8)
    2148:	4b11      	ldr	r3, [pc, #68]	; (2190 <system_gclk_chan_disable+0x88>)
    214a:	885b      	ldrh	r3, [r3, #2]
    214c:	b29b      	uxth	r3, r3
    214e:	001a      	movs	r2, r3
    2150:	2380      	movs	r3, #128	; 0x80
    2152:	01db      	lsls	r3, r3, #7
    2154:	4013      	ands	r3, r2
    2156:	d1f7      	bne.n	2148 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2158:	4a0d      	ldr	r2, [pc, #52]	; (2190 <system_gclk_chan_disable+0x88>)
    215a:	68fb      	ldr	r3, [r7, #12]
    215c:	b2db      	uxtb	r3, r3
    215e:	1c19      	adds	r1, r3, #0
    2160:	230f      	movs	r3, #15
    2162:	400b      	ands	r3, r1
    2164:	b2d9      	uxtb	r1, r3
    2166:	8853      	ldrh	r3, [r2, #2]
    2168:	1c08      	adds	r0, r1, #0
    216a:	210f      	movs	r1, #15
    216c:	4001      	ands	r1, r0
    216e:	0208      	lsls	r0, r1, #8
    2170:	4908      	ldr	r1, [pc, #32]	; (2194 <system_gclk_chan_disable+0x8c>)
    2172:	400b      	ands	r3, r1
    2174:	1c19      	adds	r1, r3, #0
    2176:	1c03      	adds	r3, r0, #0
    2178:	430b      	orrs	r3, r1
    217a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    217c:	4b07      	ldr	r3, [pc, #28]	; (219c <system_gclk_chan_disable+0x94>)
    217e:	4798      	blx	r3
}
    2180:	46c0      	nop			; (mov r8, r8)
    2182:	46bd      	mov	sp, r7
    2184:	b004      	add	sp, #16
    2186:	bd80      	pop	{r7, pc}
    2188:	00001dad 	.word	0x00001dad
    218c:	40000c02 	.word	0x40000c02
    2190:	40000c00 	.word	0x40000c00
    2194:	fffff0ff 	.word	0xfffff0ff
    2198:	ffffbfff 	.word	0xffffbfff
    219c:	00001dc1 	.word	0x00001dc1

000021a0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    21a0:	b580      	push	{r7, lr}
    21a2:	b084      	sub	sp, #16
    21a4:	af00      	add	r7, sp, #0
    21a6:	0002      	movs	r2, r0
    21a8:	1dfb      	adds	r3, r7, #7
    21aa:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    21ac:	4b0d      	ldr	r3, [pc, #52]	; (21e4 <system_gclk_chan_get_hz+0x44>)
    21ae:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    21b0:	4a0d      	ldr	r2, [pc, #52]	; (21e8 <system_gclk_chan_get_hz+0x48>)
    21b2:	1dfb      	adds	r3, r7, #7
    21b4:	781b      	ldrb	r3, [r3, #0]
    21b6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    21b8:	4b0c      	ldr	r3, [pc, #48]	; (21ec <system_gclk_chan_get_hz+0x4c>)
    21ba:	885b      	ldrh	r3, [r3, #2]
    21bc:	051b      	lsls	r3, r3, #20
    21be:	0f1b      	lsrs	r3, r3, #28
    21c0:	b2da      	uxtb	r2, r3
    21c2:	230f      	movs	r3, #15
    21c4:	18fb      	adds	r3, r7, r3
    21c6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    21c8:	4b09      	ldr	r3, [pc, #36]	; (21f0 <system_gclk_chan_get_hz+0x50>)
    21ca:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    21cc:	230f      	movs	r3, #15
    21ce:	18fb      	adds	r3, r7, r3
    21d0:	781b      	ldrb	r3, [r3, #0]
    21d2:	0018      	movs	r0, r3
    21d4:	4b07      	ldr	r3, [pc, #28]	; (21f4 <system_gclk_chan_get_hz+0x54>)
    21d6:	4798      	blx	r3
    21d8:	0003      	movs	r3, r0
}
    21da:	0018      	movs	r0, r3
    21dc:	46bd      	mov	sp, r7
    21de:	b004      	add	sp, #16
    21e0:	bd80      	pop	{r7, pc}
    21e2:	46c0      	nop			; (mov r8, r8)
    21e4:	00001dad 	.word	0x00001dad
    21e8:	40000c02 	.word	0x40000c02
    21ec:	40000c00 	.word	0x40000c00
    21f0:	00001dc1 	.word	0x00001dc1
    21f4:	00001fa5 	.word	0x00001fa5

000021f8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    21f8:	b580      	push	{r7, lr}
    21fa:	b084      	sub	sp, #16
    21fc:	af00      	add	r7, sp, #0
    21fe:	0002      	movs	r2, r0
    2200:	1dfb      	adds	r3, r7, #7
    2202:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2204:	230f      	movs	r3, #15
    2206:	18fb      	adds	r3, r7, r3
    2208:	1dfa      	adds	r2, r7, #7
    220a:	7812      	ldrb	r2, [r2, #0]
    220c:	09d2      	lsrs	r2, r2, #7
    220e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2210:	230e      	movs	r3, #14
    2212:	18fb      	adds	r3, r7, r3
    2214:	1dfa      	adds	r2, r7, #7
    2216:	7812      	ldrb	r2, [r2, #0]
    2218:	0952      	lsrs	r2, r2, #5
    221a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    221c:	4b0d      	ldr	r3, [pc, #52]	; (2254 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    221e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2220:	230f      	movs	r3, #15
    2222:	18fb      	adds	r3, r7, r3
    2224:	781b      	ldrb	r3, [r3, #0]
    2226:	2b00      	cmp	r3, #0
    2228:	d10f      	bne.n	224a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    222a:	230f      	movs	r3, #15
    222c:	18fb      	adds	r3, r7, r3
    222e:	781b      	ldrb	r3, [r3, #0]
    2230:	009b      	lsls	r3, r3, #2
    2232:	2210      	movs	r2, #16
    2234:	4694      	mov	ip, r2
    2236:	44bc      	add	ip, r7
    2238:	4463      	add	r3, ip
    223a:	3b08      	subs	r3, #8
    223c:	681a      	ldr	r2, [r3, #0]
    223e:	230e      	movs	r3, #14
    2240:	18fb      	adds	r3, r7, r3
    2242:	781b      	ldrb	r3, [r3, #0]
    2244:	01db      	lsls	r3, r3, #7
    2246:	18d3      	adds	r3, r2, r3
    2248:	e000      	b.n	224c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    224a:	2300      	movs	r3, #0
	}
}
    224c:	0018      	movs	r0, r3
    224e:	46bd      	mov	sp, r7
    2250:	b004      	add	sp, #16
    2252:	bd80      	pop	{r7, pc}
    2254:	41004400 	.word	0x41004400

00002258 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2258:	b580      	push	{r7, lr}
    225a:	b088      	sub	sp, #32
    225c:	af00      	add	r7, sp, #0
    225e:	60f8      	str	r0, [r7, #12]
    2260:	60b9      	str	r1, [r7, #8]
    2262:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2264:	2300      	movs	r3, #0
    2266:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2268:	687b      	ldr	r3, [r7, #4]
    226a:	78db      	ldrb	r3, [r3, #3]
    226c:	2201      	movs	r2, #1
    226e:	4053      	eors	r3, r2
    2270:	b2db      	uxtb	r3, r3
    2272:	2b00      	cmp	r3, #0
    2274:	d035      	beq.n	22e2 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2276:	687b      	ldr	r3, [r7, #4]
    2278:	781b      	ldrb	r3, [r3, #0]
    227a:	2b80      	cmp	r3, #128	; 0x80
    227c:	d00b      	beq.n	2296 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    227e:	69fb      	ldr	r3, [r7, #28]
    2280:	2280      	movs	r2, #128	; 0x80
    2282:	0252      	lsls	r2, r2, #9
    2284:	4313      	orrs	r3, r2
    2286:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2288:	687b      	ldr	r3, [r7, #4]
    228a:	781b      	ldrb	r3, [r3, #0]
    228c:	061b      	lsls	r3, r3, #24
    228e:	001a      	movs	r2, r3
    2290:	69fb      	ldr	r3, [r7, #28]
    2292:	4313      	orrs	r3, r2
    2294:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2296:	687b      	ldr	r3, [r7, #4]
    2298:	785b      	ldrb	r3, [r3, #1]
    229a:	2b00      	cmp	r3, #0
    229c:	d003      	beq.n	22a6 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    229e:	687b      	ldr	r3, [r7, #4]
    22a0:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    22a2:	2b02      	cmp	r3, #2
    22a4:	d110      	bne.n	22c8 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    22a6:	69fb      	ldr	r3, [r7, #28]
    22a8:	2280      	movs	r2, #128	; 0x80
    22aa:	0292      	lsls	r2, r2, #10
    22ac:	4313      	orrs	r3, r2
    22ae:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    22b0:	687b      	ldr	r3, [r7, #4]
    22b2:	789b      	ldrb	r3, [r3, #2]
    22b4:	2b00      	cmp	r3, #0
    22b6:	d004      	beq.n	22c2 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    22b8:	69fb      	ldr	r3, [r7, #28]
    22ba:	2280      	movs	r2, #128	; 0x80
    22bc:	02d2      	lsls	r2, r2, #11
    22be:	4313      	orrs	r3, r2
    22c0:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    22c2:	68fb      	ldr	r3, [r7, #12]
    22c4:	68ba      	ldr	r2, [r7, #8]
    22c6:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    22c8:	687b      	ldr	r3, [r7, #4]
    22ca:	785b      	ldrb	r3, [r3, #1]
    22cc:	2b01      	cmp	r3, #1
    22ce:	d003      	beq.n	22d8 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    22d0:	687b      	ldr	r3, [r7, #4]
    22d2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    22d4:	2b02      	cmp	r3, #2
    22d6:	d107      	bne.n	22e8 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    22d8:	69fb      	ldr	r3, [r7, #28]
    22da:	4a22      	ldr	r2, [pc, #136]	; (2364 <_system_pinmux_config+0x10c>)
    22dc:	4013      	ands	r3, r2
    22de:	61fb      	str	r3, [r7, #28]
    22e0:	e002      	b.n	22e8 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    22e2:	68fb      	ldr	r3, [r7, #12]
    22e4:	68ba      	ldr	r2, [r7, #8]
    22e6:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    22e8:	68bb      	ldr	r3, [r7, #8]
    22ea:	041b      	lsls	r3, r3, #16
    22ec:	0c1b      	lsrs	r3, r3, #16
    22ee:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    22f0:	68bb      	ldr	r3, [r7, #8]
    22f2:	0c1b      	lsrs	r3, r3, #16
    22f4:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22f6:	69ba      	ldr	r2, [r7, #24]
    22f8:	69fb      	ldr	r3, [r7, #28]
    22fa:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    22fc:	22a0      	movs	r2, #160	; 0xa0
    22fe:	05d2      	lsls	r2, r2, #23
    2300:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2302:	68fb      	ldr	r3, [r7, #12]
    2304:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2306:	697a      	ldr	r2, [r7, #20]
    2308:	69fb      	ldr	r3, [r7, #28]
    230a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    230c:	22d0      	movs	r2, #208	; 0xd0
    230e:	0612      	lsls	r2, r2, #24
    2310:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2312:	68fb      	ldr	r3, [r7, #12]
    2314:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2316:	687b      	ldr	r3, [r7, #4]
    2318:	78db      	ldrb	r3, [r3, #3]
    231a:	2201      	movs	r2, #1
    231c:	4053      	eors	r3, r2
    231e:	b2db      	uxtb	r3, r3
    2320:	2b00      	cmp	r3, #0
    2322:	d01a      	beq.n	235a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2324:	69fa      	ldr	r2, [r7, #28]
    2326:	2380      	movs	r3, #128	; 0x80
    2328:	02db      	lsls	r3, r3, #11
    232a:	4013      	ands	r3, r2
    232c:	d00a      	beq.n	2344 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    232e:	687b      	ldr	r3, [r7, #4]
    2330:	789b      	ldrb	r3, [r3, #2]
    2332:	2b01      	cmp	r3, #1
    2334:	d103      	bne.n	233e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    2336:	68fb      	ldr	r3, [r7, #12]
    2338:	68ba      	ldr	r2, [r7, #8]
    233a:	619a      	str	r2, [r3, #24]
    233c:	e002      	b.n	2344 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    233e:	68fb      	ldr	r3, [r7, #12]
    2340:	68ba      	ldr	r2, [r7, #8]
    2342:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2344:	687b      	ldr	r3, [r7, #4]
    2346:	785b      	ldrb	r3, [r3, #1]
    2348:	2b01      	cmp	r3, #1
    234a:	d003      	beq.n	2354 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    234c:	687b      	ldr	r3, [r7, #4]
    234e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2350:	2b02      	cmp	r3, #2
    2352:	d102      	bne.n	235a <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2354:	68fb      	ldr	r3, [r7, #12]
    2356:	68ba      	ldr	r2, [r7, #8]
    2358:	609a      	str	r2, [r3, #8]
		}
	}
}
    235a:	46c0      	nop			; (mov r8, r8)
    235c:	46bd      	mov	sp, r7
    235e:	b008      	add	sp, #32
    2360:	bd80      	pop	{r7, pc}
    2362:	46c0      	nop			; (mov r8, r8)
    2364:	fffbffff 	.word	0xfffbffff

00002368 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2368:	b580      	push	{r7, lr}
    236a:	b084      	sub	sp, #16
    236c:	af00      	add	r7, sp, #0
    236e:	0002      	movs	r2, r0
    2370:	6039      	str	r1, [r7, #0]
    2372:	1dfb      	adds	r3, r7, #7
    2374:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2376:	1dfb      	adds	r3, r7, #7
    2378:	781b      	ldrb	r3, [r3, #0]
    237a:	0018      	movs	r0, r3
    237c:	4b0a      	ldr	r3, [pc, #40]	; (23a8 <system_pinmux_pin_set_config+0x40>)
    237e:	4798      	blx	r3
    2380:	0003      	movs	r3, r0
    2382:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2384:	1dfb      	adds	r3, r7, #7
    2386:	781b      	ldrb	r3, [r3, #0]
    2388:	221f      	movs	r2, #31
    238a:	4013      	ands	r3, r2
    238c:	2201      	movs	r2, #1
    238e:	409a      	lsls	r2, r3
    2390:	0013      	movs	r3, r2
    2392:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    2394:	683a      	ldr	r2, [r7, #0]
    2396:	68b9      	ldr	r1, [r7, #8]
    2398:	68fb      	ldr	r3, [r7, #12]
    239a:	0018      	movs	r0, r3
    239c:	4b03      	ldr	r3, [pc, #12]	; (23ac <system_pinmux_pin_set_config+0x44>)
    239e:	4798      	blx	r3
}
    23a0:	46c0      	nop			; (mov r8, r8)
    23a2:	46bd      	mov	sp, r7
    23a4:	b004      	add	sp, #16
    23a6:	bd80      	pop	{r7, pc}
    23a8:	000021f9 	.word	0x000021f9
    23ac:	00002259 	.word	0x00002259

000023b0 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    23b0:	b580      	push	{r7, lr}
    23b2:	af00      	add	r7, sp, #0
	return;
    23b4:	46c0      	nop			; (mov r8, r8)
}
    23b6:	46bd      	mov	sp, r7
    23b8:	bd80      	pop	{r7, pc}
	...

000023bc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    23bc:	b580      	push	{r7, lr}
    23be:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    23c0:	4b06      	ldr	r3, [pc, #24]	; (23dc <system_init+0x20>)
    23c2:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    23c4:	4b06      	ldr	r3, [pc, #24]	; (23e0 <system_init+0x24>)
    23c6:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    23c8:	4b06      	ldr	r3, [pc, #24]	; (23e4 <system_init+0x28>)
    23ca:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    23cc:	4b06      	ldr	r3, [pc, #24]	; (23e8 <system_init+0x2c>)
    23ce:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    23d0:	4b06      	ldr	r3, [pc, #24]	; (23ec <system_init+0x30>)
    23d2:	4798      	blx	r3
}
    23d4:	46c0      	nop			; (mov r8, r8)
    23d6:	46bd      	mov	sp, r7
    23d8:	bd80      	pop	{r7, pc}
    23da:	46c0      	nop			; (mov r8, r8)
    23dc:	00001c7d 	.word	0x00001c7d
    23e0:	0000186d 	.word	0x0000186d
    23e4:	000023b1 	.word	0x000023b1
    23e8:	000023b1 	.word	0x000023b1
    23ec:	000023b1 	.word	0x000023b1

000023f0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    23f0:	b580      	push	{r7, lr}
    23f2:	b082      	sub	sp, #8
    23f4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    23f6:	4b2f      	ldr	r3, [pc, #188]	; (24b4 <Reset_Handler+0xc4>)
    23f8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    23fa:	4b2f      	ldr	r3, [pc, #188]	; (24b8 <Reset_Handler+0xc8>)
    23fc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    23fe:	687a      	ldr	r2, [r7, #4]
    2400:	683b      	ldr	r3, [r7, #0]
    2402:	429a      	cmp	r2, r3
    2404:	d00c      	beq.n	2420 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    2406:	e007      	b.n	2418 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    2408:	683b      	ldr	r3, [r7, #0]
    240a:	1d1a      	adds	r2, r3, #4
    240c:	603a      	str	r2, [r7, #0]
    240e:	687a      	ldr	r2, [r7, #4]
    2410:	1d11      	adds	r1, r2, #4
    2412:	6079      	str	r1, [r7, #4]
    2414:	6812      	ldr	r2, [r2, #0]
    2416:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    2418:	683a      	ldr	r2, [r7, #0]
    241a:	4b28      	ldr	r3, [pc, #160]	; (24bc <Reset_Handler+0xcc>)
    241c:	429a      	cmp	r2, r3
    241e:	d3f3      	bcc.n	2408 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2420:	4b27      	ldr	r3, [pc, #156]	; (24c0 <Reset_Handler+0xd0>)
    2422:	603b      	str	r3, [r7, #0]
    2424:	e004      	b.n	2430 <Reset_Handler+0x40>
                *pDest++ = 0;
    2426:	683b      	ldr	r3, [r7, #0]
    2428:	1d1a      	adds	r2, r3, #4
    242a:	603a      	str	r2, [r7, #0]
    242c:	2200      	movs	r2, #0
    242e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    2430:	683a      	ldr	r2, [r7, #0]
    2432:	4b24      	ldr	r3, [pc, #144]	; (24c4 <Reset_Handler+0xd4>)
    2434:	429a      	cmp	r2, r3
    2436:	d3f6      	bcc.n	2426 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    2438:	4b23      	ldr	r3, [pc, #140]	; (24c8 <Reset_Handler+0xd8>)
    243a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    243c:	4b23      	ldr	r3, [pc, #140]	; (24cc <Reset_Handler+0xdc>)
    243e:	687a      	ldr	r2, [r7, #4]
    2440:	21ff      	movs	r1, #255	; 0xff
    2442:	438a      	bics	r2, r1
    2444:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2446:	4a22      	ldr	r2, [pc, #136]	; (24d0 <Reset_Handler+0xe0>)
    2448:	2390      	movs	r3, #144	; 0x90
    244a:	005b      	lsls	r3, r3, #1
    244c:	2102      	movs	r1, #2
    244e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2450:	4a20      	ldr	r2, [pc, #128]	; (24d4 <Reset_Handler+0xe4>)
    2452:	78d3      	ldrb	r3, [r2, #3]
    2454:	2103      	movs	r1, #3
    2456:	438b      	bics	r3, r1
    2458:	1c19      	adds	r1, r3, #0
    245a:	2302      	movs	r3, #2
    245c:	430b      	orrs	r3, r1
    245e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2460:	4a1c      	ldr	r2, [pc, #112]	; (24d4 <Reset_Handler+0xe4>)
    2462:	78d3      	ldrb	r3, [r2, #3]
    2464:	210c      	movs	r1, #12
    2466:	438b      	bics	r3, r1
    2468:	1c19      	adds	r1, r3, #0
    246a:	2308      	movs	r3, #8
    246c:	430b      	orrs	r3, r1
    246e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    2470:	4a19      	ldr	r2, [pc, #100]	; (24d8 <Reset_Handler+0xe8>)
    2472:	7b93      	ldrb	r3, [r2, #14]
    2474:	2130      	movs	r1, #48	; 0x30
    2476:	438b      	bics	r3, r1
    2478:	1c19      	adds	r1, r3, #0
    247a:	2320      	movs	r3, #32
    247c:	430b      	orrs	r3, r1
    247e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2480:	4a15      	ldr	r2, [pc, #84]	; (24d8 <Reset_Handler+0xe8>)
    2482:	7b93      	ldrb	r3, [r2, #14]
    2484:	210c      	movs	r1, #12
    2486:	438b      	bics	r3, r1
    2488:	1c19      	adds	r1, r3, #0
    248a:	2308      	movs	r3, #8
    248c:	430b      	orrs	r3, r1
    248e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2490:	4a11      	ldr	r2, [pc, #68]	; (24d8 <Reset_Handler+0xe8>)
    2492:	7b93      	ldrb	r3, [r2, #14]
    2494:	2103      	movs	r1, #3
    2496:	438b      	bics	r3, r1
    2498:	1c19      	adds	r1, r3, #0
    249a:	2302      	movs	r3, #2
    249c:	430b      	orrs	r3, r1
    249e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    24a0:	4a0e      	ldr	r2, [pc, #56]	; (24dc <Reset_Handler+0xec>)
    24a2:	6853      	ldr	r3, [r2, #4]
    24a4:	2180      	movs	r1, #128	; 0x80
    24a6:	430b      	orrs	r3, r1
    24a8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    24aa:	4b0d      	ldr	r3, [pc, #52]	; (24e0 <Reset_Handler+0xf0>)
    24ac:	4798      	blx	r3

        /* Branch to main function */
        main();
    24ae:	4b0d      	ldr	r3, [pc, #52]	; (24e4 <Reset_Handler+0xf4>)
    24b0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    24b2:	e7fe      	b.n	24b2 <Reset_Handler+0xc2>
    24b4:	00002898 	.word	0x00002898
    24b8:	20000000 	.word	0x20000000
    24bc:	2000043c 	.word	0x2000043c
    24c0:	2000043c 	.word	0x2000043c
    24c4:	200004d0 	.word	0x200004d0
    24c8:	00000000 	.word	0x00000000
    24cc:	e000ed00 	.word	0xe000ed00
    24d0:	41007000 	.word	0x41007000
    24d4:	41005000 	.word	0x41005000
    24d8:	41004800 	.word	0x41004800
    24dc:	41004000 	.word	0x41004000
    24e0:	0000265d 	.word	0x0000265d
    24e4:	00000439 	.word	0x00000439

000024e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    24e8:	b580      	push	{r7, lr}
    24ea:	af00      	add	r7, sp, #0
        while (1) {
    24ec:	e7fe      	b.n	24ec <Dummy_Handler+0x4>
	...

000024f0 <__udivsi3>:
    24f0:	2200      	movs	r2, #0
    24f2:	0843      	lsrs	r3, r0, #1
    24f4:	428b      	cmp	r3, r1
    24f6:	d374      	bcc.n	25e2 <__udivsi3+0xf2>
    24f8:	0903      	lsrs	r3, r0, #4
    24fa:	428b      	cmp	r3, r1
    24fc:	d35f      	bcc.n	25be <__udivsi3+0xce>
    24fe:	0a03      	lsrs	r3, r0, #8
    2500:	428b      	cmp	r3, r1
    2502:	d344      	bcc.n	258e <__udivsi3+0x9e>
    2504:	0b03      	lsrs	r3, r0, #12
    2506:	428b      	cmp	r3, r1
    2508:	d328      	bcc.n	255c <__udivsi3+0x6c>
    250a:	0c03      	lsrs	r3, r0, #16
    250c:	428b      	cmp	r3, r1
    250e:	d30d      	bcc.n	252c <__udivsi3+0x3c>
    2510:	22ff      	movs	r2, #255	; 0xff
    2512:	0209      	lsls	r1, r1, #8
    2514:	ba12      	rev	r2, r2
    2516:	0c03      	lsrs	r3, r0, #16
    2518:	428b      	cmp	r3, r1
    251a:	d302      	bcc.n	2522 <__udivsi3+0x32>
    251c:	1212      	asrs	r2, r2, #8
    251e:	0209      	lsls	r1, r1, #8
    2520:	d065      	beq.n	25ee <__udivsi3+0xfe>
    2522:	0b03      	lsrs	r3, r0, #12
    2524:	428b      	cmp	r3, r1
    2526:	d319      	bcc.n	255c <__udivsi3+0x6c>
    2528:	e000      	b.n	252c <__udivsi3+0x3c>
    252a:	0a09      	lsrs	r1, r1, #8
    252c:	0bc3      	lsrs	r3, r0, #15
    252e:	428b      	cmp	r3, r1
    2530:	d301      	bcc.n	2536 <__udivsi3+0x46>
    2532:	03cb      	lsls	r3, r1, #15
    2534:	1ac0      	subs	r0, r0, r3
    2536:	4152      	adcs	r2, r2
    2538:	0b83      	lsrs	r3, r0, #14
    253a:	428b      	cmp	r3, r1
    253c:	d301      	bcc.n	2542 <__udivsi3+0x52>
    253e:	038b      	lsls	r3, r1, #14
    2540:	1ac0      	subs	r0, r0, r3
    2542:	4152      	adcs	r2, r2
    2544:	0b43      	lsrs	r3, r0, #13
    2546:	428b      	cmp	r3, r1
    2548:	d301      	bcc.n	254e <__udivsi3+0x5e>
    254a:	034b      	lsls	r3, r1, #13
    254c:	1ac0      	subs	r0, r0, r3
    254e:	4152      	adcs	r2, r2
    2550:	0b03      	lsrs	r3, r0, #12
    2552:	428b      	cmp	r3, r1
    2554:	d301      	bcc.n	255a <__udivsi3+0x6a>
    2556:	030b      	lsls	r3, r1, #12
    2558:	1ac0      	subs	r0, r0, r3
    255a:	4152      	adcs	r2, r2
    255c:	0ac3      	lsrs	r3, r0, #11
    255e:	428b      	cmp	r3, r1
    2560:	d301      	bcc.n	2566 <__udivsi3+0x76>
    2562:	02cb      	lsls	r3, r1, #11
    2564:	1ac0      	subs	r0, r0, r3
    2566:	4152      	adcs	r2, r2
    2568:	0a83      	lsrs	r3, r0, #10
    256a:	428b      	cmp	r3, r1
    256c:	d301      	bcc.n	2572 <__udivsi3+0x82>
    256e:	028b      	lsls	r3, r1, #10
    2570:	1ac0      	subs	r0, r0, r3
    2572:	4152      	adcs	r2, r2
    2574:	0a43      	lsrs	r3, r0, #9
    2576:	428b      	cmp	r3, r1
    2578:	d301      	bcc.n	257e <__udivsi3+0x8e>
    257a:	024b      	lsls	r3, r1, #9
    257c:	1ac0      	subs	r0, r0, r3
    257e:	4152      	adcs	r2, r2
    2580:	0a03      	lsrs	r3, r0, #8
    2582:	428b      	cmp	r3, r1
    2584:	d301      	bcc.n	258a <__udivsi3+0x9a>
    2586:	020b      	lsls	r3, r1, #8
    2588:	1ac0      	subs	r0, r0, r3
    258a:	4152      	adcs	r2, r2
    258c:	d2cd      	bcs.n	252a <__udivsi3+0x3a>
    258e:	09c3      	lsrs	r3, r0, #7
    2590:	428b      	cmp	r3, r1
    2592:	d301      	bcc.n	2598 <__udivsi3+0xa8>
    2594:	01cb      	lsls	r3, r1, #7
    2596:	1ac0      	subs	r0, r0, r3
    2598:	4152      	adcs	r2, r2
    259a:	0983      	lsrs	r3, r0, #6
    259c:	428b      	cmp	r3, r1
    259e:	d301      	bcc.n	25a4 <__udivsi3+0xb4>
    25a0:	018b      	lsls	r3, r1, #6
    25a2:	1ac0      	subs	r0, r0, r3
    25a4:	4152      	adcs	r2, r2
    25a6:	0943      	lsrs	r3, r0, #5
    25a8:	428b      	cmp	r3, r1
    25aa:	d301      	bcc.n	25b0 <__udivsi3+0xc0>
    25ac:	014b      	lsls	r3, r1, #5
    25ae:	1ac0      	subs	r0, r0, r3
    25b0:	4152      	adcs	r2, r2
    25b2:	0903      	lsrs	r3, r0, #4
    25b4:	428b      	cmp	r3, r1
    25b6:	d301      	bcc.n	25bc <__udivsi3+0xcc>
    25b8:	010b      	lsls	r3, r1, #4
    25ba:	1ac0      	subs	r0, r0, r3
    25bc:	4152      	adcs	r2, r2
    25be:	08c3      	lsrs	r3, r0, #3
    25c0:	428b      	cmp	r3, r1
    25c2:	d301      	bcc.n	25c8 <__udivsi3+0xd8>
    25c4:	00cb      	lsls	r3, r1, #3
    25c6:	1ac0      	subs	r0, r0, r3
    25c8:	4152      	adcs	r2, r2
    25ca:	0883      	lsrs	r3, r0, #2
    25cc:	428b      	cmp	r3, r1
    25ce:	d301      	bcc.n	25d4 <__udivsi3+0xe4>
    25d0:	008b      	lsls	r3, r1, #2
    25d2:	1ac0      	subs	r0, r0, r3
    25d4:	4152      	adcs	r2, r2
    25d6:	0843      	lsrs	r3, r0, #1
    25d8:	428b      	cmp	r3, r1
    25da:	d301      	bcc.n	25e0 <__udivsi3+0xf0>
    25dc:	004b      	lsls	r3, r1, #1
    25de:	1ac0      	subs	r0, r0, r3
    25e0:	4152      	adcs	r2, r2
    25e2:	1a41      	subs	r1, r0, r1
    25e4:	d200      	bcs.n	25e8 <__udivsi3+0xf8>
    25e6:	4601      	mov	r1, r0
    25e8:	4152      	adcs	r2, r2
    25ea:	4610      	mov	r0, r2
    25ec:	4770      	bx	lr
    25ee:	e7ff      	b.n	25f0 <__udivsi3+0x100>
    25f0:	b501      	push	{r0, lr}
    25f2:	2000      	movs	r0, #0
    25f4:	f000 f806 	bl	2604 <__aeabi_idiv0>
    25f8:	bd02      	pop	{r1, pc}
    25fa:	46c0      	nop			; (mov r8, r8)

000025fc <__aeabi_uidivmod>:
    25fc:	2900      	cmp	r1, #0
    25fe:	d0f7      	beq.n	25f0 <__udivsi3+0x100>
    2600:	e776      	b.n	24f0 <__udivsi3>
    2602:	4770      	bx	lr

00002604 <__aeabi_idiv0>:
    2604:	4770      	bx	lr
    2606:	46c0      	nop			; (mov r8, r8)

00002608 <__aeabi_lmul>:
    2608:	b5f0      	push	{r4, r5, r6, r7, lr}
    260a:	46ce      	mov	lr, r9
    260c:	4647      	mov	r7, r8
    260e:	0415      	lsls	r5, r2, #16
    2610:	0c2d      	lsrs	r5, r5, #16
    2612:	002e      	movs	r6, r5
    2614:	b580      	push	{r7, lr}
    2616:	0407      	lsls	r7, r0, #16
    2618:	0c14      	lsrs	r4, r2, #16
    261a:	0c3f      	lsrs	r7, r7, #16
    261c:	4699      	mov	r9, r3
    261e:	0c03      	lsrs	r3, r0, #16
    2620:	437e      	muls	r6, r7
    2622:	435d      	muls	r5, r3
    2624:	4367      	muls	r7, r4
    2626:	4363      	muls	r3, r4
    2628:	197f      	adds	r7, r7, r5
    262a:	0c34      	lsrs	r4, r6, #16
    262c:	19e4      	adds	r4, r4, r7
    262e:	469c      	mov	ip, r3
    2630:	42a5      	cmp	r5, r4
    2632:	d903      	bls.n	263c <__aeabi_lmul+0x34>
    2634:	2380      	movs	r3, #128	; 0x80
    2636:	025b      	lsls	r3, r3, #9
    2638:	4698      	mov	r8, r3
    263a:	44c4      	add	ip, r8
    263c:	464b      	mov	r3, r9
    263e:	4351      	muls	r1, r2
    2640:	4343      	muls	r3, r0
    2642:	0436      	lsls	r6, r6, #16
    2644:	0c36      	lsrs	r6, r6, #16
    2646:	0c25      	lsrs	r5, r4, #16
    2648:	0424      	lsls	r4, r4, #16
    264a:	4465      	add	r5, ip
    264c:	19a4      	adds	r4, r4, r6
    264e:	1859      	adds	r1, r3, r1
    2650:	1949      	adds	r1, r1, r5
    2652:	0020      	movs	r0, r4
    2654:	bc0c      	pop	{r2, r3}
    2656:	4690      	mov	r8, r2
    2658:	4699      	mov	r9, r3
    265a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000265c <__libc_init_array>:
    265c:	b570      	push	{r4, r5, r6, lr}
    265e:	4e0d      	ldr	r6, [pc, #52]	; (2694 <__libc_init_array+0x38>)
    2660:	4d0d      	ldr	r5, [pc, #52]	; (2698 <__libc_init_array+0x3c>)
    2662:	2400      	movs	r4, #0
    2664:	1bad      	subs	r5, r5, r6
    2666:	10ad      	asrs	r5, r5, #2
    2668:	d005      	beq.n	2676 <__libc_init_array+0x1a>
    266a:	00a3      	lsls	r3, r4, #2
    266c:	58f3      	ldr	r3, [r6, r3]
    266e:	3401      	adds	r4, #1
    2670:	4798      	blx	r3
    2672:	42a5      	cmp	r5, r4
    2674:	d1f9      	bne.n	266a <__libc_init_array+0xe>
    2676:	f000 f8fd 	bl	2874 <_init>
    267a:	4e08      	ldr	r6, [pc, #32]	; (269c <__libc_init_array+0x40>)
    267c:	4d08      	ldr	r5, [pc, #32]	; (26a0 <__libc_init_array+0x44>)
    267e:	2400      	movs	r4, #0
    2680:	1bad      	subs	r5, r5, r6
    2682:	10ad      	asrs	r5, r5, #2
    2684:	d005      	beq.n	2692 <__libc_init_array+0x36>
    2686:	00a3      	lsls	r3, r4, #2
    2688:	58f3      	ldr	r3, [r6, r3]
    268a:	3401      	adds	r4, #1
    268c:	4798      	blx	r3
    268e:	42a5      	cmp	r5, r4
    2690:	d1f9      	bne.n	2686 <__libc_init_array+0x2a>
    2692:	bd70      	pop	{r4, r5, r6, pc}
    2694:	00002880 	.word	0x00002880
    2698:	00002880 	.word	0x00002880
    269c:	00002880 	.word	0x00002880
    26a0:	00002888 	.word	0x00002888

000026a4 <register_fini>:
    26a4:	4b03      	ldr	r3, [pc, #12]	; (26b4 <register_fini+0x10>)
    26a6:	b510      	push	{r4, lr}
    26a8:	2b00      	cmp	r3, #0
    26aa:	d002      	beq.n	26b2 <register_fini+0xe>
    26ac:	4802      	ldr	r0, [pc, #8]	; (26b8 <register_fini+0x14>)
    26ae:	f000 f805 	bl	26bc <atexit>
    26b2:	bd10      	pop	{r4, pc}
    26b4:	00000000 	.word	0x00000000
    26b8:	000026cd 	.word	0x000026cd

000026bc <atexit>:
    26bc:	b510      	push	{r4, lr}
    26be:	0001      	movs	r1, r0
    26c0:	2300      	movs	r3, #0
    26c2:	2200      	movs	r2, #0
    26c4:	2000      	movs	r0, #0
    26c6:	f000 f81f 	bl	2708 <__register_exitproc>
    26ca:	bd10      	pop	{r4, pc}

000026cc <__libc_fini_array>:
    26cc:	b570      	push	{r4, r5, r6, lr}
    26ce:	4b09      	ldr	r3, [pc, #36]	; (26f4 <__libc_fini_array+0x28>)
    26d0:	4c09      	ldr	r4, [pc, #36]	; (26f8 <__libc_fini_array+0x2c>)
    26d2:	1ae4      	subs	r4, r4, r3
    26d4:	10a4      	asrs	r4, r4, #2
    26d6:	d009      	beq.n	26ec <__libc_fini_array+0x20>
    26d8:	4a08      	ldr	r2, [pc, #32]	; (26fc <__libc_fini_array+0x30>)
    26da:	18a5      	adds	r5, r4, r2
    26dc:	00ad      	lsls	r5, r5, #2
    26de:	18ed      	adds	r5, r5, r3
    26e0:	682b      	ldr	r3, [r5, #0]
    26e2:	3c01      	subs	r4, #1
    26e4:	4798      	blx	r3
    26e6:	3d04      	subs	r5, #4
    26e8:	2c00      	cmp	r4, #0
    26ea:	d1f9      	bne.n	26e0 <__libc_fini_array+0x14>
    26ec:	f000 f8cc 	bl	2888 <_fini>
    26f0:	bd70      	pop	{r4, r5, r6, pc}
    26f2:	46c0      	nop			; (mov r8, r8)
    26f4:	00002894 	.word	0x00002894
    26f8:	00002898 	.word	0x00002898
    26fc:	3fffffff 	.word	0x3fffffff

00002700 <__retarget_lock_acquire_recursive>:
    2700:	4770      	bx	lr
    2702:	46c0      	nop			; (mov r8, r8)

00002704 <__retarget_lock_release_recursive>:
    2704:	4770      	bx	lr
    2706:	46c0      	nop			; (mov r8, r8)

00002708 <__register_exitproc>:
    2708:	b5f0      	push	{r4, r5, r6, r7, lr}
    270a:	464e      	mov	r6, r9
    270c:	4645      	mov	r5, r8
    270e:	46de      	mov	lr, fp
    2710:	4657      	mov	r7, sl
    2712:	b5e0      	push	{r5, r6, r7, lr}
    2714:	4d36      	ldr	r5, [pc, #216]	; (27f0 <__register_exitproc+0xe8>)
    2716:	b083      	sub	sp, #12
    2718:	0006      	movs	r6, r0
    271a:	6828      	ldr	r0, [r5, #0]
    271c:	4698      	mov	r8, r3
    271e:	000f      	movs	r7, r1
    2720:	4691      	mov	r9, r2
    2722:	f7ff ffed 	bl	2700 <__retarget_lock_acquire_recursive>
    2726:	4b33      	ldr	r3, [pc, #204]	; (27f4 <__register_exitproc+0xec>)
    2728:	681c      	ldr	r4, [r3, #0]
    272a:	23a4      	movs	r3, #164	; 0xa4
    272c:	005b      	lsls	r3, r3, #1
    272e:	58e0      	ldr	r0, [r4, r3]
    2730:	2800      	cmp	r0, #0
    2732:	d052      	beq.n	27da <__register_exitproc+0xd2>
    2734:	6843      	ldr	r3, [r0, #4]
    2736:	2b1f      	cmp	r3, #31
    2738:	dc13      	bgt.n	2762 <__register_exitproc+0x5a>
    273a:	1c5a      	adds	r2, r3, #1
    273c:	9201      	str	r2, [sp, #4]
    273e:	2e00      	cmp	r6, #0
    2740:	d128      	bne.n	2794 <__register_exitproc+0x8c>
    2742:	9a01      	ldr	r2, [sp, #4]
    2744:	3302      	adds	r3, #2
    2746:	009b      	lsls	r3, r3, #2
    2748:	6042      	str	r2, [r0, #4]
    274a:	501f      	str	r7, [r3, r0]
    274c:	6828      	ldr	r0, [r5, #0]
    274e:	f7ff ffd9 	bl	2704 <__retarget_lock_release_recursive>
    2752:	2000      	movs	r0, #0
    2754:	b003      	add	sp, #12
    2756:	bc3c      	pop	{r2, r3, r4, r5}
    2758:	4690      	mov	r8, r2
    275a:	4699      	mov	r9, r3
    275c:	46a2      	mov	sl, r4
    275e:	46ab      	mov	fp, r5
    2760:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2762:	4b25      	ldr	r3, [pc, #148]	; (27f8 <__register_exitproc+0xf0>)
    2764:	2b00      	cmp	r3, #0
    2766:	d03d      	beq.n	27e4 <__register_exitproc+0xdc>
    2768:	20c8      	movs	r0, #200	; 0xc8
    276a:	0040      	lsls	r0, r0, #1
    276c:	e000      	b.n	2770 <__register_exitproc+0x68>
    276e:	bf00      	nop
    2770:	2800      	cmp	r0, #0
    2772:	d037      	beq.n	27e4 <__register_exitproc+0xdc>
    2774:	22a4      	movs	r2, #164	; 0xa4
    2776:	2300      	movs	r3, #0
    2778:	0052      	lsls	r2, r2, #1
    277a:	58a1      	ldr	r1, [r4, r2]
    277c:	6043      	str	r3, [r0, #4]
    277e:	6001      	str	r1, [r0, #0]
    2780:	50a0      	str	r0, [r4, r2]
    2782:	3240      	adds	r2, #64	; 0x40
    2784:	5083      	str	r3, [r0, r2]
    2786:	3204      	adds	r2, #4
    2788:	5083      	str	r3, [r0, r2]
    278a:	3301      	adds	r3, #1
    278c:	9301      	str	r3, [sp, #4]
    278e:	2300      	movs	r3, #0
    2790:	2e00      	cmp	r6, #0
    2792:	d0d6      	beq.n	2742 <__register_exitproc+0x3a>
    2794:	009a      	lsls	r2, r3, #2
    2796:	4692      	mov	sl, r2
    2798:	4482      	add	sl, r0
    279a:	464a      	mov	r2, r9
    279c:	2188      	movs	r1, #136	; 0x88
    279e:	4654      	mov	r4, sl
    27a0:	5062      	str	r2, [r4, r1]
    27a2:	22c4      	movs	r2, #196	; 0xc4
    27a4:	0052      	lsls	r2, r2, #1
    27a6:	4691      	mov	r9, r2
    27a8:	4481      	add	r9, r0
    27aa:	464a      	mov	r2, r9
    27ac:	3987      	subs	r1, #135	; 0x87
    27ae:	4099      	lsls	r1, r3
    27b0:	6812      	ldr	r2, [r2, #0]
    27b2:	468b      	mov	fp, r1
    27b4:	430a      	orrs	r2, r1
    27b6:	4694      	mov	ip, r2
    27b8:	464a      	mov	r2, r9
    27ba:	4661      	mov	r1, ip
    27bc:	6011      	str	r1, [r2, #0]
    27be:	2284      	movs	r2, #132	; 0x84
    27c0:	4641      	mov	r1, r8
    27c2:	0052      	lsls	r2, r2, #1
    27c4:	50a1      	str	r1, [r4, r2]
    27c6:	2e02      	cmp	r6, #2
    27c8:	d1bb      	bne.n	2742 <__register_exitproc+0x3a>
    27ca:	0002      	movs	r2, r0
    27cc:	465c      	mov	r4, fp
    27ce:	328d      	adds	r2, #141	; 0x8d
    27d0:	32ff      	adds	r2, #255	; 0xff
    27d2:	6811      	ldr	r1, [r2, #0]
    27d4:	430c      	orrs	r4, r1
    27d6:	6014      	str	r4, [r2, #0]
    27d8:	e7b3      	b.n	2742 <__register_exitproc+0x3a>
    27da:	0020      	movs	r0, r4
    27dc:	304d      	adds	r0, #77	; 0x4d
    27de:	30ff      	adds	r0, #255	; 0xff
    27e0:	50e0      	str	r0, [r4, r3]
    27e2:	e7a7      	b.n	2734 <__register_exitproc+0x2c>
    27e4:	6828      	ldr	r0, [r5, #0]
    27e6:	f7ff ff8d 	bl	2704 <__retarget_lock_release_recursive>
    27ea:	2001      	movs	r0, #1
    27ec:	4240      	negs	r0, r0
    27ee:	e7b1      	b.n	2754 <__register_exitproc+0x4c>
    27f0:	20000438 	.word	0x20000438
    27f4:	00002870 	.word	0x00002870
    27f8:	00000000 	.word	0x00000000
    27fc:	6f686345 	.word	0x6f686345
    2800:	0000203a 	.word	0x0000203a
    2804:	0000000a 	.word	0x0000000a
    2808:	42000800 	.word	0x42000800
    280c:	42000c00 	.word	0x42000c00
    2810:	42001000 	.word	0x42001000
    2814:	42001400 	.word	0x42001400
    2818:	42001800 	.word	0x42001800
    281c:	42001c00 	.word	0x42001c00
    2820:	0c0b0a09 	.word	0x0c0b0a09
    2824:	00000e0d 	.word	0x00000e0d
    2828:	00001a82 	.word	0x00001a82
    282c:	00001afa 	.word	0x00001afa
    2830:	00001afa 	.word	0x00001afa
    2834:	00001aa0 	.word	0x00001aa0
    2838:	00001a9a 	.word	0x00001a9a
    283c:	00001aa6 	.word	0x00001aa6
    2840:	00001a88 	.word	0x00001a88
    2844:	00001aac 	.word	0x00001aac
    2848:	00001ae0 	.word	0x00001ae0
    284c:	00001bd4 	.word	0x00001bd4
    2850:	00001c24 	.word	0x00001c24
    2854:	00001c24 	.word	0x00001c24
    2858:	00001c20 	.word	0x00001c20
    285c:	00001bc6 	.word	0x00001bc6
    2860:	00001be6 	.word	0x00001be6
    2864:	00001bb6 	.word	0x00001bb6
    2868:	00001bf8 	.word	0x00001bf8
    286c:	00001c0a 	.word	0x00001c0a

00002870 <_global_impure_ptr>:
    2870:	20000010                                ... 

00002874 <_init>:
    2874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2876:	46c0      	nop			; (mov r8, r8)
    2878:	bcf8      	pop	{r3, r4, r5, r6, r7}
    287a:	bc08      	pop	{r3}
    287c:	469e      	mov	lr, r3
    287e:	4770      	bx	lr

00002880 <__init_array_start>:
    2880:	000026a5 	.word	0x000026a5

00002884 <__frame_dummy_init_array_entry>:
    2884:	000000dd                                ....

00002888 <_fini>:
    2888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    288a:	46c0      	nop			; (mov r8, r8)
    288c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    288e:	bc08      	pop	{r3}
    2890:	469e      	mov	lr, r3
    2892:	4770      	bx	lr

00002894 <__fini_array_start>:
    2894:	000000b5 	.word	0x000000b5
